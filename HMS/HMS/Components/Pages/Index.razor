@page "/"
@using DBLayer
@using HMS.ViewModels
@* @using Microsoft.AspNetCore.Identity *@
@* @using Microsoft.AspNetCore.Components.Authorization *@
@using System.Diagnostics
@* @using System.Security.Claims; *@



@inherits LayoutComponentBase
@inject IndexViewModel ViewModel

@inject Navigator Navigator
@inject Routes.LayoutService layoutService
@inject DbInitializeService initDB
@inject UserService UserService
@inject UniComponents.Services.IAppLifeCycleService AppLifecycleService
@implements IDisposable

@inject DBContext db

@*<InfoModal @ref="ViewModel.CloseAppModal" Text="Chcete ukončiť aplikáciu?"></InfoModal>*@
<ApproveModal @ref="LogOffModal" Header="" Text="Chcete sa odhlásiť?" FuncOnSucc="EventCallback.Empty" FuncOnDiss="EventCallback.Empty"></ApproveModal>
<CustomModal @ref="ShowZmenymod" ID="showzmeny" Header="Nájdené zmeny" SizeInRem="80">
    <BODY>
        <textarea class="form-control w-100">@string.Join("", pendingChanges.Select(s => s + "|||\n"))</textarea>
    </BODY>
</CustomModal>

@if (UserService.LoggedUser != null)
{
    <div class="" style="height: 100%; overflow: hidden;">
        <button type="button" @onclick="LogOff" class="btn btn-primary">Prihlásený: @UserService.LoggedUser?.UserName</button>
        @if (pendingChanges.Count != 0)
        {
            <button type="button" @onclick="ShowZmeny" class="btn btn-danger ">Nájdene zmeny v DB</button>
        }


        <div class="d-flex justify-content-center align-items-start vh-100">
            <div class="p-3 w-50 h-100" style="max-height: 87vh;">
                <div class="list-group text-center border border-2 border-black" style="max-height: 100%; overflow-y: auto;">

                    @foreach (var item in ViewModel.ModulesList)
                    {
                        if (item.Item3.Contains(UserService.LoggedUserRole))
                        {
                            <a @onclick="@(() => Navigator.NavigateTo(item.Item2, saveThisUrl: true))" class="list-group-item list-group-item-action">@item.Item1</a>
                        }
                    }
                </div>
            </div>

            @*<button @onclick="EXCT">Spusti</button>*@
        </div>
    </div>
}
else
{
    <div class="d-flex justify-content-center align-items-center vh-100">
        <SpinnerLoading Size="5" />
    </div>
}

<div class="position-relative d-flex">
    <div class="position-absolute bottom-0 start-0">
        <label>Ver. @GetAppVersion()</label>
    </div>
</div>




@code {


    private ApproveModal LogOffModal = new();

    private List<string> pendingChanges = new();
    private CustomModal ShowZmenymod;

    protected override async Task OnInitializedAsync()
    {
        await initDB.TryMustHaveValues();

#if DEBUG

        if (UserService.LoggedUser == null)
        {
            await UserService.LogInUserAsync("admin", "Heslo123");
        }

#endif
        if (UserService.LoggedUser == null)
        {
            Navigator.NavigateTo("/Login");
            return;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
#if DEBUG
            pendingChanges = db.ClearPendingChangesDebug();
            StateHasChanged();
#endif
        }
    }

    private async Task ShowZmeny()
    {
        await ShowZmenymod.OpenModal(true);
    }

    public void Dispose()
    {

    }

    public async Task LogOff()
    {
        if (await LogOffModal.OpenModal(true))
        {
            AppLifecycleService.NotifyLogOff();
            UserService.LogOutUser();
            Navigator.NavigateTo("/Login");
        }
    }

    private string GetAppVersion()
    {
        var version = Microsoft.Maui.ApplicationModel.AppInfo.VersionString;
        return version != null ? version.ToString() : "Unknown";
    }



}