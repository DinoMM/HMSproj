@inject LayoutService layoutService

<Router AppAssembly="@typeof(MauiProgram).Assembly"
        AdditionalAssemblies="GetModulAssemblies().ToArray()">

    <Found Context="routeData">
        <CascadingValue Value="this">

            <RouteView RouteData="routeData" DefaultLayout="layoutService.LayoutType" />

        </CascadingValue>

    </Found>
    <NotFound>
        <span>Routing is not available</span>
    </NotFound>

</Router>


@code {

    /// <summary>
    /// Metóda vráti zoznam povolených modulov
    /// </summary>
    /// <returns></returns>
    private List<string> GetAllowedModules()
    {
        return new() {
        "SkladModul",
        "AdminModul",
        "LudskeZdrojeModul"
        };
    }

    /// <summary>
    /// Metóda vráti zoznam Assembly -> povolených častí z modulov
    /// </summary>
    /// <returns></returns>
    private System.Reflection.Assembly[] GetModulAssemblies()
    {
        var ModulNamespaces = GetAllowedModules();      // zoznam povolených modulov
        List<System.Reflection.Assembly> AssembliesFromModules = new(); //finalny zoznam

        foreach (var item in ModulNamespaces)   //prejde všetky namespacy a postupne napridáva inštancie dynamicky
        {
            var assemblies = AppDomain.CurrentDomain.GetAssemblies()
            .SelectMany(assembly => assembly.GetTypes())
            .Where(type => type.Namespace == item)
            .Select(type => type.Assembly)
            .Distinct()
            .ToArray();

            AssembliesFromModules.AddRange(assemblies);
        }
        return AssembliesFromModules.ToArray();
    }


    public class LayoutService
    {
        public Type LayoutType { get; private set; } = typeof(Layout.MainLayout);


        public event Action OnLayoutChanged = default!;

        public bool SetLayout(Type layout)
        {
            if (layout != LayoutType)
            {
                LayoutType = layout;
                OnLayoutChanged?.Invoke();
                return true;
            }
            return false;
        }

    }
}