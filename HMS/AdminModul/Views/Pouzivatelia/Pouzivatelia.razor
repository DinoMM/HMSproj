@namespace AdminModul
@page "/Pouzivatelia"
@inherits TransientHoldedComp<PouzivateliaViewModel>


<ApproveModal @ref=AprovMod ID="deletemodal"
              Text="Naozaj chcete odstrániť tento riadok?<br>POZOR môžu sa vymazať prvky, ktoré sú spojené s touto položkou!"
              FuncOnSucc="EventCallback.Empty"
              FuncOnDiss="EventCallback.Empty">
</ApproveModal>
<InfoModal @ref="InfoModHasConneciton" ID="infomodalhascon"
           Text="Nemožno vymazať osobu lebo je to aktualne prihlásená osoba alebo má role.">
</InfoModal>

<div class="container maxwidth95">

    <div class="row pb-1">


        <div class="col-3 d-flex justify-content-bottom mb-2">
            <SearchManualInput ID="srchinput" Header="Vyhľadaj užívateľa..." OnFilterRequest="(e) => ViewModel.ComplexTable?.FilterResults(e) ?? Task.CompletedTask" />
        </div>

        <div class="col-9">
            <div class="btn-group" role="group">
                <ButtonBasic type="button" class="btn btn-secondary" onclick="Close"><IconTextClose></IconTextClose></ButtonBasic>
                <ButtonBasic onclick="@(() => CascadingService.Run(() => { SetStartConditionOnVisit(); Navigator.NavigateTo(Navigator.AddNextUrl("/AddPouzivatel")); }, states: CascadingState.Loading))" type="button" class="btn btn-primary"><IconTextCreate></IconTextCreate></ButtonBasic>
                <ButtonBasic type="button" onclick="() => Open(marked)" disabled="@(marked == null)" class="btn btn-primary"><IconTextOpen></IconTextOpen></ButtonBasic>
            </div>
        </div>

        <div class="col-1"></div>
    </div>

    <div class="row">
        <div class="col-1"></div>
        <div id="@ViewModel.ComplexTable?.ID_scrollbar" class="col-12" style="max-height: 80vh; max-width: 95vw; overflow: auto; ">
            <ComplexTable @ref="ViewModel.ComplexTable"
                          ID="complextable"
                          T="IdentityUserOwn"
                          Items="ViewModel.ZoznamPoloziek"
                          LoadingItems="ViewModel.Nacitavanie"
                          Sticky="true"
                          Selectable="true"
                          ParentStateHasChanged="StateHasChanged"
                          OnRefresh="ViewModel.NacitajZoznamy"
                          CollectionChanged="ViewModel.OnCollectionChanged"
                          OnDbClick="(item) => Open(item)"
                          SetTableSettings="@((true, tableSettings, null))">
            </ComplexTable>
        </div>
        <div class="col-1"></div>
    </div>

    <div class="row">
        <div class="col-12"></div>
    </div>

</div>





@code {
    private IdentityUserOwn? marked { get => ViewModel?.ComplexTable?.Marked; }
    private ApproveModal AprovMod = new();
    private InfoModal InfoModHasConneciton = new();

    List<TableColumnTemplate<IdentityUserOwn>> tableSettings = new()
{
        new () { ID_Prop = nameof(IdentityUserOwn.Name), HeaderValue = "Meno", CellValue = (item) => item.Name },
        new () { ID_Prop = nameof(IdentityUserOwn.Surname), HeaderValue = "Priezvisko", CellValue = (item) => item.Surname },
        new () { ID_Prop = nameof(IdentityUserOwn.UserName), HeaderValue = "Username", CellValue = (item) => item.UserName ?? "" },
        new () { ID_Prop = nameof(IdentityUserOwn.Email), HeaderValue = "Email", CellValue = (item) => item.Email ?? "" },
        new () { ID_Prop = nameof(IdentityUserOwn.PhoneNumber), HeaderValue = "Telefón", CellValue = (item) => item.PhoneNumber ?? "" },

    };

    protected override void OnInitializedMustHave()
    {
        tableSettings.Insert(3, new() {
            ID_Prop = "pouzivatel",
            HeaderValue = "JePoužívateľ",
            CellComponent = (e) => new RenderFragmentTemplate(typeof(SimpleCheckMarkDiv), new RenderFragmentAttribute("Checked", !string.IsNullOrEmpty(e.UserName))),
            CellConvert = ((item) => !string.IsNullOrEmpty(item.UserName), typeof(bool)),
            Visible = true
        });

        tableSettings.Add(new() { ID_Prop = "profesia", HeaderValue = "Profesia", CellValue = (item) => ViewModel.GetRoleString(item), CellConvert = ((item) => ViewModel.GetRoleString(item), typeof(string)) });

        tableSettings.Add(new()
        {
            Placeholder = (item) => new RenderFragmentTemplate(typeof(ButtonRemove), new RenderFragmentAttribute("onclick", async () => await Delete(item)), new RenderFragmentAttribute("Disabled", !(ViewModel.MoznoVymazat(item))))
        });
    }

    protected override void OnInitializedTransient()
    {
        if (!ViewModel.ValidateUser())
        {
            Navigator.NavigateTo(Navigator.RemoveLastUrl());
            return;
        }
    }

    protected override async Task OnInitializedTransientAsync()
    {
        await ViewModel.NacitajZoznamy();
    }

    public void Close()
    {
        Navigator.NavigateTo(Navigator.RemoveLastUrl());
    }

    public async Task Open(IdentityUserOwn item)
    {
        if (item != null)
        {
            objectHolder.Add(item);
            Navigator.NavigateTo(Navigator.AddNextUrl("/UpdatePouzivatela"));
        }
    }

    public async Task Delete(IdentityUserOwn user)
    {
        if (ViewModel.MoznoVymazat(user))
        {
            if (await AprovMod.OpenModal(true))
            {
                await ViewModel.VymazatAsync(user);
                StateHasChanged();
            }
        }
        else
        {
            await InfoModHasConneciton.OpenModal();
        }
    }


}
