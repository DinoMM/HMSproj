@namespace LudskeZdrojeModul
@page "/SpravaRoli"
@inherits TransientHoldedComp<SpravaRoliViewModel>

<ApproveModal @ref=AprovMod ID="deletemodal"
              Text="Naozaj chcete odstrániť tento riadok?<br>POZOR môžu sa vymazať prvky, ktoré sú spojené s touto položkou!"
              FuncOnSucc="EventCallback.Empty"
              FuncOnDiss="EventCallback.Empty">
</ApproveModal>
<InfoModal @ref="InfoModHasConneciton" ID="infomodalhascon"
           Text="Nemožno vymazať profesiu lebo ju má niekto priradenú alebo patrí k základnym profesiam.">
</InfoModal>

<div class="container maxwidth95">

    <div class="row pb-1">

        <div class="col-3 d-flex justify-content-bottom mb-2">
            <SearchManualInput ID="srchinput" Header="Vyhľadaj profesiu..." OnFilterRequest="(e) => ViewModel.ComplexTable?.FilterResults(e) ?? Task.CompletedTask" />
        </div>

        <div class="col-9">
            <div class="btn-group" role="group">
                <button type="button" class="btn btn-secondary" @onclick="Close"> <IconTextClose></IconTextClose></button>
                <button @onclick="@(() => { SetStartConditionOnVisit(); Navigator.NavigateTo(Navigator.AddNextUrl("/AddRole")); })" type="button" class="btn btn-primary"> <IconTextCreate></IconTextCreate></button>
                <button type="button" @onclick="() => Open(marked)" disabled="@(marked == null || ViewModel.IsDefaultRole(marked) )" class="btn btn-primary"><IconTextOpen></IconTextOpen></button>
            </div>
        </div>

        <div class="col-1"></div>
    </div>

    <div class="row">
        <div class="col-1"></div>
        <div id="@ViewModel.ComplexTable?.ID_scrollbar" class="col-12" style="max-height: 80vh; max-width: 95vw; overflow: auto;">
            <ComplexTable @ref="ViewModel.ComplexTable"
                          ID="complextable"
                          T="Microsoft.AspNetCore.Identity.IdentityRole"
                          Items="ViewModel.ZoznamPoloziek"
                          LoadingItems="ViewModel.Nacitavanie"
                          Sticky="true"
                          Selectable="true"
                          ParentStateHasChanged="StateHasChanged"
                          OnRefresh="ViewModel.NacitajZoznamy"
                          CollectionChanged="ViewModel.OnCollectionChanged"
                          OnDbClick="(item) => Open(item)"
                          SetTableSettings="@((true, tableSettings, null))">
            </ComplexTable>
        </div>
        <div class="col-1"></div>
    </div>

    <div class="row">
        <div class="col-12"></div>
    </div>

</div>



@code {
    private Microsoft.AspNetCore.Identity.IdentityRole? marked { get => ViewModel?.ComplexTable?.Marked; }
    private ApproveModal AprovMod = new();
    private InfoModal InfoModHasConneciton = new();

    List<TableColumnTemplate<Microsoft.AspNetCore.Identity.IdentityRole>> tableSettings = new()
{
        new () { ID_Prop = nameof(Microsoft.AspNetCore.Identity.IdentityRole.Name), HeaderValue = "Profesia", CellValue = (item) => item.Name ?? "" },
    };

    protected override void OnInitializedMustHave()
    {
        tableSettings.Add(new()
        {
            ID_Prop = "defaultrole",
            HeaderValue = "Základná rola",
            CellComponent = (e) => new(typeof(SimpleCheckMarkDiv), new RenderFragmentAttribute("Checked", ViewModel.IsDefaultRole(e))),
            CellConvert = ((item) => ViewModel.IsDefaultRole(item), typeof(bool))
        });
        tableSettings.Add(new()
        {
            Placeholder = (item) => new RenderFragmentTemplate(typeof(ButtonRemove), new RenderFragmentAttribute("onclick", async () => await Delete(item)), new RenderFragmentAttribute("Disabled", !(ViewModel.MoznoVymazat(item))))
        });
    }

    protected override void OnInitializedTransient()
    {
        if (!ViewModel.ValidateUser())
        {
            Navigator.NavigateTo(Navigator.RemoveLastUrl());
            return;
        }
    }

    protected override async Task OnInitializedTransientAsync()
    {
        await ViewModel.NacitajZoznamy();
    }

    public void Close()
    {
        Navigator.NavigateTo(Navigator.RemoveLastUrl());
    }

    public async Task Open(Microsoft.AspNetCore.Identity.IdentityRole role)
    {
        if (!ViewModel.IsDefaultRole(role))
        {
            objectHolder.Add(role);
            Navigator.NavigateTo(Navigator.AddNextUrl("/ZmenaRole"));
        }
    }

    public async Task Delete(Microsoft.AspNetCore.Identity.IdentityRole role)
    {
        if (await AprovMod.OpenModal(true))
        {
            ViewModel.Vymazat(role);
            StateHasChanged();
        }
    }

}
