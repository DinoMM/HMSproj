@namespace RecepciaModul
@inject PridatItemDokladuViewModel ViewModel
@inherits DynamicLoadedComponent


<ItemFinderTable T="string"
                 @ref="ifttype"
                 ID="itftype"
                 ColNames="@(new(){"Typ"})"
                 ColValues="ViewModel.TypyList()"
                 SizeInRem="30"></ItemFinderTable>

@*@if (iftunicon.Rendered)
    {
        <ItemFinderTable T="object"
                         @ref="iftunicon"
                         ID="@(ID + "itfunicon")"
                         KeyAttributeToo="true"
                         ForeignAttributesToo="true"
                         CutOffTail="true"
                         ColNames="ViewModel.GetColNames()"
                         ColValues="ViewModel.ZoznamUniConItemsObjekty"
                         SizeInRem="75"
                         Header="Výber položky"
                         AfterRender="async () =>
                                      {
                                          if (await iftunicon.OpenModal(true))
                                          {
                                              ViewModel.SpracujUniCon(iftunicon.OutSelection.FirstOrDefault());
                                              switch (ViewModel.UniConItemPoklDokladuInput)
                                                {
                                                case DBLayer.Models.PolozkaSkladuConItemPoklDokladu item:
                                                    iftsklad.StartRender();
                                                    break;
                                                    default: break;
                                                }
                                          }
                                          await iftunicon.Dispose();
                                          StateHasChanged();
                                      }">

        </ItemFinderTable>
    }*@

<ComplexItemFinderTable @ref="ciftunicon"
                        T="object"
                        ID="@(ID + "itfunicon")"
                        Header="Výber položky"
                        SizeInRem="75"
                        ParentStateHasChanged="StateHasChanged"
                        YesNoButtonText="@(("Vybrať", "Zrušiť"))"
                        SetTableSettings="@((true, ViewModel.TableSettings, null))">

</ComplexItemFinderTable>

@if (iftsklad.Rendered)
{
    <ItemFinderTable T="DBLayer.Models.Sklad"
                     @ref="iftsklad"
                     ID="iftsklad"
                     ColNames="@(new() { "Skratka", "Názov" })"
                     ColValues="ViewModel.GetSklady()"
                     SizeInRem="30"
                     Header="Výber skladu"
                     KeyAttributeToo="true"
                     AfterRender="async () => {
                                    if (await iftsklad.OpenModal(true))
                                    {
                                        ViewModel.SpracujSklad(iftsklad.OutSelection.FirstOrDefault());
                                    }
                                    await iftsklad.Dispose();
                                    StateHasChanged();
                                }">
    </ItemFinderTable>
}

<EditForm Model="ViewModel.ItemPokladDokladuInput" OnValidSubmit="() => Save()">
    <DataAnnotationsValidator />

    <div class="container maxwidth95">

        <div class="row g-3 p-3">

            <div class="d-flex justify-content-between">
                <h2 class="text-center">Položka&nbsp;dokladu</h2>
            </div>
            <div class="col">

                <div class="row">
                    <div class="col col-5">
                        <label>ID</label>
                        <input type="text" value="@ViewModel.ItemPokladDokladuInput.UniConItemPoklDokladuX?.GetID()" disabled class="form-control" />
                    </div>
                    <div class="col col-1 d-flex flex-column">
                        <label>Typ</label>
                        <BtnFind OnClick="FindTyp" Disabled="ReadOnly"></BtnFind>
                    </div>
                    <div class="col col-1 d-flex flex-column">
                        <label>Položka</label>
                        <BtnFind OnClick="FindCon" Disabled="ReadOnly"></BtnFind>
                    </div>
                </div>
                <div class="row">
                    <div class="col col-5">
                        <label>Názov</label>
                        <InputText @bind-Value="@ViewModel.ItemPokladDokladuInput.Nazov" disabled="@ReadOnly" placeholder="Názov položky" class="form-control" />
                        <ValidationMessage For="@(() => ViewModel.ItemPokladDokladuInput.Nazov)" />
                    </div>
                </div>

                <div class="row">
                    <div class="col-2">
                        <label>Množstvo</label>
                        <InputNumber @bind-Value="@ViewModel.ItemPokladDokladuInput.Mnozstvo" disabled="@ReadOnly" placeholder="Množstvo" class="form-control" />
                        <ValidationMessage For="@(() => ViewModel.ItemPokladDokladuInput.Mnozstvo)" />
                    </div>
                </div>
                <div class="row">
                    <div class="col col-2">
                        <label>Cena</label>
                        <InputNumber @bind-Value="@ViewModel.ItemPokladDokladuInput.Cena" disabled="@ReadOnly" placeholder="Cena bez DPH" class="form-control" />
                        <ValidationMessage For="@(() => ViewModel.ItemPokladDokladuInput.Cena)" />
                    </div>
                    <div class="col col-2">
                        <label>Cena&nbsp;DPH</label>
                        <input value="@ViewModel.ItemPokladDokladuInput.CenaDPH.ToString("F2")" disabled class="form-control" />
                    </div>
                    <div class="col col-2">
                        <label>Celková&nbsp;suma</label>
                        <input value="@ViewModel.ItemPokladDokladuInput.CelkovaCena.ToString("F2")" disabled class="form-control" />
                    </div>
                    <div class="col col-2">
                        <label>Celková&nbsp;suma&nbsp;DPH</label>
                        <input value="@ViewModel.ItemPokladDokladuInput.CelkovaCenaDPH.ToString("F2")" disabled class="form-control" />
                    </div>
                </div>
                <div class="row">
                    <div class="col col-2">
                        <label>DPH</label>
                        <InputNumber @bind-Value="@ViewModel.ItemPokladDokladuInput.DPH" disabled="@ReadOnly" placeholder="DPH" class="form-control" />
                        <ValidationMessage For="@(() => ViewModel.ItemPokladDokladuInput.DPH)" />
                    </div>
                </div>
                <div class="row">
                    <div class="col col-5">
                        <label>Typ&nbsp;položky</label>
                        <input type="text" value="@ViewModel.UniConItemPoklDokladuInput.GetTypeUni()" disabled class="form-control" />
                    </div>

                    @if (ViewModel.UniConItemPoklDokladuInput is DBLayer.Models.PolozkaSkladuConItemPoklDokladu)
                    {
                        <div class="col col-5">
                            <label>Sklad</label>
                            <input type="text" value="@(((DBLayer.Models.PolozkaSkladuConItemPoklDokladu?)ViewModel.ItemPokladDokladuInput.UniConItemPoklDokladuX)?.PolozkaSkladuMnozstvaX?.Sklad ?? "-") " disabled class="form-control" />
                        </div>
                    }
                </div>


            </div>

        </div>

        <hr>

        <div class="row pt-2">
            <div class="col text-center">
                <div class="btn-group" role="group">
                    @if (!ReadOnly)
                    {
                        <button type="button" class="btn btn-secondary" @onclick="Close"> <IconTextClose></IconTextClose></button>
                        <SimpleButton ID="ulozbuttonpolozid" Type="submit" ZmenaStavuTextu="@(!ViewModel.Existuje())" ZmenaTextu="@(("Vytvoriť", "Uložiť"))"></SimpleButton>
                    }
                    else
                    {
                        <button type="button" class="btn btn-secondary" @onclick="Close"> <IconTextClose></IconTextClose></button>
                    }
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public string ID { get; set; } = "pridatitemdokladu";

    [EditorRequired]
    [Parameter]
    public List<DBLayer.Models.UniConItemPoklDokladu> ZoznamUniConItems { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; } = false;

    InfoModal infomodal = new();
    //ItemFinderTable<object> iftunicon = new();
    ComplexItemFinderTable<object> ciftunicon;
    ItemFinderTable<string> ifttype = new();
    private ItemFinderTable<DBLayer.Models.Sklad> iftsklad = new();

    protected override void OnInitialized()
    {
        if (!ViewModel.ValidateUser())
        {
            Navigator.NavigateTo(Navigator.RemoveLastUrl());
            return;
        }

        var founded = objectHolder.Remove<DBLayer.Models.ItemPokladDokladu>();
        if (founded != null)
        {
            ViewModel.SetItem(founded);
        }
        ViewModel.ZoznamUniConItems = ZoznamUniConItems;
    }

    protected override async Task OnInitializedAsync()
    {
        if (!ViewModel.ValidateUser())
        {
            return;
        }
    }

    public async Task Save()
    {
        objectHolder.Add(ViewModel.ItemPokladDokladuInput);
        await Dispose();
    }

    public async Task Close()  //pre readonly
    {
        await Dispose();    //bez zmien itemov
    }

    public async Task FindTyp()
    {
        if (await ifttype.OpenModal(true))
        {
            ViewModel.SpravujZmenuTypu(ifttype.OutSelection.FirstOrDefault());
        }
    }

    public async Task FindCon()
    {
        ViewModel.PripravZoznam();
        ViewModel.SetSettings();
        ciftunicon.SetItemsFromList(ViewModel.ZoznamUniConItemsObjekty);
        await ciftunicon.OpenModal(async (res) =>
        {
            if (res)
            {
                ViewModel.SpracujUniCon(ciftunicon.ComplexTable.Marked);
                switch (ViewModel.UniConItemPoklDokladuInput)
                {
                    case DBLayer.Models.PolozkaSkladuConItemPoklDokladu item:
                        iftsklad.StartRender();
                        break;
                    default: break;
                }
            }
        });
    }

}
