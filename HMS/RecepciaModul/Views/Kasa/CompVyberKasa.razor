@namespace RecepciaModul
@inherits DynamicLoadedComponent
@inject DBContext db
@inject UniComponents.Services.IAppLifeCycleService AppLifeCycleService
@using Microsoft.EntityFrameworkCore;


<ItemFinderTable @ref="iftvyberkasy"
                 T="DBLayer.Models.Kasa"
                 ID="@ID"
                 ChangeColor="true"
                 CutOffTail="true"
                 KeyAttributeToo="true"
                 ForeignAttributesToo="true"
                 ColNames="@(new() { "Názov", "Organizácia" })"
                 ColValues="Kasy"
                 SizeInRem="40"
                 ShowFindInput="ShowFindInput"
                 SelectEmptyInstance="AllowEmptyInstance"
                 Header="Výber aktuálnej pokladne">
</ItemFinderTable>

<InfoModal @ref="infomodalkasa"
           ID="@(ID + "infomodalvybkasa")"
           Text="Táto pokladňa je obsadená iným používateľom.">
</InfoModal>


@code {

    /// <summary>
    /// default vyberkasyid
    /// </summary>
    [Parameter]
    public string ID { get; set; } = "vyberkasyid";

    /// <summary>
    /// default 1
    /// </summary>
    [Parameter]
    public int ZIndex { get; set; } = 1;

    /// <summary>
    /// Povoli moznost vyčistiť kasu, default false
    /// </summary>
    [Parameter]
    public bool AllowEmptyInstance { get; set; } = false;

    /// <summary>
    /// Zobrazene kasy
    /// </summary>
    [Parameter]
    public List<DBLayer.Models.Kasa> Kasy { get; set; }

    /// <summary>
    /// Zobrazi vyhladavacie pole, default true
    /// </summary>
    [Parameter]
    public bool ShowFindInput { get; set; } = true;

    private static bool Asked = false;
    private static bool firstCheck = false;
    public static bool checkWhenAppClose = false;

    ItemFinderTable<DBLayer.Models.Kasa> iftvyberkasy = new();
    InfoModal infomodalkasa = new();

    public bool JeVybranaKasa()
    {
        return objectHolder.Find<DBLayer.Models.Kasa>() != null;
    }

    /// <summary>
    /// Vyberie kasu, nastaví uživateľa, spúšťa SaveChanges na databáze
    /// </summary>
    /// <param name="forceAsk"></param>
    /// <returns></returns>
    public async Task<bool> VyberKasu(bool forceAsk = false)
    {
        if (UserService.IsLoggedUserInRoles(DBLayer.Models.Kasa.ROLE_R_KASA))
        {
            if (CheckIfUserKasa())
            {
                return true;
            }

            if (Asked && !forceAsk)
            {
                return false;
            }

            if (await iftvyberkasy.OpenModal(true, forcesearch: false))
            {
                ClearKasa();
                if (!string.IsNullOrEmpty(iftvyberkasy.OutSelection.FirstOrDefault().ID))
                {
                    var pridKasa = iftvyberkasy.OutSelection.FirstOrDefault();
                    if (pridKasa.ActualUser == null)
                    {
                        pridKasa.ActualUser = UserService.LoggedUser.Id;
                        objectHolder.Add(pridKasa);
                        CascadingService.Nacitavanie = true;
                        db.SaveChanges();
                        CascadingService.Nacitavanie = false;

                    }
                    else
                    {
                        infomodalkasa.UpdateText($"Táto pokladňa je obsadená iným používateľom: {pridKasa.ActualUserX?.Surname}");
                        await infomodalkasa.OpenModal(true);
                        return false;
                    }
                }
                return true;
            }
        }
        if (!Asked)
        {
            Asked = true;
        }
        return false;
    }

    public DBLayer.Models.Kasa? GetKasa()
    {
        var kasa = objectHolder.Find<DBLayer.Models.Kasa>();
        if (kasa != null)
        {
            return kasa;
        }
        return null;
    }

    public async Task<DBLayer.Models.Kasa?> GetKasaWithRetry()
    {
        var kasa = objectHolder.Find<DBLayer.Models.Kasa>();
        if (kasa != null)
        {
            return kasa;
        }
        if (await VyberKasu())
        {
            return objectHolder.Find<DBLayer.Models.Kasa>();
        }
        return null;
    }

    /// <summary>
    /// Odstráni aktuálnu kasu a uloží zmeny do databázy
    /// </summary>
    public void ClearKasa()
    {
        var found = objectHolder.Remove<DBLayer.Models.Kasa>();
        if (found != null)
        {
            CascadingService.Nacitavanie = true;
            found.ActualUser = null;
            db.SaveChanges();
            CascadingService.Nacitavanie = false;
        }
    }

    /// <summary>
    /// Pozrie prvy krat ci nahodou neni priradena kasa v databaze
    /// </summary>
    /// <returns></returns>
    private bool CheckIfUserKasa()
    {
        CascadingService.Nacitavanie = true;
        try
        {
            if (!firstCheck)
            {
                firstCheck = true;
                var ckeckifexist = db.Kasy
                    .Include(x => x.DodavatelX)
                    .Include(x => x.ActualUserX)
                    .FirstOrDefault(x => x.ActualUser == UserService.LoggedUser.Id);
                if (ckeckifexist != null)
                {
                    objectHolder.Add(ckeckifexist);
                    return true;
                }
            }
            return false;
        }
        finally
        {
            CascadingService.Nacitavanie = false;
        }
    }


}
