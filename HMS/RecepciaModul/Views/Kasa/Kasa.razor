@namespace RecepciaModul
@page "/Kasa"
@inherits TransientHoldedComp<KasaViewModel>


<ApproveModal @ref=AprovMod ID="deletemodal"
              Text="Naozaj chcete odstrániť tento riadok?<br>POZOR môžu sa vymazať prvky, ktoré sú spojené s touto položkou!"
              FuncOnSucc="EventCallback.Empty"
              FuncOnDiss="EventCallback.Empty">
</ApproveModal>

@if (vyberkasamod.Rendered && ViewModel.ZoznamKas.Count != 0)
{
    <CompVyberKasa @ref="vyberkasamod"
                   ID="vyberkasa"
                   AllowEmptyInstance="true"
                   Kasy="ViewModel.ZoznamKas"
                   AfterRender="OpenKasa">

    </CompVyberKasa>
}

<CustomModal @ref="uzavretiemod" ID="uzavretiemod" OneButtonOnly="true" Header="Kontrola&nbsp;obdobia" SizeInRem="80">
    <BODY>
        @if (uzavretiemod.Render)
        {
            <KontrolaUzavretia></KontrolaUzavretia>
        }

    </BODY>

</CustomModal>

<div class="container maxwidth95">

    <div class="row pb-1">


        <div class="col-3 d-flex justify-content-bottom mb-2">
            <SearchManualInput ID="srchinput" Header="Vyhľadaj doklad..." OnFilterRequest="(e) => ViewModel.ComplexTable?.FilterResults(e) ?? Task.CompletedTask" />
        </div>

        <div class="col-9">
            <div class="btn-group" role="group">
                <ButtonBasic type="button" class="btn btn-secondary" onclick="Close"><IconTextClose></IconTextClose></ButtonBasic>
                <ButtonBasic onclick="Create" type="button" disabled="@(!ViewModel.ValidateUserCRU())" class="btn btn-primary"><IconTextCreate></IconTextCreate></ButtonBasic>
                <ButtonBasic type="button" onclick="() => Open(marked)" disabled="@(marked == null)" class="btn btn-primary"><IconTextOpen></IconTextOpen></ButtonBasic>
                <ButtonBasic type="button" onclick="ForceOpenKasa" disabled="@(!ViewModel.ValidateUserKasaR())" class="btn btn-info"><IconText Icon="">Pokladňa: @(ViewModel.AktlKasa?.ID ?? "-")</IconText></ButtonBasic>
                <ButtonBasic type="button" onclick="OpenUzavierka" class="btn btn-primary"><IconText Icon="bi-calendar3">Uzávierka</IconText></ButtonBasic>
                @if (ViewModel.ValidateUserKasaCRUD())
                {
                    <ButtonBasic type="button" onclick="CreateKasa" class="btn btn-primary"> <IconText Icon="bi-pc-display-horizontal">Správa pokladní</IconText></ButtonBasic>
                }
            </div>
        </div>

        <div class="col-1"></div>
    </div>

    <div class="row">
        <div class="col-1"></div>
        <div id="@ViewModel.ComplexTable?.ID_scrollbar" class="col-12" style="max-height: 80vh; max-width: 95vw; overflow: auto; ">
            <ComplexTable @ref="ViewModel.ComplexTable"
                          ID="complextable"
                          T="DBLayer.Models.PokladnicnyDoklad"
                          Items="ViewModel.ZoznamPoloziek"
                          LoadingItems="ViewModel.Nacitavanie"
                          Sticky="true"
                          Selectable="true"
                          ParentStateHasChanged="StateHasChanged"
                          OnRefresh="ViewModel.NacitajZoznamy"
                          CollectionChanged="ViewModel.OnCollectionChanged"
                          OnDbClick="(item) => Open(item)"
                          SetTableSettings="@((true, tableSettings, null))">
            </ComplexTable>
        </div>

    </div>
</div>


@code {

    private DBLayer.Models.PokladnicnyDoklad? marked { get => ViewModel?.ComplexTable?.Marked; }
    private ApproveModal AprovMod = new();
    private CompVyberKasa vyberkasamod = new();
    private CustomModal uzavretiemod = new();
    private KontrolaUzavretia kontrolauzavretiacomp = new();

    List<TableColumnTemplate<DBLayer.Models.PokladnicnyDoklad>> tableSettings = new()
{
        new () { ID_Prop = nameof(DBLayer.Models.PokladnicnyDoklad.ID), HeaderValue = "ID", CellValue = (item) => item.ID },
        new () { ID_Prop = nameof(DBLayer.Models.PokladnicnyDoklad.Vznik), HeaderValue = "Vznik", CellValue = (item) => item.Vznik.ToString("dd.MM.yyyy HH:mm:ss") },
        new () { ID_Prop = nameof(DBLayer.Models.PokladnicnyDoklad.Kasa), HeaderValue = "Pokladňa", CellValue = (item) => item.Kasa ?? "" },
        new () { ID_Prop = nameof(DBLayer.Models.PokladnicnyDoklad.TypPlatby), HeaderValue = "Typ platby", CellValue = (item) => item.GetTypPlatby(), CellConvert = ((item) => item.TypPlatby, typeof(bool))  },
        new () { ID_Prop = nameof(DBLayer.Models.PokladnicnyDoklad.GetMenoHostaBezPoml), HeaderValue = "Hosť", CellValue = (item) => item.GetMenoHostaBezPoml },
        new () { ID_Prop = "obciansky", HeaderValue = "Občiansky hosťa", CellValue = (item) => item.HostX?.CitizenID ?? "", CellConvert = ((item) => item.HostX?.CitizenID, typeof(string)), Visible = false },
        new () { ID_Prop = "pas", HeaderValue = "Pas hosťa", CellValue = (item) => item.HostX?.Passport ?? "", CellConvert = ((item) => item.HostX?.Passport, typeof(string)), Visible = false },
        new () { ID_Prop = "rodnecislo", HeaderValue = "Rodné č. hosťa", CellValue = (item) => item.HostX?.BirthNumber ?? "", CellConvert = ((item) => item.HostX?.BirthNumber, typeof(string)), Visible = false },
        new () { ID_Prop = nameof(DBLayer.Models.PokladnicnyDoklad.Poznamka), HeaderValue = "Poznámka", CellValue = (item) => item.Poznamka ?? "", Visible = false },
    };

    private bool forceask = false;

    protected override void OnInitializedMustHave()
    {
        tableSettings.Insert(2, new() { ID_Prop = nameof(DBLayer.Models.PokladnicnyDoklad.Spracovana), HeaderValue = "Spracovaná", CellComponent = (e) => new RenderFragmentTemplate(typeof(SimpleCheckMarkDiv), new RenderFragmentAttribute("Checked", e.Spracovana)), CellConvert = ((item) => item.Spracovana, typeof(bool)) });

        if (ViewModel.ValidateUserD())
        {
            tableSettings.Add(new()
            {
                Placeholder = (item) => new RenderFragmentTemplate(typeof(ButtonRemove), new RenderFragmentAttribute("onclick", async () => await Delete(item)), new RenderFragmentAttribute("Disabled", !(ViewModel.MoznoVymazat(item))), new RenderFragmentAttribute("TooltipMessage", "Nemožno vymazať tento doklad lebo je zaplatený."))
            });
        }

        var foundedKasa = objectHolder.Find<DBLayer.Models.Kasa>();   //pokusi sa ziskat objekt z uloziska
        if (foundedKasa == null)
        {
            //kasa nebola najdena
            return;
        }
        ViewModel.AktlKasa = foundedKasa;
    }

    protected override void OnInitializedTransient()
    {
        if (!ViewModel.ValidateUser())
        {
            Navigator.NavigateTo(Navigator.RemoveLastUrl());
            return;
        }

    }

    protected override async Task OnInitializedTransientAsync()
    {
        if (!ViewModel.ValidateUser())
        {
            return;
        }
        await ViewModel.NacitajZoznamy();
        if (ViewModel.AktlKasa == null)
        {
            vyberkasamod.StartRender();
        }
    }



    public void Close()
    {
        Navigator.NavigateTo(Navigator.RemoveLastUrl());
    }

    public async Task Open(DBLayer.Models.PokladnicnyDoklad item)
    {
        if (item != null)
        {
            if (ViewModel.ValidateUserCRU())
            {
                CascadingService.Nacitavanie = true;
                objectHolder.Add(item);
                Navigator.NavigateTo(Navigator.AddNextUrl("/PokladnicnyDoklad"));
                CascadingService.Nacitavanie = false;
            }
        }
    }

    public void Create()
    {
        if (ViewModel.ValidateUserCRU())
        {
            CascadingService.Nacitavanie = true;
            SetStartConditionOnVisit();
            Navigator.NavigateTo(Navigator.AddNextUrl("/PokladnicnyDoklad"));
            CascadingService.Nacitavanie = false;
        }
    }

    public async Task Delete(DBLayer.Models.PokladnicnyDoklad item)
    {
        if (ViewModel.MoznoVymazat(item))
        {
            if (await AprovMod.OpenModal(true))
            {
                ViewModel.Vymazat(item);
                StateHasChanged();
            }
        }
    }

    public async Task OpenKasa()
    {
        if (await vyberkasamod.VyberKasu(forceask))  //fyzicky statie programu
        {
            ViewModel.AktlKasa = vyberkasamod.GetKasa();
        }
        await vyberkasamod.Dispose();
        StateHasChanged();
    }

    public async Task ForceOpenKasa()
    {
        CascadingService.Nacitavanie = true;
        forceask = true;
        ViewModel.NacitajKasy();
        vyberkasamod.StartRender();
        CascadingService.Nacitavanie = false;
    }

    public void CreateKasa()
    {
        CascadingService.Nacitavanie = true;
        Navigator.NavigateTo(Navigator.AddNextUrl("/CRUDKasa"));
        CascadingService.Nacitavanie = false;
    }

    public async Task OpenUzavierka()
    {
        //kontrolauzavretiacomp.StartRender();
        uzavretiemod.Render = true;
        await uzavretiemod.OpenModal(true);
        uzavretiemod.Render = false;
    }

    //public override async Task Sort(string propertyName, bool sortMethod)
    //{
    //    await SortData<DBLayer.Models.PokladnicnyDoklad>(propertyName, sortMethod, ViewModel.ZoznamBlockov);
    //}

    //public override async Task Sort(string propertyName, List<string> zoznamSelect)
    //{
    //    await SortData<DBLayer.Models.PokladnicnyDoklad>(propertyName, zoznamSelect, ViewModel.ZoznamBlockov);
    //}

}
