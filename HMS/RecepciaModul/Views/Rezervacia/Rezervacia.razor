@namespace RecepciaModul
@page "/Rezervacia"
@inject RezervaciaViewModel ViewModel
@using UniComponents
@using DBLayer.Models
@using Microsoft.AspNetCore.Components.Forms
@*@inherits ASortDataPage<DBLayer.Models.Rezervation>*@
<!-- časový diagram od https://codepen.io/ph1p/pen/JBBjNy?utm_source=bypeople -->


<style>
    .gantt__row-bars {
        list-style: none;
        display: grid;
        padding: 9px 0;
        margin: 0;
        grid-template-columns: repeat(@((ViewModel.ZoznamDatumovNaZobrazenie.Count * 2).ToString()), 1fr);
        grid-gap: 2px 0;
        border-top: 1px solid rgba(221, 221, 221, 0.8);
    }
    .gantt__row--months span {
        text-align: center;
        font-size: 13px;
        align-self: center;
        font-weight: bold;
        padding: 20px 0;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

        .gantt__row--months span.highlight {
            color: @ViewModel.HEX_YELLOW;
            padding: unset;
            overflow: unset;
            text-overflow: unset;
        }
</style>

<script>
    function highlightHover(Id) {
    if (document.getElementById('header'+Id) != null) {
        document.getElementById('header'+Id).classList.add('highlight');
        document.getElementById('lineheader'+Id).classList.add('hovermarker');
        }
    }

    function removeHover(Id) {
    if (document.getElementById('header'+Id) != null) {
        document.getElementById('header'+Id).classList.remove('highlight');
        document.getElementById('lineheader'+Id).classList.remove('hovermarker');
    }
    }

    function hideRow(Id) {
            document.getElementById('rowh'+Id).classList.add('hiderow');

    }
    function showRow(Id) {
            document.getElementById('rowh'+Id).classList.remove('hiderow');

    }
</script>


<CustomModal @ref="daatePcker" ID="dtpickermodal" Header="Zmeniť rozsah obdobia">
    <BODY>
        <label for="date1">Od</label>
        <InputDate id="date1" class="form-control" @bind-Value="ViewModel.DatumOd" />
        <label for="date2">Do</label>
        <InputDate id="date2" class="form-control" @bind-Value="ViewModel.DatumDo" />
    </BODY>

</CustomModal>
<CustomModal @ref="resViewer" ID="resviewermodal" Header="Informácie o rezervácii" OneButtonOnly="true" SizeInRem="80">
    <BODY>
        @if (marked != null)
        {
            <CRUCompRezervacia @ref="rezcom" Marked="marked" ListWebGuest="ViewModel.ZoznamWebGuest" ListHostia="ViewModel.ZoznamHosti" ListIzby="ViewModel.ZoznamIziebList"></CRUCompRezervacia>
        }
    </BODY>

</CustomModal>
<CustomModal @ref="legndmodal" ID="legmodid" Header="Legenda" OneButtonOnly="true">

    <BODY>
        @if (legndmodal.Render)
        {

            <ul class="gantt__row-bars unselectableText">
                <li style="background-color: @ViewModel.HEX_PURPLE ; grid-column: 1/16;">Nepotvrdená&nbsp;rezervácia</li>
                <li style="background-color: @ViewModel.HEX_BLUE ; grid-column: 1/16;">Potvrdená&nbsp;rezervácia</li>
                <li style="background-color: @ViewModel.HEX_YELLOW ; grid-column: 1/16;">Dnešný&nbsp;príchod</li>
                <li style="background-color: @ViewModel.HEX_DARK_YELLOW ; grid-column: 1/16;">Dnešný&nbsp;odchod</li>
                <li style="background-color: @ViewModel.HEX_GREEN ; grid-column: 1/16;">Prebiehajúca&nbsp;rezervácia</li>
                <li style="background-color: @ViewModel.HEX_RED ; grid-column: 1/16;">Ukončená&nbsp;rezervácia</li>
                <li style="background-color: @ViewModel.HEX_GRAY ; grid-column: 1/16;">Blokovaná&nbsp;izba</li>
                <li style="background-color: @ViewModel.HEX_BLUE ; grid-column: 1/16;" class="stripes">Nezobrazuje&nbsp;sa&nbsp;celá&nbsp;rezervácia</li>
                <li style="background-color: @ViewModel.HEX_BLUE ; grid-column: 1/16;" class="stripesstraight">Nezobrazuje&nbsp;sa&nbsp;celá&nbsp;rezervácia</li>
                <li style="background-color: @ViewModel.HEX_BLUE ; grid-column: 1/16;" class="blackBorderli">Označená&nbsp;rezervácia</li>
            </ul>
        }
    </BODY>

</CustomModal>





<CustomModal @ref="resaslistmod" ID="resaslist" Header="Zoznam rezervácií" OneButtonOnly="true" ButtonPosition="true" SizeInRem="80">
    <BODY>


        @*@if (resaslistmod.Render)
            {*@
        <div class="row">
            <div class="col-3 mb-2">
                @*<SearchInput ID="searchvirtual" NumCols="8" TableID="resaslisttableres" PlaceHolder="Vyhľadaj rezerváciu.."></SearchInput>*@
                <SearchManualInput ID="srchinput" Header="Vyhľadaj rezerváciu..." OnFilterRequest="(e) => complexTableAllRes?.FilterResults(e) ?? Task.CompletedTask" />
            </div>
            <div class="col-3 mb-2">
                <button type="button" class="btn btn-primary" data-toggle="tooltip" data-placement="right" title="Zmeniť smer načítavania rezervácií (minulosť/budúcnosť)" @onclick="async () => { await ViewModel.ZmenSmerNacitavania(); await complexTableAllRes.OnItemsChange(new (System.Collections.Specialized.NotifyCollectionChangedAction.Reset)); }">
                    @if (ViewModel.SmerNacitavaniaAll)
                    {<i class="bi bi-arrow-right"></i>}
                    else
                    {
                        <i class="bi bi-arrow-left"></i>
                    }
                </button>
            </div>
        </div>

        <div id="@complexTableAllRes?.ID_scrollbar" class="col-12" style="max-height: 30rem;overflow: auto;">
            <ComplexTable @ref="complexTableAllRes"
                          ID="resaslisttableres"
                          T="Rezervation"
                          Items="ViewModel.ZoznamVsetkychRezervacii"
                          LoadingItems="ViewModel.NacitavaniePoloziek"
                          Sticky="true"
                          Selectable="true"
                          ParentStateHasChanged="StateHasChanged"
                          MarkersStateChanged="(e, y) => marked = e"
                          OnDbClick="@( async (item) => { resaslistmod.CloseModalExtern(true); await OpenRes(item); })"
                          SetTableSettings="@((true, tableSettingsAllRes, null))">

            </ComplexTable>
        </div>

        @*}*@

        @*<SelectModal @ref="SortSelectModal"></SelectModal>*@
    </BODY>
</CustomModal>


<ItemFinderTableProp T="DBLayer.Models.Rezervation"
                     @ref="nespracRes"
                     ID="RawResPick"
                     ColNames="@(new(){("Príchod","ArrivalDate"),("Odchod","DepartureDate"), ("Plánovaný počet","NumberGuest"), ("Cena","CelkovaSuma"), ("Status","Status"), ("Izba","RoomNumber")})"
                     ColValues="ViewModel.ZoznamNespracRezervacii"></ItemFinderTableProp>

<InfoModal @ref="modsaved" Text="Zmeny boli uložené"></InfoModal>

@if (ViewModel.NacitavaniePoloziek)
{
    <div class="d-flex justify-content-center align-items-center vh-100">
        <SpinnerLoading Size="3" />
    </div>
    @InvokeAsync(StateHasChanged);
    return;
}


<div class="gantt">
    <div class="sticky1 ms-1 autooverflowx">
        <div class="sticky1 d-flex" role="group">
            <button type="button" class="btn btn-secondary" @onclick="Close"><IconTextClose></IconTextClose></button>
            <ButtonBasic ID="addresbuttn" Class="btn btn-primary" Disabled="!ViewModel.ValidateUserC()" OnClick="Create" Tooltip="@(("bottom", "Vytvoriť novú rezerváciu"))"><IconTextCreate></IconTextCreate></ButtonBasic>
            <ButtonBasic ID="setintervaldatebuttn" Class="btn btn-info" OnClick="OpenChangeDate" Tooltip="@(("bottom", "Nastaviť rozpätie dátumov"))"><IconText Icon="bi-calendar-range">@ViewModel.ZoznamDatumovNaZobrazenie[0].ToString("dd.MM.-")@ViewModel.ZoznamDatumovNaZobrazenie.Last().ToString("dd.MM.")</IconText></ButtonBasic>
            <ButtonBasic ID="zoznespracbuttn" Class="btn btn-primary" OnClick="ListRawRes" Tooltip="@(("bottom", "Zobraziť zoznam nespracovaných rezervácií"))"><IconText Icon="bi-hourglass-split">Zoznam nespracovaných</IconText></ButtonBasic>
            <ButtonBasic ID="zoznallbuttn" Class="btn btn-primary" OnClick="ListAll" Tooltip="@(("bottom", "Zobraziť zoznam všetkých rezervácií"))"><IconText Icon="bi-calendar3">Zoznam rezervácií</IconText></ButtonBasic>
            <ButtonBasic ID="showactrualbuttn" Class="btn btn-info" OnClick="ChangeVisibilityRowActual" Tooltip="@(("bottom", "Skryť izby, ktoré nemajú dneska pohyb"))"><IconText Icon="bi-eye">@(showrecentrows ? "Všetky" : "Aktuálne")</IconText></ButtonBasic>

            <button type="button" class="btn btn-info ms-auto" @onclick="LegendModal">Legenda</button>

        </div>
    </div>

    <div class="sticky2 gantt__row gantt__row--months unselectableText" style="grid-template-columns: 150px repeat(@((ViewModel.ZoznamDatumovNaZobrazenie.Count).ToString()), 1fr);">
        <div @onclick="Update" style="cursor:pointer" class="gantt__row-first fs-4"><i class="bi bi-arrow-clockwise"></i></div>
        @for (int i = 0; i < ViewModel.ZoznamDatumovNaZobrazenie.Count; ++i)
        {
            <span id="@("header" + i)">@ViewModel.ZoznamDatumovNaZobrazenie[i].ToString("dd.MM.")</span>
        }
    </div>
    <div style="position: relative; top:45px;"></div>
    <div class="gantt__row gantt__row--lines" style="grid-template-columns: 150px repeat(@((ViewModel.ZoznamDatumovNaZobrazenie.Count).ToString()), 1fr);">
        <span></span>
        @for (int i = 0; i < ViewModel.ZoznamDatumovNaZobrazenie.Count; ++i)
        {
            int indx = i;
            @if (ViewModel.ZoznamDatumovNaZobrazenie[i] == DateTime.Today)
            {
                <span id="@("lineheader" + i)" class="marker" @onmouseover="@(async () => { await JSRuntime.InvokeVoidAsync("highlightHover", indx); })" @onmouseout="@(async () => { await JSRuntime.InvokeVoidAsync("removeHover", indx); })"></span> @*onmouseover = "highlightHover('@i')" onmouseout = "removeHover('@i')"*@
            }
            else
            {
                <span id="@("lineheader" + i)" @onmouseover="@(async () => { await JSRuntime.InvokeVoidAsync("highlightHover", indx); })" @onmouseout="@(async () => { await JSRuntime.InvokeVoidAsync("removeHover", indx); })" style="z-index:21"></span> @*onmouseover = "highlightHover('@i')" onmouseout = "removeHover('@i')"*@
            }
        }
    </div>

    @for (var i = 0; i < ViewModel.ZoznamIzieb.Count; ++i)
    {
        int indxr = i;
        var item = ViewModel.ZoznamIzieb[i];
        <div id="@("rowh" + i)" class="gantt__row">
            <div class="gantt__row-first">
                @if (RoomsToShow.Contains(item))
                {
                    <label>@(item.RoomNumber + ", " + item.RoomCategory)</label>
                    <a @onclick="@(async () => await HideRow(item))" style="cursor: pointer;">
                        <i class="bi bi-arrow-down"></i>
                    </a>
                }
                else
                {
                    <a @onclick="@(async () => await HideRow(item))" style="cursor: pointer;">
                        <i class="bi bi-arrow-up"></i>
                    </a>
                }
            </div>
            <ul class="gantt__row-bars unselectableText">
                @*onmouseover="highlightHoverR('@i')" onmouseout="removeHoverR('@i')"*@
                @if (RoomsToShow.Contains(item))
                {
                    @foreach (var ytem in ViewModel.ZoznamRezervacii.Where(x => x.RoomNumber == item.RoomNumber))
                    {
                        var res = ViewModel.GetPoziciaRes(ytem);
                        if (res.Item2 != 0)
                        {
                            <li @onclick="@(() => selected = ytem)" @ondblclick="@(async () => {await OpenRes(ytem);})" style="grid-column: @res.Item1; background-color: @(ViewModel.GetHexFarbuRes(ytem))" class="@(res.Item2 != 3 ? "stripes" : "") @(res.Item2 == 4 ? " stripesstraight" : "") clickable @(selected == ytem ? "blackBorderli" : "")">@(ViewModel.ResName(ytem))</li>
                        }
                    }
                }

            </ul>
        </div>
    }


    @*<div class="gantt__row gantt__row--empty">
            <div class="gantt__row-first">
                Ryley Huggons
            </div>
            <ul class="gantt__row-bars"></ul>
        </div>*@

    @*<div class="gantt__row">
            <div class="gantt__row-first">
                Lanie Erwin
            </div>
            <ul class="gantt__row-bars">
                <li style="grid-column: 2/5; background-color: #2ecaac;">Start Februar 🙌</li>
                <li style="grid-column: 4/6; background-color: #ff6252;" class="stripes"></li>
                <li style="grid-column: 9/11; background-color: #54c6f9;">Same line</li>
            </ul>
        </div>*@


</div>



@code {

    CustomModal daatePcker = new();
    CustomModal resViewer = new();
    List<DBLayer.Models.Room> RoomsToShow = new();
    DBLayer.Models.Rezervation? marked = null;
    DBLayer.Models.Rezervation? selected = null;

    InfoModal modsaved = new();
    CRUCompRezervacia rezcom = new();
    CustomModal legndmodal = new();
    ItemFinderTableProp<DBLayer.Models.Rezervation> nespracRes;
    CustomModal resaslistmod = new();

    bool showrecentrows = false;

    ComplexTable<DBLayer.Models.Rezervation> complexTableAllRes;

    List<TableColumnTemplate<DBLayer.Models.Rezervation>> tableSettingsAllRes = new()
{
            new () { ID_Prop = nameof(DBLayer.Models.Rezervation.ArrivalDate), HeaderValue = "Príchod", CellValue = (item) => item.ArrivalDate.ToString("dd.MM.yyyy") },
            new () { ID_Prop = nameof(DBLayer.Models.Rezervation.DepartureDate), HeaderValue = "Odchod", CellValue = (item) => item.DepartureDate.ToString("dd.MM.yyyy") },
            new () { ID_Prop = nameof(DBLayer.Models.Rezervation.NumberGuest), HeaderValue = "Plánovaný počet", CellValue = (item) => item.NumberGuest.ToString() },
            new () { ID_Prop = nameof(DBLayer.Models.Rezervation.CelkovaSuma), HeaderValue = "Cena", CellValue = (item) => item.CelkovaSuma.ToString() },
            new () { ID_Prop = nameof(DBLayer.Models.Rezervation.RoomNumber), HeaderValue = "Izba", CellValue = (item) => item.RoomNumber },
            new () { ID_Prop = "emailhostallres", HeaderValue = "Email", CellValue = (item) => item.Guest?.Email ?? "", CellConvert = ((item) => item.Guest?.Email, typeof(string)) },
            new () { ID_Prop = nameof(DBLayer.Models.Rezervation.Status), HeaderValue = "Status", CellValue = (item) => item.Status, SelectionList = Enum.GetNames(typeof(DBLayer.Models.ReservationStatus)).ToList() },
             new () { ID_Prop = "naposledyupravilallres", HeaderValue = "Naposledy upravil", CellValue = (item) => item.GetRecentChangedUserName(), CellConvert = ((item) => item.GetRecentChangedUserName(), typeof(string)) },
        };


    protected override void OnInitialized()
    {
        if (!ViewModel.ValidateUser())
        {
            Navigator.NavigateTo(Navigator.RemoveLastUrl());
            return;
        }

    }

    protected override async Task OnInitializedAsync()
    {
        if (!ViewModel.ValidateUser())
        {
            return;
        }
        await ViewModel.NacitajZoznamy();
        RoomsToShow = new(ViewModel.ZoznamIzieb.ToList());
        //ZoznamSort = ViewModel.ZoznamVsetkychRezervacii;
    }

    public void Close()
    {
        Navigator.NavigateTo(Navigator.RemoveLastUrl());

    }

    public async Task OpenChangeDate()
    {
        ViewModel.DatumOd = ViewModel.ZoznamDatumovNaZobrazenie[0];
        ViewModel.DatumDo = ViewModel.ZoznamDatumovNaZobrazenie.Last();
        if (await daatePcker.OpenModal(true))
        {
            await ViewModel.ChangeDate();
        }
    }

    private async Task HideRow(DBLayer.Models.Room room, bool? show = null)
    {
        var index = ViewModel.ZoznamIzieb.IndexOf(room);
        if (RoomsToShow.Contains(room))
        {
            if (show == null || show.Value == false)
            {
                RoomsToShow.Remove(room);
                await JSRuntime.InvokeVoidAsync("hideRow", "" + index);
            }
        }
        else
        {
            if (show == null || show.Value == true)
            {
                RoomsToShow.Add(room);
                await JSRuntime.InvokeVoidAsync("showRow", "" + index);
            }
        }

    }

    private async Task OpenRes(DBLayer.Models.Rezervation res)
    {
        //marked.setFromReservation(res.Clon());
        marked = res.Clon();
        if (rezcom.Initialized)     //prvy krat komponent nie je načítaný
        {
            rezcom.Reset();
        }
        await ViewModel.NacitajPotrebneZoznamy();
        await resViewer.OpenModal(true);
        ViewModel.ClearChangesDB();
        await ViewModel.SpracujZmeny();
        marked = null;
    }

    private async Task Update()
    {
        await ViewModel.NacitajZoznamy();
        RoomsToShow = new(ViewModel.ZoznamIzieb.ToList());
        ViewModel.ZoznamHosti.Clear();
        ViewModel.ZoznamWebGuest.Clear();
        ViewModel.ZoznamNespracRezervacii.Clear();
        ViewModel.ZoznamVsetkychRezervacii.Clear();
    }

    private async Task Create()
    {
        if (ViewModel.ValidateUserC())
        {
            await OpenRes(new DBLayer.Models.Rezervation());
        }
    }

    private async Task LegendModal()
    {
        legndmodal.Render = true;
        await legndmodal.OpenModal(true);
        legndmodal.Render = false;
    }

    private async Task ListRawRes()
    {
        CascadingService.Disabled = true;
        await ViewModel.NacitajNespracovaneRezervacie(refresh: false);
        CascadingService.Disabled = false;
        while (true)
        {
            if (await nespracRes.OpenModal(true))
            {
                await OpenRes(nespracRes.OutSelection.FirstOrDefault());
                await ViewModel.NacitajNespracovaneRezervacie(false);
            }
            else
            {
                break;
            }
        }
        ViewModel.ClearChangesDB();
        await ViewModel.SpracujZmeny();
    }

    private async Task ListAll()
    {
        //resaslistmod.Render = true;
        CascadingService.Disabled = true;
        await ViewModel.NacitajZoznamRezervacieAll();
        await complexTableAllRes.OnItemsChange(new(System.Collections.Specialized.NotifyCollectionChangedAction.Reset));
        CascadingService.Disabled = false;
        if (!await resaslistmod.OpenModal(true))
        {
            ViewModel.ClearChangesDB();
            await ViewModel.SpracujZmeny();
        }
        //resaslistmod.Render = false;
    }

    private async Task ChangeVisibilityRowActual()
    {
        showrecentrows = !showrecentrows;
        if (showrecentrows)
        {
            foreach (var item in ViewModel.ZoznamIzieb)
            {
                if (ViewModel.ZoznamRezervacii.Any(x => x.RoomNumber == item.RoomNumber && (x.ArrivalDate.Date == DateTime.Today || x.DepartureDate.Date == DateTime.Today)))
                {
                    await HideRow(item, true);
                }
                else
                {
                    await HideRow(item, false);
                }
            }
        }
        else
        {
            foreach (var item in ViewModel.ZoznamIzieb)
            {
                await HideRow(item, true);
            }
        }
        StateHasChanged();
    }
}
