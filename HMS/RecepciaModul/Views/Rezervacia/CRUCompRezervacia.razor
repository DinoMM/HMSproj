@namespace RecepciaModul
@using Microsoft.EntityFrameworkCore
@using PdfCreator.Models
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject DataContext dbw
@inject DBContext db

<ItemFinderTable T="DBLayer.Models.Room" @ref="iftroom" ID="itemfindroom"
                 ColNames="@(new() {"Číslo izby", "Kategória", "Kapacita", "Cena za noc" })"
                 SearchedValue="@("")"
                 KeyAttributeToo="true"
                 ColValues="ListIzby"
                 ChangeColor="true">

</ItemFinderTable>
@*<ItemFinderTable T="IdentityUserWebOwn" @ref="iftwebguest" ID="fndwebusrrez"
                     ColNames="@(new() {"Meno", "Priezvisko", "Username", "Email", "Telefón" })"
                     OnlyProtectedPersonalDataAttribute="true"
                     SelectEmptyInstance="true"
                     ColValues="ListWebGuest"
                     ChangeColor="true">
    </ItemFinderTable>*@
<ComplexItemFinderTable @ref="ciftguest"
                        T="IdentityUserWebOwn"
                        ID="fndwebusrrez"
                        Header="Výber web účtu"
                        SizeInRem="70"
                        ParentStateHasChanged="StateHasChanged"
                        SelectEmptyInstance="true"
                        ChangeColor="true"
                        YesNoButtonText="@(("Vybrať", "Zrušiť"))"
                        SetTableSettings="@((true, guesttableSettings, null))">

</ComplexItemFinderTable>


<FastFormModal @ref="couponmodal"
               ID="coupmodalid"
               FuncOnSucc="EventCallback.Empty"
               Header="Vložte kód poukážky"
               Inputs="@(new() { ("Kód", "string") } )"
               ChangeColor="true">
</FastFormModal>

<CustomModal @ref="cuscreatehost" ID="cuscreatehostmod" Header="Vytvorenie hosťa" OneButtonOnly="true" ChangeColor="true" SizeInRem="90" ZIndex="55">
    <BODY>
        @if (cuscreatehost.Render)
        {
            <CRUHost AsComponent="true"></CRUHost>
        }

    </BODY>

</CustomModal>

<CustomModal @ref="cusopendoklad" ID="cusopenkasamod" Header="Pokladničný blok" OneButtonOnly="true" ChangeColor="true" SizeInRem="90" ZIndex="55">
    <BODY>
        @if (cusopendoklad.Render)
        {
            <PokladnicnyDoklad AsComponent="true" OnlyOneItem="OnlyOneItemPD"></PokladnicnyDoklad>
        }
    </BODY>

</CustomModal>



@if (compVybkasa.Rendered)
{
    <CompVyberKasa @ref="compVybkasa"
                   ID="vybkasamod1"
                   AfterRender="OpenPickKasa"
                   AfterDispose="OpenPD"
                   ShowFindInput="false"
                   Kasy="ZoznamKas"></CompVyberKasa>
}


<CustomModal @ref="cusmodHostcon" ID="cusmodshowhost" Header="Hostia rezervácie" OneButtonOnly="true" ChangeColor="true" SizeInRem="75" ZIndex="50">
    <BODY>
        @*<ItemFinderTable T="DBLayer.Models.Host" @ref="ifthost" ID="dnfhost"
                             ColNames="@(new() {"Meno", "Priezvisko", "Adresa", "Rod. č.", "Č. pasu", "Č. občan.", "Pohlavie", "Národnosť" })"
                             SearchedValue=""
                             ColValues="ListHostia"
                             CutOffTail="true">
            </ItemFinderTable>*@

        <ComplexItemFinderTable @ref="cifthost"
                                T="DBLayer.Models.Host"
                                ID="dnfhost"
                                Header="Výber hosťa"
                                SizeInRem="70"
                                ParentStateHasChanged="StateHasChanged"
                                YesNoButtonText="@(("Vybrať", "Zrušiť"))"
                                SetTableSettings="@((true, hosttableSettings, null))">

        </ComplexItemFinderTable>

        <div class="col-12" style="max-height: 30rem;overflow: auto;">
            <SimpleTable ID="tablehostid">
                <THEAD>

                <th><ButtonBasic ID="addnewhostbttn" Disabled="@(ValidateChangeability())" Class="btn btn-success" OnClick="@AddHostCon" Tooltip="@(("right","Pridať z existujúcich hostí"))"><IconText Icon="bi-plus-lg"></IconText> </ButtonBasic> </th>
                <ThSort>Meno</ThSort>
                <ThSort>Priezvisko</ThSort>
                <ThSort>Adresa</ThSort>
                <ThSort>Č. občianského</ThSort>
                <ThSort>Č. pasu</ThSort>
                <ThSort>Pohlavie</ThSort>
                <ThSort>Národnosť</ThSort>
                <ThSort>Email</ThSort>
                <th></th>
                <th></th>

                </THEAD>
                <TBODY>

                    @foreach (var item in VyberHosti)
                    {
                        <tr @ondblclick="() => OpenHostFrom(item.HostX)">
                            <td class="col-resize">
                                @if (item.HostX.PokladnicnyDokladZ == null)
                                {
                                    <ButtonBasic ID="@($"hostpoklbttnchck{item.Host}")"  Disabled="!IsHostPDPossible()"
                                             OnClick="() => OtvorPD(item.HostX)"  Class="btn btn-secondary" Tooltip="@(("right","Otvoriť prázdny účet"))"> <IconText Icon="bi-receipt" ></IconText>
                                    </ButtonBasic>

                                }
                                else
                                {
                            <ButtonBasic ID="@($"hostpoklbttnchck{item.Host}")" Disabled="!IsHostPDPossible()"
                                         OnClick="() => OtvorPD(item.HostX)"
                                         Class="btn btn-warning" Tooltip="@(("right","Otvoriť nevyplatený účet"))">
                                <IconText Icon="bi-receipt"></IconText>
                            </ButtonBasic>
                                }
                            </td>
                            <td class="col-resize">@item.HostX.Name</td>
                            <td class="col-resize">@item.HostX.Surname</td>
                            <td class="col-resize">@item.HostX.Address</td>
                            <td class="col-resize">@item.HostX.CitizenID</td>
                            <td class="col-resize">@item.HostX.Passport</td>
                            <td class="col-resize">@(item.HostX.Sex ? "Žena" : "Muž")</td>
                            <td class="col-resize">@item.HostX.Nationality</td>
                            <td class="col-resize">@(item.HostX.GuestZ?.Email ?? "")</td>
                            <td>
                                <ButtonRemove Disabled="@(ValidateChangeability())" OnClick="@(() => DeleteHostCon(item))"></ButtonRemove>
                            </td>
                            <td>
                                <button type="button" disabled="@PDFLoading" class="btn btn-info" @onclick="() => CreatePdf(item)">
                                    <i class="bi bi-filetype-pdf"></i>
                                    @if (PDFLoading)
                                    {
                                        <SpinnerLoading ExtraSmall="true"></SpinnerLoading>
                                    }
                                </button>
                            </td>

                        </tr>
                    }

                    <span id="observerTarget"></span>
                </TBODY>

            </SimpleTable>
        </div>
    </BODY>

</CustomModal>
<div style="z-index:51">
    <CustomDynamicModal @ref="modsaved" ID="modsaved" OneButtonOnly="true" ChangeColor="true">Zmeny boli uložené</CustomDynamicModal>

    <ApproveModal @ref="infomod" Text=""
                  FuncOnDiss="EventCallback.Empty"
                  FuncOnSucc="EventCallback.Empty"
                  ChangeColor="true">
    </ApproveModal>

</div>
@*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*@

<EditForm Model="Marked" OnValidSubmit="() => Save()">
    <DataAnnotationsValidator />

    <div class="container px-2">

        <div class="row g-3 p-3 nooverflowx">
            <div class="col-md-6 col-12">
                <div class="row">
                    @*<Tooltip ID="tooltip1" Position="right" Text="@($"Počet nocí: {(Marked.DepartureDate - Marked.ArrivalDate).Days}")">*@
                    <div class="col-md-4 col-6">
                        <FloatingInputDate ID="dateinputres1" disabled="@ValidateChangeability()" Header="Príchod" Value="@Marked.ArrivalDate" ValueChanged="@((x) => Marked.ArrivalDate = x.Value)" CanBeNull="false" />
                        <ValidationMessage For="@(() => Marked.ArrivalDate)" />
                    </div>
                    <div class="col-md-4 col-6">
                        <FloatingInputDate ID="dateinputres2" disabled="@ValidateChangeability()" Header="Odchod" Value="@Marked.DepartureDate" ValueChanged="@((x) => Marked.DepartureDate = x.Value)" CanBeNull="false" />
                        <ValidationMessage For="@(() => Marked.DepartureDate)" />
                    </div>
                    <div class="col-md-4 col-12">
                        <FloatingInput Header="Počet nocí" Disabled="true" Value="(Marked.DepartureDate - Marked.ArrivalDate).Days"></FloatingInput>

                    </div>

                </div>
                <div class="row">
                    <div class="col-md-4 col-11">
                        <FloatingInput T="string" ID="inputroom" Header="Izba*" Value="@Marked.RoomNumber" ValueChanged="(e => Marked.RoomNumber = e)" OnKeyDown="@((e) => HandleKeyDown(e, "inputroom"))" Disabled="@ValidateChangeability()" />
                        <ValidationMessage For="@(() => @Marked.RoomNumber)" />
                    </div>
                    <div class="col-1 d-flex align-items-center">
                        <ButtonBasic ID="izbfndbttn" disabled="@(ValidateChangeability())" OnClick="FindRoom" class="btn btn-secondary" Tooltip="@(("bottom", "Nájsť dostupnú izbu"))">
                            <i class="bi bi-box-arrow-in-down "></i>
                        </ButtonBasic>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 col-9">
                        <FloatingInput T="decimal" Step="1.0" Type="number" ID="numguestinput" Value="@Marked.NumberGuest" ValueChanged="e => Marked.NumberGuest = ((int)e < 0 ? 0 : (int)e)" Disabled="@(ValidateChangeability() || Marked.Room == null)" Header="Plánovaní hostia" />
                        <ValidationMessage For="@(() => Marked.NumberGuest)" />
                    </div>
                    <div class="col-1 d-flex align-items-center me-2">
                        <ButtonBasic id="numguestshow" disabled="@(Marked.Room == null || Marked.Id == 0)" Tooltip="@(("bottom", "Pridaní hostia"))" OnClick="OpenHostTab" class="@($"btn {(MaNezaplatenePD() ? "btn-warning" : "btn-secondary")}")">
                            <i class="bi bi-people-fill"></i>
                        </ButtonBasic>
                    </div>
                    <div class="col-1 d-flex align-items-center">
                        <ButtonBasic disabled="@(ValidateChangeability() || Marked.Room == null || Marked.Id == 0)" OnClick="CreateHostTab" class="btn btn-secondary" Tooltip="@(("bottom", "Vytvoriť a pridať hosťa"))">
                            <i class="bi bi-person-fill-add"></i>
                        </ButtonBasic>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-5 col-12">
                        <label>Status</label>
                        <select id="selectstav" @bind="Marked.Status" disabled="@(ValidateChangeability() || Marked.Room == null || CascadingService.Disabled)" class="form-select @(IsCompleted() || IsStorno() ? " border border-warning " : "")">
                            @foreach (var status in SelectValues)
                            {
                                <option value="@status">@status</option>
                            }
                        </select>
                        <ValidationMessage For="@(() => Marked.Status)" />
                    </div>
                </div>

            </div>

            <div class="col-md-6 col-12">
                <div class="row">
                    <div class="col-12">
                        <hr class="d-md-none" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 col-12">
                        <FloatingInput T="decimal" Type="number" Step="0.01" disabled="@(ValidateChangeability() || Marked.Room == null)" Value="@Marked.CelkovaSuma" ValueChanged="@(e => @Marked.CelkovaSuma = e < 0 ? 0 : e)" Header="Celková suma" CanBeNull="false" />
                        <ValidationMessage For="@(() => Marked.CelkovaSuma)" />
                    </div>
                    <div class="col-md-3 col-12">
                        <FloatingInput type="text" disabled="true" value="@Marked.CelkovaSumaDPH.ToString("F2", System.Globalization.CultureInfo.InvariantCulture)" Header="Cel. suma DPH" />
                    </div>
                    <div class="col-md-2 col-4">
                        <FloatingInput T="decimal" Type="number" Step="0.01" id="dphpopinp" disabled="@(ValidateChangeability() || Marked.Room == null)" Value="@Marked.DPH" ValueChanged="@(e => @Marked.DPH = e < 0 ? 0 : e)" Header="DPH" CanBeNull="false" />
                        <ValidationMessage For="@(() => Marked.DPH)" />
                    </div>
                    <div class="col-md-2 col-4">
                        <FloatingInput T="decimal" Type="number" Step="0.01" id="ubytpopinp" disabled="@(ValidateChangeability() || Marked.Room == null)" Value="@((decimal)Marked.UbytovaciPoplatok)" ValueChanged="@(e => @Marked.UbytovaciPoplatok = (double)e < 0 ? 0 : (double)e)" Header="Ubyt. poplatok" CanBeNull="false" />
                        <ValidationMessage For="@(() => Marked.UbytovaciPoplatok)" />
                    </div>
                    <div class="col-1 d-flex align-items-center">
                        <ButtonBasic id="ubytpopinp2" disabled="@(ValidateChangeability() || Marked.Room == null)" OnClick="CalculateSum" class="btn btn-secondary" Tooltip="@(("bottom", "Vypočíta 'Celkovú sumu': ((cena za izbu * (100 - zľava)) / 100) + (ubytovací poplatok * počet navolených hostí)"))">
                            <i class="bi bi-calculator"></i>
                        </ButtonBasic>
                    </div>

                </div>
                <div class="row">
                    <div class="col-12">
                        <hr class="d-md-none" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-6">
                        <FloatingInput T="string" id="coupinputid" type="text" Disabled="true" value="@(Marked.Coupon?.NameService ?? "-")" Header="Poukážka" />
                        <div id="coupinputid2"></div>
                        <div id="coupinputid3"></div>
                    </div>
                    <div class="col-2">
                        <FloatingInput T="decimal" disabled="true" value="@(Marked.Coupon?.Discount ?? 0)" Header="Zľava" />
                    </div>
                    <div class="col-1 d-flex align-items-center me-2">
                        <ButtonBasic ID="vlkod" disabled="@(ValidateChangeability() || Marked.Room == null)" OnClick="FindCouponF" class="btn btn-secondary" Tooltip="@(("bottom", "Vložiť kód kupóna"))">
                            <i class="bi bi-box-arrow-in-down "></i>
                        </ButtonBasic>
                    </div>
                    <div class="col-1 d-flex align-items-center">
                        <ButtonBasic ID="infkod" disabled="@(ValidateChangeability() || Marked.Coupon == null)" OnClick="OpenInfoCoupon" class="btn btn-secondary" Tooltip="@(("bottom", "Zobraziť informácie o kupóne"))">
                            <i class="bi bi-info"></i>
                        </ButtonBasic>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6 col-10">
                        <FloatingInput disabled="true" value="@(Marked.Guest?.Email ?? "-")" Header="Web používateľ" />
                    </div>
                    <div class="col-2 d-flex align-items-center">
                        <ButtonBasic ID="webbtn" disabled="@(ValidateChangeability() || Marked.Room == null)" OnClick="FindGuest" class="btn btn-secondary" Tooltip="@(("bottom", "Priradiť webový účet k tejto rezervácií"))">
                            <i class="bi bi-box-arrow-in-down "></i>
                        </ButtonBasic>
                    </div>
                </div>

                <hr>

                <div class="row">
                    <div class="col-md-6 col-12">
                        <FloatingInput disabled="true" value="@Marked.GetRecentChangedUserName()" Header="Naposledy upravil" />
                    </div>
                </div>
                <div class="row">

                </div>

            </div>



        </div>

        <hr>

        <div class="row pt-2">
            <div class="col-12 text-center">
                <div class="btn-group" role="group">
                    <ButtonBasic ID="submitbttn" Disabled="ValidateChangeability()" Type="submit" Nacitavanie="nacitavanie"> <ZmenaTextuIcon ZmenaStavuTextu="Exist()" ZmenaTextu="@(("Uložiť", "Vytvoriť"))"></ZmenaTextuIcon> </ButtonBasic>
                    @if (Marked.ArrivalDate == DateTime.Today && IsZaplatena())
                    {
                        <ButtonBasic ID="checkinbttn" OnClick="ProcessCheckIN" Disabled="Marked.Id == 0" Class="btn btn-success" Tooltip="@(("top", "Spracovať CHECK-IN"))">CHECK-IN</ButtonBasic>
                    }
                    else if (Marked.DepartureDate == DateTime.Today && Marked.Status == DBLayer.Models.ReservationStatus.Checked_IN.ToString())
                    {
                        <ButtonBasic ID="checkoutbttn" OnClick="ProcessCheckOUT" Disabled="Marked.Id == 0 || MaNezaplatenePD()" Class="btn btn-danger" Tooltip="@(("top", "Spracovať CHECK-OUT"))">CHECK-OUT</ButtonBasic>
                    }
                    @if (IsSpracovana())
                    {
                        <ButtonBasic ID="kasabttn" OnClick="OpenDoklad" Class="btn btn-primary" Tooltip="@(("top", "Prejsť k zaplateniu tejto rezervácie"))">KASA</ButtonBasic>
                    }
                </div>
            </div>
        </div>
    </div>
</EditForm>



@code {
    [EditorRequired]
    [Parameter]
    public DBLayer.Models.Rezervation Marked { get; set; }
    [EditorRequired]
    [Parameter]
    public List<DBLayer.Models.Host> ListHostia { get; set; }
    [EditorRequired]
    [Parameter]
    public List<DBLayer.Models.Room> ListIzby { get; set; }
    [EditorRequired]
    [Parameter]
    public List<IdentityUserWebOwn> ListWebGuest { get; set; }

    CustomDynamicModal modsaved;
    ApproveModal infomod = new();
    ItemFinderTable<DBLayer.Models.Room> iftroom = new();
    FastFormModal couponmodal = new();
    //private ItemFinderTable<IdentityUserWebOwn> iftwebguest = new();
    CustomModal cusmodHostcon = new();
    //ItemFinderTable<DBLayer.Models.Host> ifthost = new();
    ComplexItemFinderTable<DBLayer.Models.Host> cifthost;
    ComplexItemFinderTable<IdentityUserWebOwn> ciftguest;

    private bool nacitavanie = false;


    CustomModal cuscreatehost = new();
    CustomModal cusopendoklad = new();
    CompVyberKasa compVybkasa = new();

    public bool Initialized { get; private set; } = false;

    public bool PDFLoading = false;

    private bool Warned = false;
    private Array SelectValues = Enum.GetValues(typeof(DBLayer.Models.ReservationStatus));
    private List<DBLayer.Models.HostConReservation> VyberHosti = new();
    private List<DBLayer.Models.Kasa> ZoznamKas = new();
    private bool OnlyOneItemPD = true;  // v pokladnicnom bloku moze byt but len jeden alebo viacej poloziek
    private DBLayer.Models.Host? MarkedHost = null;

    List<TableColumnTemplate<DBLayer.Models.Host>> hosttableSettings = new()
{
        new () { ID_Prop = nameof(DBLayer.Models.Host.Name), HeaderValue = "Meno", CellValue = (item) => item.Name },
new () { ID_Prop = nameof(DBLayer.Models.Host.Surname), HeaderValue = "Priezvisko", CellValue = (item) => item.Surname },
new () { ID_Prop = nameof(DBLayer.Models.Host.Nationality), HeaderValue = "Národnosť", CellValue = (item) => item.Nationality },
new () { ID_Prop = nameof(DBLayer.Models.Host.Sex), HeaderValue = "Pohlavie", CellValue = (item) => item.GetPohlavie(), CellConvert = ((item) => item.Sex, typeof(bool)) },
new () { ID_Prop = nameof(DBLayer.Models.Host.CitizenID), HeaderValue = "Občan.č.", CellValue = (item) => item.CitizenID },
new () { ID_Prop = nameof(DBLayer.Models.Host.Passport), HeaderValue = "Pas", CellValue = (item) => item.Passport },
new () { ID_Prop = nameof(DBLayer.Models.Host.Address), HeaderValue = "Adresa", CellValue = (item) => item.Address, Visible = false },
new () { ID_Prop = nameof(DBLayer.Models.Host.BirthNumber), HeaderValue = "Rodné č.", CellValue = (item) => item.BirthNumber, Visible = false },
new () { ID_Prop = nameof(DBLayer.Models.Host.BirthDate), HeaderValue = "Narodenie", CellValue = (item) => item.BirthDate.ToString("dd.MM.yyyy"), Visible = false },
new () { ID_Prop = "email", HeaderValue = "Email", CellValue = (item) => item.GuestZ?.Email ?? "", CellConvert = ((item) => item.GuestZ?.Email, typeof(string))  },
new () { ID_Prop = "phonenumber", HeaderValue = "Telefón", CellValue = (item) => item.GuestZ?.PhoneNumber ?? "", CellConvert = ((item) => item.GuestZ?.PhoneNumber, typeof(string)), Visible = false },
new () { ID_Prop = nameof(DBLayer.Models.Host.Note), HeaderValue = "Poznámka", CellValue = (item) => item.Note, Visible = false },

    };

    List<TableColumnTemplate<IdentityUserWebOwn>> guesttableSettings = new()
{
         new () { ID_Prop = nameof(IdentityUserWebOwn.Name), HeaderValue = "Meno", CellValue = (item) => item.Name },
         new () { ID_Prop = nameof(IdentityUserWebOwn.Surname), HeaderValue = "Priezvisko", CellValue = (item) => item.Surname },
         new () { ID_Prop = nameof(IdentityUserWebOwn.UserName), HeaderValue = "Username", CellValue = (item) => item.UserName ?? "" },
         new () { ID_Prop = nameof(IdentityUserWebOwn.Email), HeaderValue = "Email", CellValue = (item) => item.Email ?? "" },
         new () { ID_Prop = nameof(IdentityUserWebOwn.PhoneNumber), HeaderValue = "Telefón", CellValue = (item) => item.PhoneNumber ?? "" },
    };


    protected override void OnInitialized()
    {
        Reset();
        Initialized = true;
    }

    private async Task Save(bool silent = false)
    {
        CascadingService.Disabled = true;
        nacitavanie = true;
        try
        {
            #region kontrola zvolenia storno
            if (Marked.Status == DBLayer.Models.ReservationStatus.Stornovana.ToString())
            {
                infomod.UpdateText("Chcete túto rezerváciu stornovať?" + (UserService.IsLoggedUserInRoles(DBLayer.Models.Rezervation.ROLE_CRUD_REZERVACIA) ? "" : "Ďalšia úprava nie je pre Vás možná."));
                if (!await infomod.OpenModal(true))
                {
                    return;
                }
                Warned = true;
            }
            #endregion
            #region kontrola zvolenia blokovana
            if (Marked.Status == DBLayer.Models.ReservationStatus.Blokovana.ToString())
            {
                var found = dbw.Rezervations.Include(x => x.Coupon).Include(x => x.Guest).Include(x => x.Room).FirstOrDefault(x => x.Id == Marked.Id);
                if (found == null)
                {
                    infomod.UpdateText("Najskor uložte rezervaciu bez blokácie a potom ju nastavte na blokovanú.");
                    await infomod.OpenModal(true);
                    return;
                }
                if (dbw.Rezervations.Any(x =>
                    x.ArrivalDate <= Marked.DepartureDate && x.DepartureDate >= Marked.ArrivalDate
                    && Marked.RoomNumber == x.RoomNumber
                    && x.Id != Marked.Id
                    && x.Status != DBLayer.Models.ReservationStatus.Stornovana.ToString()
                    ))
                {
                    await JSRuntime.InvokeVoidAsync("addWarningPopOverUntilClick", "dateinputres1", "Nová blokácia prekrýva časť druhej rezervácie. Blokovanie zoberie vždy celý deň.", "bottom");
                    await JSRuntime.InvokeVoidAsync("addStyleClassUntilClick", "dateinputres2", "border-warning");
                    infomod.UpdateText("NEULOŽENÉ: Nová blokácia prekrýva časť druhej rezervácie. Blokovanie zoberie vždy celý deň.");
                    await infomod.OpenModal(true);
                    return;
                }

                var conss = db.HostConReservations.Include(x => x.HostX).Where(x => x.Reservation == Marked.Id).ToList();
                foreach (var item in conss)
                {
                    db.Remove(item);
                }
                VyberHosti.Clear();
                if (Marked.Coupon != null)
                {
                    Marked.Coupon.IsUsed = false;
                    Marked.CouponId = null;
                    Marked.Coupon = null;
                }
                found.setFromReservation(Marked);
                found.RecentChangesUser = UserService.LoggedUser.Id;
                dbw.SaveChanges();
                db.SaveChanges();
                infomod.UpdateText("Aktualizacia izby na blokovanu. ");
                await sessionStorage.SetItemAsync("RezervationChanged", true);
                await infomod.OpenModal(true);
                return;
            }
            #endregion
            #region kontrola upozonení
            if (!silent && await OtherValidations())
            {
                if (!Warned)
                {
                    Warned = true;
                    return;
                }
                Warned = false;
            }
            #endregion
            #region update kupona
            if (Marked.Coupon != null)
            {
                Marked.Coupon.IsUsed = true;
            }
            #endregion
            #region update rezervacie
            if (!Exist())
            {
                dbw.Add(Marked);
                Marked.RecentChangesUser = UserService.LoggedUser.Id;
            }
            else
            {
                var found = dbw.Rezervations.Include(x => x.Coupon).Include(x => x.Guest).Include(x => x.Room).FirstOrDefault(x => x.Id == Marked.Id);
                if (found == null)
                {
                    return;
                }

                if (!string.IsNullOrEmpty(found.CouponId) && found.CouponId != Marked.CouponId)
                {
                    found.Coupon.IsUsed = false;
                }

                if (found.Status == DBLayer.Models.ReservationStatus.Stornovana.ToString() && Marked.Status != DBLayer.Models.ReservationStatus.Stornovana.ToString())  //pre stornovane rezervacie spravime kontrolu, ci su validne, ak nie tak nic sa neulozi
                {
                    var context = new System.ComponentModel.DataAnnotations.ValidationContext(Marked, serviceProvider: null, items: null);
                    var results = new List<System.ComponentModel.DataAnnotations.ValidationResult>();
                    if (!System.ComponentModel.DataAnnotations.Validator.TryValidateObject(Marked, context, results, validateAllProperties: true))
                    {
                        infomod.UpdateText("Nemožno zmeniť stav stornovanej rezervácie na iný stav lebo kontrola ukazuje konflikty. Vytvorte novú rezerváciu");
                        await infomod.OpenModal(true);
                        db.ClearPendingChanges();
                        dbw.ClearPendingChanges();
                        return;
                    }
                }


                found.setFromReservation(Marked);       //update
                found.RecentChangesUser = UserService.LoggedUser.Id;
            }
            #endregion
            #region update prepojeni
            var vyberlistCopy = new List<DBLayer.Models.HostConReservation>(VyberHosti);
            var cons = db.HostConReservations.Include(x => x.HostX).Where(x => x.Reservation == Marked.Id).ToList();
            foreach (var item in cons)
            {
                var found = vyberlistCopy.FirstOrDefault(x => x.Host == item.Host && x.Reservation == Marked.Id);
                if (found == null)
                {
                    db.HostConReservations.Remove(item);
                }
                else
                {
                    vyberlistCopy.Remove(found);
                }
            }
            foreach (var item in vyberlistCopy)
            {
                db.HostConReservations.Add(item);
            }
            #endregion

            await dbw.SaveChangesAsync();
            await db.SaveChangesAsync();

            await sessionStorage.SetItemAsync("RezervationChanged", true);
            if (!silent)
            {
                await modsaved.OpenModal();
            }
            Warned = false;
        }
        finally
        {
            nacitavanie = false;
            CascadingService.Disabled = false;
        }
    }

    private async Task<bool> OtherValidations()
    {
        if (Marked.Id == 0)
        {
            return false;
        }

        var warnfound = false;
        var found = dbw.HRooms.FirstOrDefault(x => x.RoomNumber == Marked.RoomNumber);
        if (Marked.NumberGuest > found.MaxNumberOfGuest)
        {
            await JSRuntime.InvokeVoidAsync("showPopover", "numguestinput", $"Počet hostí je väčší ako kapacita izby: {found.MaxNumberOfGuest}", "bottom");
            await JSRuntime.InvokeVoidAsync("switchStyleClass", "numguestinput", "border-warning");
            await JSRuntime.InvokeVoidAsync("switchStyleClass", "submitbttn", "btn-warning");
            warnfound = true;
        }

        if (Marked.NumberGuest != VyberHosti.Count)
        {
            await JSRuntime.InvokeVoidAsync("showPopover", "numguestshow", $"Počet hostí sa nezhoduje s počtom navolených osôb: {VyberHosti.Count}", "right");
            await JSRuntime.InvokeVoidAsync("switchStyleClass", "numguestshow", "border-warning");
            if (!warnfound)
            {
                await JSRuntime.InvokeVoidAsync("switchStyleClass", "submitbttn", "btn-warning");
            }
            warnfound = true;
        }

        if (IsCompleted())
        {
            await JSRuntime.InvokeVoidAsync("showPopover", "selectstav", "Ručné zadávanie sa nedoporučuje. Skontrolujte pravdivosť hodnôt", "right");
            warnfound = true;
        }


        return warnfound;
    }


    public async Task FindCouponF()
    {
        if (await couponmodal.OpenModal(true))
        {
            string kupon = (string)(couponmodal.Outputs[0]);
            if (string.IsNullOrEmpty(kupon))
            {
                return;
            }

            if (kupon == Marked.CouponId)
            {
                await JSRuntime.InvokeVoidAsync("showPopover", "coupinputid2", $"Vložená poukážka je rovnaká ako aktuálna", "left");
                await JSRuntime.InvokeVoidAsync("switchStyleClass", "coupinputid", "border-primary");
                return;
            }

            var founded = dbw.Coupons.FirstOrDefault(x => x.ID == kupon && !x.IsUsed);
            if (founded != null)
            {
                await JSRuntime.InvokeVoidAsync("showPopover", "coupinputid", $"Poukážka sa našla, uložte zmeny", "left");
                await JSRuntime.InvokeVoidAsync("switchStyleClass", "coupinputid", "border-success");

                Marked.CouponId = founded.ID;
                Marked.Coupon = founded;
                return;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("showPopover", "coupinputid3", $"Vložená poukážka neexistuje", "left");
                await JSRuntime.InvokeVoidAsync("switchStyleClass", "coupinputid", "border-warning");
            }

        }
    }

    private async Task OpenHostTab()
    {
        await cusmodHostcon.OpenModal(true);
    }

    private async Task CalculateSum()
    {
        if (Marked.Room != null)
        {
            if (Marked.UbytovaciPoplatok == 0)
            {
                await JSRuntime.InvokeVoidAsync("showPopover", "ubytpopinp", "Celková cena vypočítaná bez ubytovacieho poplatku!", "bottom");
            }
            if (VyberHosti.Count == 0)
            {
                await JSRuntime.InvokeVoidAsync("showPopover", "ubytpopinp2", "Celková cena vypočítaná bez hostí!", "top");
            }
            Marked.CelkovaSuma = (decimal)Marked.Room.Cost * (Marked.DepartureDate - Marked.ArrivalDate).Days;
            if (Marked.Coupon != null)
            {
                Marked.CelkovaSuma = (Marked.CelkovaSuma * (100 - Marked.Coupon.Discount)) / 100;
            }
            Marked.CelkovaSuma = Marked.CelkovaSuma + (decimal)Marked.UbytovaciPoplatok * VyberHosti.Count;
        }
    }
    private async Task FindGuest()
    {
        ciftguest.SetItemsFromList(ListWebGuest);
        await ciftguest.OpenModal(async (res) =>
        {
            var selectedWebGuest = ciftguest.ComplexTable.Marked;

            if (!string.IsNullOrEmpty(selectedWebGuest?.UserName))
            {
                Marked.GuestId = selectedWebGuest.Id;
                Marked.Guest = selectedWebGuest;
            }
            else
            {
                Marked.GuestId = null;
                Marked.Guest = null;
            }
        });

        //if (await iftwebguest.OpenModal(true))
        //{
        //    var selectedWebGuest = iftwebguest.OutSelection.FirstOrDefault();

        //    if (!string.IsNullOrEmpty(selectedWebGuest?.UserName))
        //    {
        //        Marked.GuestId = selectedWebGuest.Id;
        //        Marked.Guest = selectedWebGuest;
        //    }
        //    else
        //    {
        //        Marked.GuestId = null;
        //        Marked.Guest = null;
        //    }
        //}
    }
    private async Task FindRoom()
    {
        CascadingService.Disabled = true;
        var inputValue = await iftroom.GetInputValue("inputroom");
        List<DBLayer.Models.Room> listIziebsave = new(ListIzby);
        foreach (var item in listIziebsave)
        {
            var found = dbw.Rezervations.FirstOrDefault(x => x.ArrivalDate < Marked.DepartureDate && x.DepartureDate > Marked.ArrivalDate
            && item.RoomNumber == x.RoomNumber
            && x.Id != Marked.Id
            && x.Status != DBLayer.Models.ReservationStatus.Stornovana.ToString()
            || (
                x.RoomNumber == item.RoomNumber
                && x.Id != Marked.Id
                && x.Status == DBLayer.Models.ReservationStatus.Blokovana.ToString()
                && (x.ArrivalDate == Marked.DepartureDate || Marked.ArrivalDate == x.DepartureDate))
            );
            if (found != null)
            {
                var find = ListIzby.FirstOrDefault(x => x.RoomNumber == found.RoomNumber);
                if (find != null)
                {
                    ListIzby.Remove(find);
                }
            }
        }
        CascadingService.Disabled = false;
        if (await iftroom.OpenModal(true))
        {
            Marked.RoomNumber = iftroom.OutSelection.FirstOrDefault().RoomNumber;
            Marked.Room = iftroom.OutSelection.FirstOrDefault();
            Marked.DPH = iftroom.OutSelection.FirstOrDefault().RoomInfo?.DPH ?? Marked.DPH;
            decimal? val = iftroom.OutSelection.FirstOrDefault().RoomInfo?.UbytovaciPoplatok;
            Marked.UbytovaciPoplatok = val.HasValue ? (double)val.Value : Marked.UbytovaciPoplatok;
        }
        foreach (var item in listIziebsave)
        {
            if (!ListIzby.Contains(item))
            {
                ListIzby.Add(item);
            }
        }
        ListIzby.Sort((x, y) => x.RoomNumber.CompareTo(y.RoomNumber));
    }


    /// <summary>
    /// false - mozne menit hodnoty, true - nemozne menit hodnoty
    /// </summary>
    /// <returns></returns>
    private bool ValidateChangeability()
    {
        if (ValidateSpecial())
        {
            return false;
        }
        if (IsCompleted() || IsStorno())
        {
            return true;
        }
        if (Marked.Status == DBLayer.Models.ReservationStatus.VytvorenaRucne.ToString()
            || Marked.Status == DBLayer.Models.ReservationStatus.VytvorenaWeb.ToString()
            || Marked.Status == DBLayer.Models.ReservationStatus.SchvalenaNezaplatena.ToString()
            || Marked.Status == DBLayer.Models.ReservationStatus.Blokovana.ToString())

        {
            return false;
        }

        return true;
    }

    private bool ValidateSpecial()
    {
        return UserService.IsLoggedUserInRoles(DBLayer.Models.Rezervation.ROLE_SPECIAL_REZERVACIA);
    }

    public void Reset()
    {
        if (!ValidateSpecial() && !ValidateChangeability())
        {
            DBLayer.Models.ReservationStatus[] newarr = new DBLayer.Models.ReservationStatus[5];
            newarr[0] = DBLayer.Models.ReservationStatus.VytvorenaWeb;
            newarr[1] = DBLayer.Models.ReservationStatus.VytvorenaRucne;
            newarr[2] = DBLayer.Models.ReservationStatus.SchvalenaNezaplatena;
            newarr[3] = DBLayer.Models.ReservationStatus.Stornovana;
            newarr[4] = DBLayer.Models.ReservationStatus.Blokovana;
            SelectValues = newarr;
        }

        if (Marked != null)
        {
            VyberHosti.Clear();
            VyberHosti.AddRange(db.HostConReservations.Include(x => x.HostX).Where(x => x.Reservation == Marked.Id));       //bez instancie rezervacie
            VyberHosti.ForEach(x => x.HostX.PokladnicnyDokladZ = DBLayer.Models.Host.GetActivePokladnicneDoklady(x.HostX, db).FirstOrDefault()); //priradenie prveho pokladnicneho dokladu, ak ich je viacej tak sa nic nedeje, mozno niekedy opravit
        }
        ZoznamKas.Clear();
        ZoznamKas.AddRange(db.Kasy.Include(x => x.ActualUserX).ToList());

        StateHasChanged();
    }

    private bool IsSpracovana()
    {
        return Marked.Status == DBLayer.Models.ReservationStatus.SchvalenaNezaplatena.ToString();
    }


    public bool IsZaplatena()
    {
        return Marked.Status == DBLayer.Models.ReservationStatus.SchvalenaZaplatena.ToString();
    }

    private bool IsCompleted()
    {
        return Marked.Status == DBLayer.Models.ReservationStatus.Checked_IN.ToString() ||
               Marked.Status == DBLayer.Models.ReservationStatus.Checked_OUT.ToString();
    }

    private bool IsHostPDPossible()
    {
        return Marked.Status == DBLayer.Models.ReservationStatus.SchvalenaZaplatena.ToString() ||
               Marked.Status == DBLayer.Models.ReservationStatus.Checked_IN.ToString();
    }

    private bool IsStorno()
    {
        return Marked.Status == DBLayer.Models.ReservationStatus.Stornovana.ToString();
    }

    private bool Exist()
    {
        return Marked.Id != 0;
    }

    private async Task HandleKeyDown(KeyboardEventArgs e, string inputId)
    {
        if (e.Key == "Tab")
        {
            switch (inputId)
            {
                case "inputroom":
                    await FindRoom();
                    break;
                default: break;
            }
        }
    }

    private async Task OpenInfoCoupon()
    {
        if (Marked.Coupon != null)
        {
            infomod.UpdateText("Názov: " + Marked.Coupon.NameService + "<br>Popis: " + Marked.Coupon.Description + "<br>Zľava: " + Marked.Coupon.Discount);
            await infomod.OpenModal(true);
        }
    }

    private async Task DeleteHostCon(DBLayer.Models.HostConReservation item)
    {
        infomod.UpdateText("Chcete odobrať tohto hosťa?");
        if (await infomod.OpenModal(true))
        {
            VyberHosti.Remove(item);
        }
    }
    private async Task AddHostCon()
    {
        CascadingService.Disabled = true;
        bool added = false;
        foreach (var item in VyberHosti)        //vyhodime uz pridanych hosti
        {
            var found = ListHostia.FirstOrDefault(x => x.ID == item.Host);
            if (found != null)
            {
                ListHostia.Remove(found);
            }
        }

        cifthost.SetItemsFromList(ListHostia);
        CascadingService.Disabled = false;
        await cifthost.OpenModal(async (res) =>
        {

            if (res)
            {
                var vybranyHost = cifthost.ComplexTable.Marked;
                DBLayer.Models.HostConReservation newCon = new()
                {
                    Host = vybranyHost.ID,
                    HostX = vybranyHost,
                    Reservation = Marked.Id,
                };
                VyberHosti.Add(newCon);
                added = true;
            }
            for (var i = 0; i < VyberHosti.Count; ++i)        //pridame naspat do zoznamu
            {
                if (added && i == VyberHosti.Count - 1) //ak sme pridali tak ho ignorujeme lebo tento musel byt v zozname hosti
                {
                    continue;
                }
                ListHostia.Add(VyberHosti[i].HostX);        //?
            }
            ListHostia.Sort((x, y) => x.Surname.CompareTo(y.Surname));
            //StateHasChanged();
        });

        /*if (await ifthost.OpenModal(true))
        {
            var vybranyHost = ifthost.OutSelection.FirstOrDefault();
            DBLayer.Models.HostConReservation newCon = new()
            {
                Host = vybranyHost.ID,
                HostX = vybranyHost,
                Reservation = Marked.Id,
            };
            VyberHosti.Add(newCon);
            added = true;
        }

        for (var i = 0; i < VyberHosti.Count; ++i)        //pridame naspat do zoznamu
        {
            if (added && i == VyberHosti.Count - 1) //ak sme pridali tak ho ignorujeme lebo tento musel byt v zozname hosti
            {
                continue;
            }
            ListHostia.Add(VyberHosti[i].HostX);        //?
        }
        ListHostia.Sort((x, y) => x.Surname.CompareTo(y.Surname));*/
    }

    private async Task CreateHostTab()
    {
        cuscreatehost.Render = true;
        if (Marked.Guest != null)
        {
            objectHolder.Add(Marked.Guest);
        }
        await cuscreatehost.OpenModal(true);
        var found = objectHolder.Remove<DBLayer.Models.Host>();
        if (found != null)
        {
            ListHostia.Add(found);
            ListHostia.Sort((x, y) => x.Surname.CompareTo(y.Surname));
            VyberHosti.Add(new DBLayer.Models.HostConReservation()
            {
                Host = found.ID,
                HostX = found,
                Reservation = Marked.Id
            });
        }
        cuscreatehost.Render = false;
    }
    private async Task OpenHostFrom(DBLayer.Models.Host host)
    {
        cuscreatehost.Render = true;
        objectHolder.Add(host);
        await cuscreatehost.OpenModal(true);
        var found = objectHolder.Remove<DBLayer.Models.Host>();
        if (found != null)
        {
            var remov = VyberHosti.FirstOrDefault(x => x.Host == found.ID);
            if (remov != null)
            {
                remov.HostX.Address = found.Address;
                remov.HostX.CitizenID = found.CitizenID;
                remov.HostX.Name = found.Name;
                remov.HostX.Passport = found.Passport;
                remov.HostX.BirthNumber = found.BirthNumber;
                remov.HostX.Surname = found.Surname;
                remov.HostX.BirthDate = found.BirthDate;
                remov.HostX.Note = found.Note;
                remov.HostX.Nationality = found.Nationality;
                remov.HostX.Sex = found.Sex;
                remov.HostX.Guest = found.Guest;
            }
        }
        cuscreatehost.Render = false;
    }

    private async Task ProcessCheckIN()
    {
        CascadingService.Disabled = true;
        await Save(silent: true);
        infomod.UpdateText("Chcete spracovať <strong>CHECK-IN</strong>?<br>Uistite sa, že ste uložili všetky potrebné zmeny.");
        CascadingService.Disabled = false;
        if (await infomod.OpenModal(true))
        {
            Marked.Status = DBLayer.Models.ReservationStatus.Checked_IN.ToString();
            SelectValues = Enum.GetValues(typeof(DBLayer.Models.ReservationStatus));
            await Save(silent: true);
        }
    }

    private async Task ProcessCheckOUT()
    {
        CascadingService.Disabled = true;
        await Save(silent: true);
        infomod.UpdateText("Chcete spracovať <strong>CHECK-OUT</strong>?");
        CascadingService.Disabled = false;
        if (await infomod.OpenModal(true))
        {
            Marked.Status = DBLayer.Models.ReservationStatus.Checked_OUT.ToString();
            SelectValues = Enum.GetValues(typeof(DBLayer.Models.ReservationStatus));
            await Save(silent: true);
        }
    }

    private async Task CreatePdf(DBLayer.Models.HostConReservation con)
    {
        PDFLoading = true;
        PotvrdenieOUbytovaniPDF creator = new PotvrdenieOUbytovaniPDF();

        con.ReservationZ = dbw.Rezervations
            .Include(x => x.Guest)
            .Include(x => x.Room)
            .Include(x => x.Coupon)
            .FirstOrDefault(x => x.Id == con.Reservation);
        if (!string.IsNullOrEmpty(con.HostX.Guest))
        {
            con.HostX.GuestZ = dbw.Users.FirstOrDefault(x => x.Id == con.HostX.Guest);
        }

        var organizacia = db.Dodavatelia.FirstOrDefault(x => x.ICO == "123456");    //TODO
        if (organizacia == null)
        {
            organizacia = new();
        }

        await Task.Run(() =>
        {
            creator.GenerujPdf(con, organizacia);
            creator.OpenPDF();

        });

        PDFLoading = false;
    }

    private async Task OpenPickKasa()
    {
        if (!compVybkasa.JeVybranaKasa())
        {
            await compVybkasa.VyberKasu();  //fyzicky statie programu
        }
        await compVybkasa.Dispose();
    }

    private async Task OpenDokladMod()
    {
        cusopendoklad.Render = true;
        var con = DBLayer.Models.UniConItemPoklDokladu.EnsureCreated(Marked, db, dbw);
        if (con == null)
        {
            infomod.UpdateText("Nepodarilo sa vytvoriť spojenie do pokladničného bloku.");
            await infomod.OpenModal(true);
            return;
        }
        objectHolder.Remove<DBLayer.Models.ReservationConItemPoklDokladu>();        //pre istotu
        objectHolder.Add(con);
        await cusopendoklad.OpenModal(true);
        await sessionStorage.SetItemAsync("PDChanged", false);      //nic netreba robit
        if (await sessionStorage.GetItemAsync<bool>("PDSold"))
        {
            Marked.setFromReservation(dbw.Rezervations.FirstOrDefault(x => x.Id == Marked.Id));
            await sessionStorage.SetItemAsync("PDSold", false);
            await sessionStorage.SetItemAsync("RezervationChanged", true);
        }
        cusopendoklad.Render = false;
        StateHasChanged();
    }

    private async Task OpenDokladHostMod(DBLayer.Models.Host host)
    {
        cusopendoklad.Render = true;

        objectHolder.Add(host);
        await cusopendoklad.OpenModal(true);
        await sessionStorage.SetItemAsync("PDSold", false); //nic netreba robit
        if (await sessionStorage.GetItemAsync<bool>("PDChanged"))
        {
            await sessionStorage.SetItemAsync("PDChanged", false);
            var found = DBLayer.Models.Host.GetActivePokladnicneDoklady(host, db).FirstOrDefault();
            if (found != null)
            {
                if (!DBLayer.Models.PokladnicnyDoklad.VymazAkPrazdnyZoznamPoloziek(found, db))
                {
                    host.PokladnicnyDokladZ = found;
                }
                else
                {
                    host.PokladnicnyDokladZ = null;
                }
            }
        }
        MarkedHost = null;
        cusopendoklad.Render = false;
        StateHasChanged();
    }

    private async Task OpenDoklad()
    {
        CascadingService.Disabled = true;
        await Save(silent: true);
        CascadingService.Disabled = false;
        OnlyOneItemPD = true;
        MarkedHost = null;  //pre istotu

        compVybkasa.StartRender();
    }

    private async Task OtvorPD(DBLayer.Models.Host host)
    {
        CascadingService.Disabled = true;
        await Save(silent: true);
        CascadingService.Disabled = false;
        OnlyOneItemPD = false;
        MarkedHost = host;
        compVybkasa.StartRender();
    }

    private async Task OpenPD()
    {
        if (MarkedHost == null)
        {
            await OpenDokladMod();
            return;
        }
        await OpenDokladHostMod(MarkedHost);
    }

    private bool MaNezaplatenePD()
    {
        foreach (var item in VyberHosti)
        {
            if (item.HostX.PokladnicnyDokladZ != null)
            {
                return true;
            }
        }
        return false;
    }

}
