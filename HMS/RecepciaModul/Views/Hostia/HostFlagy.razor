@namespace RecepciaModul
@page "/Hostia/HostFlagy"
@inherits TransientHoldedComp<HostFlagyViewModel>

<ApproveModal @ref=AprovMod ID="deletemodal"
              Text="Naozaj chcete odstrániť tento riadok?<br>POZOR môžu sa vymazať prvky, ktoré sú spojené s touto položkou!"
              FuncOnSucc="EventCallback.Empty"
              FuncOnDiss="EventCallback.Empty">
</ApproveModal>



<CustomModal @ref="cusmodcruhostflag"
             ID="cusmodcruhostflag"
             Header="Značenie hosťa"
             SizeInRem="50"
             OneButtonOnly="true">
    <BODY>


        <EditForm Model="ViewModel.EditFlag" OnValidSubmit="Save">
            <DataAnnotationsValidator />


            <div class="row">
                <div class="col">
                    <div class="row">
                        <div class="col col-6">
                            <label>*ID</label>
                            <InputText @bind-Value="@ViewModel.EditFlag.ID" id="inputflagid" disabled="@ViewModel.Existuje" class="form-control" placeholder="Unikátne značenie" />
                            <ValidationMessage For="@(() => ViewModel.EditFlag.ID)" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-6">
                            <label>Popis</label>
                            <InputTextArea @bind-Value="@ViewModel.EditFlag.StringValue" class="form-control" placeholder="Popis" />
                            <ValidationMessage For="@(() => ViewModel.EditFlag.StringValue)" />
                        </div>
                    </div>
                </div>

                <div class="col">
                    <div class="row">
                        <div class="col col-6">
                            <label>Číselná&nbsp;hodnota</label>
                            <input type="number" step="0.01" @bind="@ViewModel.EditFlag.NumericValue" class="form-control" placeholder="Hodnota" />
                            <ValidationMessage For="@(() => ViewModel.EditFlag.NumericValue)" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col col-8">
                            <label>Dátum</label>
                            <InputDate @bind-Value="@ViewModel.EditFlag.DateValue" class="form-control" />
                            <ValidationMessage For="@(() => ViewModel.EditFlag.DateValue)" />
                        </div>
                    </div>

                </div>
            </div>

            <hr>

            <div class="row pt-2">
                <div class="col text-center">
                    <div class="btn-group" role="group">
                        <SimpleButton ID="ulozbuttonid" Type="submit" Disabled="string.IsNullOrEmpty(ViewModel.EditFlag.ID)" ZmenaStavuTextu="@(!ViewModel.Existuje)" ZmenaTextu="@(("Vytvoriť", "Uložiť"))"></SimpleButton>
                    </div>
                </div>
            </div>

        </EditForm>


    </BODY>
</CustomModal>

<CustomDynamicModal @ref="cusmodzozhosti"
                    ID="cusmodzozhosti"
                    ChangeColor="true"
                    Header="Zoznam použitia značky"
                    SizeInRem="80"
                    YesNoButtonText="@(("Uložiť", "Neuložiť"))">

    <ComplexTable @ref="complexTableZozHost"
                  ID="complexTableZozHosts"
                  T="DBLayer.Models.Host"
                  Items="ViewModel.ZoznamHostiFlagy"
                  LoadingItems="false"
                  Sticky="true"
                  ParentStateHasChanged="StateHasChanged"
                  ClassForEach="@((item) => ViewModel.OdstraniFlaguHostList.Contains(item) ? "table-danger" : "")"
                  SetTableSettings="@((false, tableSettingsHostia, null))">
    </ComplexTable>


</CustomDynamicModal>

<InfoModal @ref="InfoModSaved" ID="infosaveda"
           Text="Zmeny boli uložené" />

<div class="container maxwidth95">

    <div class="row pb-1">

        <div class="col-3 d-flex justify-content-bottom mb-2">
            <SearchManualInput ID="srchinput" Header="Vyhľadaj značenie..." OnFilterRequest="(e) => ViewModel.ComplexTable?.FilterResults(e) ?? Task.CompletedTask" />
        </div>

        <div class="col-9">
            <div class="btn-group" role="group">
                <button type="button" class="btn btn-secondary" @onclick="Close">
                    <IconTextClose></IconTextClose>
                </button>
                <button type="button" @onclick="() => Open(marked)" disabled="@(marked == null || !ViewModel.ValidateUserCUD())" class="btn btn-primary"><IconTextOpen></IconTextOpen></button>
                <button @onclick="Create" disabled="@(!ViewModel.ValidateUserCUD())" type="button" class="btn btn-primary">
                    <IconTextCreate></IconTextCreate>
                </button>
                <button type="button" @onclick="OpenZozHosti" disabled="@(marked == null)" class="btn btn-primary"><IconText Icon="bi-person-lines-fill">Zoznam hostí so značkou</IconText></button>
            </div>
        </div>

    </div>

    <div class="row">
        <div id="@ViewModel.ComplexTable?.ID_scrollbar" class="col-12" style="max-height: 80vh; max-width: 95vw; overflow: auto;">
            <ComplexTable @ref="ViewModel.ComplexTable"
                          ID="complextable"
                          T="DBLayer.Models.HostFlag"
                          Items="ViewModel.ZoznamPoloziek"
                          LoadingItems="ViewModel.Nacitavanie"
                          Sticky="true"
                          Selectable="true"
                          ParentStateHasChanged="StateHasChanged"
                          OnRefresh="ViewModel.NacitajZoznamy"
                          CollectionChanged="ViewModel.OnCollectionChanged"
                          OnDbClick="(item) => Open(item)"
                          SetTableSettings="@((true, tableSettings, null))">
            </ComplexTable>
        </div>
    </div>


</div>


@code {

    private DBLayer.Models.HostFlag? marked { get => ViewModel?.ComplexTable?.Marked; }
    ApproveModal AprovMod;
    CustomModal cusmodcruhostflag;
    InfoModal InfoModSaved;
    CustomDynamicModal cusmodzozhosti;
    ComplexTable<DBLayer.Models.Host> complexTableZozHost;

    List<TableColumnTemplate<DBLayer.Models.HostFlag>> tableSettings = new()
{
        new () { ID_Prop = nameof(DBLayer.Models.HostFlag.ID), HeaderValue = "ID", CellValue = (item) => item.ID },
        new () { ID_Prop = nameof(DBLayer.Models.HostFlag.StringValue), HeaderValue = "Popis", CellValue = (item) => item.StringValue ?? "" },
        new () { ID_Prop = nameof(DBLayer.Models.HostFlag.NumericValue), HeaderValue = "Hodnota", CellValue = (item) => item.NumericValue?.ToString("F2", System.Globalization.CultureInfo.InvariantCulture) ?? "" },
        new () { ID_Prop = nameof(DBLayer.Models.HostFlag.DateValue), HeaderValue = "Dátum", CellValue = (item) => item.DateValue?.ToString("dd.MM.yyyy HH:mm:ss") ?? "" },
    };

    List<TableColumnTemplate<DBLayer.Models.Host>> tableSettingsHostia = new()
{
       new () { ID_Prop = nameof(DBLayer.Models.Host.Name), HeaderValue = "Meno", CellValue = (item) => item.Name },
new () { ID_Prop = nameof(DBLayer.Models.Host.Surname), HeaderValue = "Priezvisko", CellValue = (item) => item.Surname },
new () { ID_Prop = nameof(DBLayer.Models.Host.Nationality), HeaderValue = "Národnosť", CellValue = (item) => item.Nationality },
new () { ID_Prop = nameof(DBLayer.Models.Host.Sex), HeaderValue = "Pohlavie", CellValue = (item) => item.GetPohlavie(), Visible = false },
new () { ID_Prop = nameof(DBLayer.Models.Host.CitizenID), HeaderValue = "Občan.č.", CellValue = (item) => item.CitizenID },
new () { ID_Prop = nameof(DBLayer.Models.Host.Passport), HeaderValue = "Pas", CellValue = (item) => item.Passport },
new () { ID_Prop = nameof(DBLayer.Models.Host.Address), HeaderValue = "Adresa", CellValue = (item) => item.Address, Visible = false },
//new () { ID_Prop = nameof(DBLayer.Models.Host.BirthNumber), HeaderValue = "Rodné č.", CellValue = (item) => item.BirthNumber, Visible = false },
new () { ID_Prop = nameof(DBLayer.Models.Host.BirthDate), HeaderValue = "Narodenie", CellValue = (item) => item.BirthDate.ToString("dd.MM.yyyy")},
new() { ID_Prop = nameof(DBLayer.Models.Host.Note), HeaderValue = "Poznámka", CellValue = (item) => item.Note, Visible = false }
    };

    protected override void OnInitializedMustHave()
    {

        tableSettings.Add(new TableColumnTemplate<DBLayer.Models.HostFlag>()
        {
            Placeholder = (item) => new RenderFragmentTemplate(typeof(ButtonRemove), new RenderFragmentAttribute("onclick", async () => await Delete(item)), new RenderFragmentAttribute("Disabled", !(ViewModel.MoznoVymazat(item))))
        });

        tableSettingsHostia.Insert(0, new TableColumnTemplate<DBLayer.Models.Host>()
        {
            HeaderValue = "Zaznačiť pre odstánenie",
            CellClass = "width10perc",
            Placeholder = (item) => new RenderFragmentTemplate(typeof(ButtonRemove), new RenderFragmentAttribute("onclick", async () => await SetToRemoveHost(item)), new RenderFragmentAttribute("Disabled", false), new RenderFragmentAttribute("Disabled", false))
        });
    }


    protected override void OnInitializedTransient()
    {
        if (!ViewModel.ValidateUser())
        {
            Navigator.NavigateTo(Navigator.RemoveLastUrl());
            return;
        }
        //TransientHoldCondition("/Hostia");
    }

    protected override async Task OnInitializedTransientAsync()
    {
        if (!ViewModel.ValidateUser())
        {
            return;
        }
        await ViewModel.NacitajZoznamy();
    }

    public void Close()
    {
        Navigator.NavigateTo(Navigator.RemoveLastUrl());
    }

    public async Task Open(DBLayer.Models.HostFlag item)
    {
        if (item != null)
        {
            if (ViewModel.ValidateUserCUD())
            {
                ViewModel.Existuje = true;
                ViewModel.EditFlag = item.Clon();
                await OpenCusMod();
            }
        }
    }

    public async Task Delete(DBLayer.Models.HostFlag item)
    {
        if (ViewModel.MoznoVymazat(item))
        {
            if (await AprovMod.OpenModal(true))
            {
                ViewModel.Vymazat(item);
                StateHasChanged();
            }
        }

    }

    public async Task Create()
    {
        if (ViewModel.ValidateUserCUD())
        {
            ViewModel.Existuje = false;
            ViewModel.EditFlag = new();
            await OpenCusMod();
        }
    }

    public async Task Save()
    {
        if (ViewModel.KontrolaExistencieID())   //ak uz existuje id pri novych flagoch
        {
            await JSRuntime.InvokeVoidAsync("addWarningPopOverUntilClick", "inputflagid", "Vložené označenie už existuje. Zvoľte iné ID.", "right");
            await JSRuntime.InvokeVoidAsync("addStyleClassUntilClick", "ulozbuttonid", "border-warning");
            return;
        }

        if (ViewModel.Ulozit())
        {
            await InfoModSaved.OpenModal(true);
        }
    }

    public async Task OpenCusMod()
    {
        await cusmodcruhostflag.OpenModal(true);
        ViewModel.EditFlag = new();
        ViewModel.Existuje = false;
        await cusmodcruhostflag.Dispose();
    }

    private async Task OpenZozHosti()
    {
        if (marked != null)
        {
            await ViewModel.LoadHostiaZFlagy(marked);
            await cusmodzozhosti.OpenModal(async (res) =>
            {
                if (res)
                {
                    await ViewModel.OdstranHostiZFlagy();
                }
                else
                {
                    ViewModel.OdstraniFlaguHostList.Clear();
                }

            });
        }
    }

    private async Task SetToRemoveHost(DBLayer.Models.Host item)
    {
        if (!ViewModel.OdstraniFlaguHostList.Remove(item))
        {
            ViewModel.OdstraniFlaguHostList.Add(item);
            //StateHasChanged();
        }
    }
}
