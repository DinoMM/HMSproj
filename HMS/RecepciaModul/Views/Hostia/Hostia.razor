@namespace RecepciaModul
@page "/Hostia"
@inject HostiaViewModel ViewModel

<ApproveModal @ref=AprovMod ID="deletemodal"
              Text="Naozaj chcete odstrániť tento riadok?<br>POZOR môžu sa vymazať prvky, ktoré sú spojené s touto položkou!"
              FuncOnSucc="EventCallback.Empty"
              FuncOnDiss="EventCallback.Empty">
</ApproveModal>
<InfoModal @ref="InfoModHasConneciton" ID="infomodalhascon"
           Text="Nemožno vymazať hosťa lebo má aktívnu rezerváciu.">
</InfoModal>

<div class="container">

    <div class="row pb-1">

        <div class="col-3 d-flex justify-content-bottom mb-2">
            <SearchInput NumCols="7" PlaceHolder="Vyhľadaj hosťa..." TableID="tableid"></SearchInput>
        </div>

        <div class="col-9">
            <div class="btn-group" role="group">
                <button type="button" class="btn btn-secondary" @onclick="Close"><IconTextClose></IconTextClose></button>
                <button @onclick="Create" disabled="@(!ViewModel.ValidateUserCRU())" type="button" class="btn btn-primary"> <IconTextCreate></IconTextCreate></button>
                <button type="button" @onclick="Open" disabled="@(marked == null || !ViewModel.ValidateUser())" class="btn btn-primary"><IconTextOpen></IconTextOpen></button>
                <button type="button" class="btn btn-primary" @onclick="OpenFlags"><IconText Icon="bi-flag-fill">Správa značiek</IconText></button>
            </div>
        </div>

        <div class="col-1"></div>
    </div>

    <div class="row">
        <div class="col-1"></div>
        <div class="col-12" style="max-height: 30rem;overflow: auto;">
            <SimpleTable ID="tableid">
                <THEAD>

                    <ThSort>Meno</ThSort>
                    <ThSort>Priezvisko</ThSort>
                    <ThSort>Národnosť</ThSort>
                    <ThSort>Pohlavie</ThSort>
                    <ThSort>Občan.č.</ThSort>
                    <ThSort>Pas</ThSort>
                    <ThSort>Účet</ThSort>
                <th></th>
                </THEAD>
                <TBODY>
                    @if (ViewModel.NacitavaniePoloziek)
                    {
                        <div class="ms-1">
                            <SpinnerLoading Size="2.0"></SpinnerLoading>
                        </div>
                    }
                    else
                    {
                        @foreach (var item in ViewModel.ZoznamHosti)
                        {

                            <tr @onclick=@(() => marked = item) class="@(marked == item ? "selected-row" : "")" @ondblclick="@(() => Open())" style="cursor: pointer;">
                                <td class="col-resize">@item.Name</td>
                                <td class="col-resize">@item.Surname</td>
                                <td class="col-resize">@item.Nationality</td>
                                <td class="col-resize">@(item.Sex ? "Žena" : "Muž")</td>
                                <td class="col-resize">@item.CitizenID</td>
                                <td class="col-resize">@item.Passport</td>
                                <td class="col-resize">@(item.GuestZ?.Email ?? "-")</td>
                                <td>
                                    @if (ViewModel.ValidateUserD())
                                    {
                                        <ButtonRemove Disabled="@(!ViewModel.MoznoVymazat(item))" OnClick="@(() => Delete(item))"></ButtonRemove>
                                    }
                                </td>

                            </tr>
                        }
                    }
                    <span id="observerTarget"></span>
                </TBODY>

            </SimpleTable>
        </div>
        <div class="col-1"></div>
    </div>

    <div class="row">
        <div class="col-12"></div>
    </div>

</div>

@code {

    private DBLayer.Models.Host? marked = null;
    private ApproveModal AprovMod = new();
    private InfoModal InfoModHasConneciton = new();

    protected override void OnInitialized()
    {
        if (!ViewModel.ValidateUser())
        {
            Navigator.NavigateTo(Navigator.RemoveLastUrl());
            return;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (!ViewModel.ValidateUser())
        {
            return;
        }
        await ViewModel.NacitajZoznamy();
    }

    public void Close()
    {
        Navigator.NavigateTo(Navigator.RemoveLastUrl());
    }

    public void Open()
    {
        if (marked != null)
        {
            if (ViewModel.ValidateUser())
            {
                objectHolder.Add(marked);
                Navigator.NavigateTo(Navigator.AddNextUrl("/CRUDHost"));
            }
        }
    }

    public async Task Delete(DBLayer.Models.Host item)
    {
        if (ViewModel.MoznoVymazat(item))
        {
            if (await AprovMod.OpenModal(true))
            {
                ViewModel.Vymazat(item);
            }
        }
        else
        {
            await InfoModHasConneciton.OpenModal();
        }
    }

    public void Create()
    {
        if (ViewModel.ValidateUserCRU())
        {
            Navigator.NavigateTo(Navigator.AddNextUrl("/CRUDHost"));
        }
    }

    public void OpenFlags()
    {
        Navigator.NavigateTo(Navigator.AddNextUrl("HostFlagy"));
    }
}
