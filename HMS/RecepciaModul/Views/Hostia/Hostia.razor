@namespace RecepciaModul
@page "/Hostia"
@inherits TransientHoldedComp<HostiaViewModel>

<ApproveModal @ref=AprovMod ID="deletemodal"
              Text="Naozaj chcete odstrániť tento riadok?<br>POZOR môžu sa vymazať prvky, ktoré sú spojené s touto položkou!"
              FuncOnSucc="EventCallback.Empty"
              FuncOnDiss="EventCallback.Empty">
</ApproveModal>
<InfoModal @ref="InfoModHasConneciton" ID="infomodalhascon"
           Text="Nemožno vymazať hosťa lebo má aktívnu rezerváciu.">
</InfoModal>

<CustomDynamicModal @ref="cusopendoklad" ID="cusopenkasamod" Header="Pokladničný blok" OneButtonOnly="true" ChangeColor="true" SizeInRem="90">
    <PokladnicnyDoklad AsComponent="true" OnlyOneItem="false"></PokladnicnyDoklad>
</CustomDynamicModal>



@if (compVybkasa.Rendered)
{
    <CompVyberKasa @ref="compVybkasa"
                   AfterRender="OpenPickKasa"
                   AfterDispose="OpenPD"
                   Kasy="ViewModel.ZoznamKas">
    </CompVyberKasa>
}

<div class="container maxwidth95">

    <div class="row pb-1">

        <div class="col-3 d-flex justify-content-bottom mb-2">
            <SearchManualInput ID="srchinput" Header="Vyhľadaj hosťa..." OnFilterRequest="(e) => ViewModel.ComplexTable?.FilterResults(e) ?? Task.CompletedTask" />
        </div>

        <div class="col-9 autooverflowx">
            <div class="btn-group" role="group">
                <button type="button" class="btn btn-secondary" @onclick="Close"><IconTextClose></IconTextClose></button>
                <button @onclick="Create" disabled="@(!ViewModel.ValidateUserCRU())" type="button" class="btn btn-primary"> <IconTextCreate></IconTextCreate></button>
                <button type="button" @onclick="() => Open(marked)" disabled="@(marked == null)" class="btn btn-primary"><IconTextOpen></IconTextOpen></button>
                <button type="button" class="btn btn-primary" @onclick="OpenFlags"><IconText Icon="bi-flag-fill">Správa značiek</IconText></button>
            </div>
        </div>

        <div class="col-1"></div>
    </div>

    <div class="row">
        <div class="col-1"></div>
        <div id="@ViewModel.ComplexTable?.ID_scrollbar" class="col-12" style="max-height: 80vh; max-width: 95vw; overflow: auto; ">
            <ComplexTable @ref="ViewModel.ComplexTable"
                          ID="complextable"
                          T="DBLayer.Models.Host"
                          Items="ViewModel.ZoznamPoloziek"
                          LoadingItems="ViewModel.Nacitavanie"
                          Sticky="true"
                          Selectable="true"
                          ParentStateHasChanged="StateHasChanged"
                          OnRefresh="ViewModel.NacitajZoznamy"
                          CollectionChanged="ViewModel.OnCollectionChanged"
                          OnDbClick="(item) => Open(item)"
                          SetTableSettings="@((true, tableSettings, null))">
                <AdditionToolbar>
                    <ButtonBasic ID="loadpokladdokl"
                                 Class="btn btn-outline-primary p-1 border-0 border-start border-end"
                                 OnClick="@ViewModel.RefreshMaPokladnicnyBlok"
                                 Disabled="@ViewModel.Nacitavanie"
                                 Tooltip="@(("bottom", "Aktualizovať aktívne pokladničné účty u hostí"))">
                        <IconText Icon="bi-receipt-cutoff"></IconText>
                    </ButtonBasic>
                    <ButtonBasic ID="openpokladdokl"
                                 Class="btn btn-outline-dark p-1 border-0 border-start border-end"
                                 OnClick="@StartOpenPD"
                                 Disabled="@(ViewModel.Nacitavanie || marked == null || marked.PokladnicnyDokladZ == null)"
                                 Tooltip="@(("bottom", "Otvoriť aktívny pokladničný doklad u vybraného hosťa"))">
                        <IconText Icon="bi-receipt-cutoff"></IconText>
                    </ButtonBasic>
                </AdditionToolbar>
            </ComplexTable>
        </div>
        <div class="col-1"></div>
    </div>

    <div class="row">
        <div class="col-12"></div>
    </div>

</div>

@code {

    private DBLayer.Models.Host? marked { get => ViewModel?.ComplexTable?.Marked; }
    private ApproveModal AprovMod = new();
    private InfoModal InfoModHasConneciton = new();
    private CompVyberKasa compVybkasa = new();
    private CustomDynamicModal cusopendoklad;

    List<TableColumnTemplate<DBLayer.Models.Host>> tableSettings = new()
{
        new () { ID_Prop = nameof(DBLayer.Models.Host.Name), HeaderValue = "Meno", CellValue = (item) => item.Name },
        new () { ID_Prop = nameof(DBLayer.Models.Host.Surname), HeaderValue = "Priezvisko", CellValue = (item) => item.Surname },
        new () { ID_Prop = nameof(DBLayer.Models.Host.Nationality), HeaderValue = "Národnosť", CellValue = (item) => item.Nationality },
        new () { ID_Prop = nameof(DBLayer.Models.Host.Sex), HeaderValue = "Pohlavie", CellValue = (item) => item.GetPohlavie(),  CellConvert = ((item) => item.Sex, typeof(bool)) },
        new () { ID_Prop = nameof(DBLayer.Models.Host.CitizenID), HeaderValue = "Občan.č.", CellValue = (item) => item.CitizenID },
        new () { ID_Prop = nameof(DBLayer.Models.Host.Passport), HeaderValue = "Pas", CellValue = (item) => item.Passport },
        new () { ID_Prop = nameof(DBLayer.Models.Host.Address), HeaderValue = "Adresa", CellValue = (item) => item.Address, Visible = false },
        //new () { ID_Prop = nameof(DBLayer.Models.Host.BirthNumber), HeaderValue = "Rodné č.", CellValue = (item) => item.BirthNumber, Visible = false },
        new () { ID_Prop = nameof(DBLayer.Models.Host.BirthDate), HeaderValue = "Narodenie", CellValue = (item) => item.BirthDate.ToString("dd.MM.yyyy"), Visible = false },
        new () { ID_Prop = "email", HeaderValue = "Email", CellValue = (item) => item.GuestZ?.Email ?? "", CellConvert = ((item) => item.GuestZ?.Email, typeof(string))  },
        new () { ID_Prop = "phonenumber", HeaderValue = "Telefón", CellValue = (item) => item.GuestZ?.PhoneNumber ?? "", CellConvert = ((item) => item.GuestZ?.PhoneNumber, typeof(string)), Visible = false },

    };

    protected override void OnInitializedMustHave()
    {
        tableSettings.Add(new() { ID_Prop = "mapokladnicnyblok", HeaderValue = "Aktívny poklad. účet", CellComponent = (e) => new RenderFragmentTemplate(typeof(SimpleCheckMarkDiv), new RenderFragmentAttribute("Checked", e.PokladnicnyDokladZ != null)), CellConvert = ((item) => item.PokladnicnyDokladZ != null, typeof(bool)) });
        tableSettings.Add(new() { ID_Prop = nameof(DBLayer.Models.Host.Note), HeaderValue = "Poznámka", CellValue = (item) => item.Note, Visible = false });

        tableSettings.Add(new()
        {
            Placeholder = (item) => new RenderFragmentTemplate(typeof(ButtonRemove), new RenderFragmentAttribute("onclick", async () => await Delete(item)), new RenderFragmentAttribute("Disabled", !(ViewModel.MoznoVymazat(item))))
        });
    }

    protected override void OnInitializedTransient()
    {
        if (!ViewModel.ValidateUser())
        {
            Navigator.NavigateTo(Navigator.RemoveLastUrl());
            return;
        }
    }

    protected override async Task OnInitializedTransientAsync()
    {
        if (!ViewModel.ValidateUser())
        {
            return;
        }
        await ViewModel.NacitajZoznamy();
    }

    public void Close()
    {
        Navigator.NavigateTo(Navigator.RemoveLastUrl());
    }

    public async Task Open(DBLayer.Models.Host item)
    {
        if (item != null)
        {
            if (ViewModel.ValidateUser())
            {
                objectHolder.Add(item);
                Navigator.NavigateTo(Navigator.AddNextUrl("/CRUDHost"));
            }
        }
    }

    public async Task Delete(DBLayer.Models.Host item)
    {
        if (ViewModel.MoznoVymazat(item))
        {
            if (await AprovMod.OpenModal(true))
            {
                ViewModel.Vymazat(item);
                StateHasChanged();
            }
        }
        else
        {
            await InfoModHasConneciton.OpenModal();
        }
    }

    public void Create()
    {
        if (ViewModel.ValidateUserCRU())
        {
            SetStartConditionOnVisit();
            Navigator.NavigateTo(Navigator.AddNextUrl("/CRUDHost"));
        }
    }

    public void OpenFlags()
    {
        Navigator.NavigateTo(Navigator.AddNextUrl("HostFlagy"));
    }

    private void StartOpenPD()
    {
        compVybkasa.StartRender();
    }

    private async Task OpenPickKasa()
    {
        if (!compVybkasa.JeVybranaKasa())
        {
            await compVybkasa.VyberKasu();  //fyzicky statie programu
        }
        await compVybkasa.Dispose();
        StateHasChanged();
    }

    private async Task OpenPD()
    {
        objectHolder.Add(marked.PokladnicnyDokladZ);
        objectHolder.Add(marked);
        await cusopendoklad.OpenModal(async (res) =>
        {
            await ViewModel.RefreshMaPokladnicnyBlok();
            StateHasChanged();
        });
    }

}
