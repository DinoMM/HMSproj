// <auto-generated />
using System;
using DBLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DBLayer.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20240320192557_Sklad2v4")]
    partial class Sklad2v4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DBLayer.IdentityUserOwn", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DBLayer.Models.Dodavatel", b =>
                {
                    b.Property<string>("ICO")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazov")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Obec")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ICO");

                    b.ToTable("Dodavatelia");
                });

            modelBuilder.Entity("DBLayer.Models.Objednavka", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DatumVznik")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dodavatel")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Odberatel")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Popis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stav")
                        .HasColumnType("int");

                    b.Property<string>("Tvorca")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Dodavatel");

                    b.HasIndex("Odberatel");

                    b.HasIndex("Tvorca");

                    b.ToTable("Objednavky");
                });

            modelBuilder.Entity("DBLayer.Models.PohSkup", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Poznamka")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Spracovana")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Vznik")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("PohSkup");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PohSkup");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DBLayer.Models.PolozkaSkladu", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Cena")
                        .HasColumnType("float");

                    b.Property<string>("MernaJednotka")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Nazov")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("ID");

                    b.ToTable("PolozkySkladu");
                });

            modelBuilder.Entity("DBLayer.Models.PolozkaSkladuMnozstvo", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<double>("Mnozstvo")
                        .HasColumnType("float");

                    b.Property<string>("PolozkaSkladu")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Sklad")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("PolozkaSkladu");

                    b.HasIndex("Sklad");

                    b.ToTable("PolozkaSkladuMnozstva");
                });

            modelBuilder.Entity("DBLayer.Models.PolozkaSkladuObjednavky", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<double>("Cena")
                        .HasColumnType("float");

                    b.Property<double>("Mnozstvo")
                        .HasColumnType("float");

                    b.Property<string>("Nazov")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Objednavka")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PolozkaSkladu")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Objednavka");

                    b.HasIndex("PolozkaSkladu");

                    b.ToTable("PolozkySkladuObjednavky");
                });

            modelBuilder.Entity("DBLayer.Models.PrijemkaPolozka", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<double>("Cena")
                        .HasColumnType("float");

                    b.Property<double>("Mnozstvo")
                        .HasColumnType("float");

                    b.Property<string>("Nazov")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PolozkaSkladuMnozstva")
                        .HasColumnType("bigint");

                    b.Property<string>("Skupina")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("PolozkaSkladuMnozstva");

                    b.HasIndex("Skupina");

                    b.ToTable("PrijemkyPolozky");
                });

            modelBuilder.Entity("DBLayer.Models.Sklad", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nazov")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Obdobie")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Sklady");
                });

            modelBuilder.Entity("DBLayer.Models.SkladUzivatel", b =>
                {
                    b.Property<string>("Sklad")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Uzivatel")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Sklad", "Uzivatel");

                    b.HasIndex("Uzivatel");

                    b.ToTable("SkladUzivatelia");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DBLayer.Models.Prijemka", b =>
                {
                    b.HasBaseType("DBLayer.Models.PohSkup");

                    b.Property<string>("DodaciID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FakturaID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Objednavka")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Prijemka");
                });

            modelBuilder.Entity("DBLayer.Models.Objednavka", b =>
                {
                    b.HasOne("DBLayer.Models.Dodavatel", "DodavatelX")
                        .WithMany()
                        .HasForeignKey("Dodavatel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBLayer.Models.Dodavatel", "OdberatelX")
                        .WithMany()
                        .HasForeignKey("Odberatel")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DBLayer.IdentityUserOwn", "TvorcaX")
                        .WithMany()
                        .HasForeignKey("Tvorca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DodavatelX");

                    b.Navigation("OdberatelX");

                    b.Navigation("TvorcaX");
                });

            modelBuilder.Entity("DBLayer.Models.PolozkaSkladuMnozstvo", b =>
                {
                    b.HasOne("DBLayer.Models.PolozkaSkladu", "PolozkaSkladuX")
                        .WithMany()
                        .HasForeignKey("PolozkaSkladu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBLayer.Models.Sklad", "SkladX")
                        .WithMany()
                        .HasForeignKey("Sklad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PolozkaSkladuX");

                    b.Navigation("SkladX");
                });

            modelBuilder.Entity("DBLayer.Models.PolozkaSkladuObjednavky", b =>
                {
                    b.HasOne("DBLayer.Models.Objednavka", "ObjednavkaX")
                        .WithMany()
                        .HasForeignKey("Objednavka")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBLayer.Models.PolozkaSkladu", "PolozkaSkladuX")
                        .WithMany()
                        .HasForeignKey("PolozkaSkladu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ObjednavkaX");

                    b.Navigation("PolozkaSkladuX");
                });

            modelBuilder.Entity("DBLayer.Models.PrijemkaPolozka", b =>
                {
                    b.HasOne("DBLayer.Models.PolozkaSkladuMnozstvo", "PolozkaSkladuMnozstvaX")
                        .WithMany()
                        .HasForeignKey("PolozkaSkladuMnozstva")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBLayer.Models.PohSkup", "SkupinaX")
                        .WithMany()
                        .HasForeignKey("Skupina")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PolozkaSkladuMnozstvaX");

                    b.Navigation("SkupinaX");
                });

            modelBuilder.Entity("DBLayer.Models.SkladUzivatel", b =>
                {
                    b.HasOne("DBLayer.Models.Sklad", "SkladX")
                        .WithMany()
                        .HasForeignKey("Sklad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBLayer.IdentityUserOwn", "UzivatelX")
                        .WithMany()
                        .HasForeignKey("Uzivatel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkladX");

                    b.Navigation("UzivatelX");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DBLayer.IdentityUserOwn", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DBLayer.IdentityUserOwn", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBLayer.IdentityUserOwn", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DBLayer.IdentityUserOwn", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
