// <auto-generated />
using System;
using DBLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DBLayer.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20250316140345_UctovnictvoDPH4v1")]
    partial class UctovnictvoDPH4v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DBLayer.IdentityUserOwn", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Adresa")
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IBAN")
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ObcianskyID")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RodneCislo")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Sex")
                        .HasColumnType("bit");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DBLayer.Models.Dodavatel", b =>
                {
                    b.Property<string>("ICO")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazov")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Obec")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ICO");

                    b.ToTable("Dodavatelia");
                });

            modelBuilder.Entity("DBLayer.Models.DruhPohybu", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DAL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MD")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazov")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("DruhyPohybov");
                });

            modelBuilder.Entity("DBLayer.Models.Faktura", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Skupina")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CenaBezDPH")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("CenaSDPH")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("CisloObjednavky")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DIC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dodanie")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormaUhrady")
                        .HasColumnType("int");

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ICO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IC_DPH")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KonstantnySymbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazov")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OdKoho")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SpecifickySymbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Splatnost")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Spracovana")
                        .HasColumnType("bit");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VariabilnySymbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Vystavenie")
                        .HasColumnType("datetime2");

                    b.HasKey("ID", "Skupina");

                    b.HasIndex("OdKoho");

                    b.HasIndex("Skupina");

                    b.ToTable("Faktury");
                });

            modelBuilder.Entity("DBLayer.Models.HSKModels.RoomInfo", b =>
                {
                    b.Property<string>("ID_Room")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Poznamka")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID_Room");

                    b.ToTable("RoomInfos");
                });

            modelBuilder.Entity("DBLayer.Models.Host", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BirthNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CitizenID")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Guest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Passport")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("Sex")
                        .HasColumnType("bit");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("ID");

                    b.ToTable("Hostia");
                });

            modelBuilder.Entity("DBLayer.Models.HostConFlag", b =>
                {
                    b.Property<long>("Host")
                        .HasColumnType("bigint");

                    b.Property<string>("HostFlag")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Host", "HostFlag");

                    b.HasIndex("HostFlag");

                    b.ToTable("HostConFlags");
                });

            modelBuilder.Entity("DBLayer.Models.HostConReservation", b =>
                {
                    b.Property<long>("Host")
                        .HasColumnType("bigint");

                    b.Property<long>("Reservation")
                        .HasColumnType("bigint");

                    b.HasKey("Host", "Reservation");

                    b.ToTable("HostConReservations");
                });

            modelBuilder.Entity("DBLayer.Models.HostFlag", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateValue")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("NumericValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("StringValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("HostFlags");
                });

            modelBuilder.Entity("DBLayer.Models.ItemPokladDokladu", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<decimal>("Cena")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("DPH")
                        .HasColumnType("decimal(9, 3)");

                    b.Property<decimal>("Mnozstvo")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("Nazov")
                        .HasMaxLength(196)
                        .HasColumnType("nvarchar(196)");

                    b.Property<DateTime?>("Obdobie")
                        .HasColumnType("datetime2");

                    b.Property<string>("Skupina")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("UniConItemPoklDokladu")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("Skupina");

                    b.HasIndex("UniConItemPoklDokladu");

                    b.ToTable("ItemyPokladDokladu");
                });

            modelBuilder.Entity("DBLayer.Models.Kasa", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActualUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Dodavatel")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("HotovostStav")
                        .HasColumnType("decimal(12, 2)");

                    b.HasKey("ID");

                    b.HasIndex("ActualUser");

                    b.HasIndex("Dodavatel");

                    b.ToTable("Kasy");
                });

            modelBuilder.Entity("DBLayer.Models.Objednavka", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DatumVznik")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dodavatel")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Odberatel")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Popis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stav")
                        .HasColumnType("int");

                    b.Property<string>("Tvorca")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Dodavatel");

                    b.HasIndex("Odberatel");

                    b.HasIndex("Tvorca");

                    b.ToTable("Objednavky");
                });

            modelBuilder.Entity("DBLayer.Models.PohSkup", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Poznamka")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Spracovana")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Vznik")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("PohSkup");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("DBLayer.Models.PolozkaSkladu", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("DPH_mask")
                        .HasColumnType("decimal(9, 3)");

                    b.Property<string>("MernaJednotka")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Nazov")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("ID");

                    b.ToTable("PolozkySkladu");
                });

            modelBuilder.Entity("DBLayer.Models.PolozkaSkladuMnozstvo", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<decimal>("Cena")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<double>("Mnozstvo")
                        .HasColumnType("float");

                    b.Property<string>("PolozkaSkladu")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Sklad")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("PolozkaSkladu");

                    b.HasIndex("Sklad");

                    b.ToTable("PolozkaSkladuMnozstva");
                });

            modelBuilder.Entity("DBLayer.Models.PolozkaSkladuObjednavky", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<decimal>("Cena")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("Mnozstvo")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("Nazov")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Objednavka")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PolozkaSkladu")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Objednavka");

                    b.HasIndex("PolozkaSkladu");

                    b.ToTable("PolozkySkladuObjednavky");
                });

            modelBuilder.Entity("DBLayer.Models.PrijemkaPolozka", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<decimal>("Cena")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("DPH")
                        .HasColumnType("decimal(9, 3)");

                    b.Property<decimal>("Mnozstvo")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("Nazov")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PolozkaSkladu")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Skupina")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("PolozkaSkladu");

                    b.HasIndex("Skupina");

                    b.ToTable("PrijemkaPolozka");
                });

            modelBuilder.Entity("DBLayer.Models.RecepciaModels.RoomFlag", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateValue")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("NumericValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("StringValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("RoomFlags");
                });

            modelBuilder.Entity("DBLayer.Models.RoomConFlag", b =>
                {
                    b.Property<string>("Room")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoomFlag")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Room", "RoomFlag");

                    b.HasIndex("RoomFlag");

                    b.ToTable("RoomConFlags");
                });

            modelBuilder.Entity("DBLayer.Models.Sklad", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nazov")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Sklady");
                });

            modelBuilder.Entity("DBLayer.Models.SkladObdobie", b =>
                {
                    b.Property<DateTime>("Obdobie")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sklad")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Obdobie", "Sklad");

                    b.HasIndex("Sklad");

                    b.ToTable("SkladObdobi");
                });

            modelBuilder.Entity("DBLayer.Models.SkladUzivatel", b =>
                {
                    b.Property<string>("Sklad")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Uzivatel")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Sklad", "Uzivatel");

                    b.HasIndex("Uzivatel");

                    b.ToTable("SkladUzivatelia");
                });

            modelBuilder.Entity("DBLayer.Models.UniConItemPoklDokladu", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.HasKey("ID");

                    b.ToTable("UniConItemyPoklDokladu");

                    b.HasDiscriminator<string>("Discriminator").HasValue("UniConItemPoklDokladu");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DBLayer.Models.UniConItemPoklDokladuConFlag", b =>
                {
                    b.Property<long>("UniConItemPoklDokladu")
                        .HasColumnType("bigint");

                    b.Property<string>("UniConItemPoklDokladuFlag")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UniConItemPoklDokladu", "UniConItemPoklDokladuFlag");

                    b.HasIndex("UniConItemPoklDokladuFlag");

                    b.ToTable("UniConItemPoklDokladuConFlagy");
                });

            modelBuilder.Entity("DBLayer.Models.UniConItemPoklDokladuFlag", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateValue")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("NumericValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("StringValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("UniConItemPoklDokladuFlagy");
                });

            modelBuilder.Entity("DBLayer.Models.ZmenaMeny", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<decimal>("Kurz")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("MenaDO")
                        .IsRequired()
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("MenaZ")
                        .IsRequired()
                        .HasColumnType("nvarchar(16)");

                    b.Property<decimal>("SumaZ")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("Vznik")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("ZmenyMien");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Xml")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DBLayer.Models.PokladnicnyDoklad", b =>
                {
                    b.HasBaseType("DBLayer.Models.PohSkup");

                    b.Property<long?>("Host")
                        .HasColumnType("bigint");

                    b.Property<string>("Kasa")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("TypPlatby")
                        .HasColumnType("bit");

                    b.HasIndex("Host");

                    b.HasIndex("Kasa");

                    b.ToTable("PokladnicneDoklady");
                });

            modelBuilder.Entity("DBLayer.Models.Prijemka", b =>
                {
                    b.HasBaseType("DBLayer.Models.PohSkup");

                    b.Property<string>("DodaciID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DruhPohybu")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FakturaID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Obdobie")
                        .HasColumnType("datetime2");

                    b.Property<string>("Objednavka")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sklad")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("DruhPohybu");

                    b.HasIndex("Sklad");

                    b.ToTable("Prijemky");
                });

            modelBuilder.Entity("DBLayer.Models.Vydajka", b =>
                {
                    b.HasBaseType("DBLayer.Models.PohSkup");

                    b.Property<string>("DruhPohybu")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Obdobie")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ObdobieDo")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sklad")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SkladDo")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("DruhPohybu");

                    b.HasIndex("Sklad");

                    b.HasIndex("SkladDo");

                    b.ToTable("Vydajka", (string)null);
                });

            modelBuilder.Entity("DBLayer.Models.PolozkaSkladuConItemPoklDokladu", b =>
                {
                    b.HasBaseType("DBLayer.Models.UniConItemPoklDokladu");

                    b.Property<long>("PolozkaSkladuMnozstva")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PredajnaCena")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("PredajneDPH")
                        .HasColumnType("decimal(9, 3)");

                    b.HasIndex("PolozkaSkladuMnozstva")
                        .IsUnique()
                        .HasFilter("[PolozkaSkladuMnozstva] IS NOT NULL");

                    b.HasDiscriminator().HasValue("PolozkaSkladuConItemPoklDokladu");
                });

            modelBuilder.Entity("DBLayer.Models.ReservationConItemPoklDokladu", b =>
                {
                    b.HasBaseType("DBLayer.Models.UniConItemPoklDokladu");

                    b.Property<long>("Reservation")
                        .HasColumnType("bigint");

                    b.HasIndex("Reservation")
                        .IsUnique()
                        .HasFilter("[Reservation] IS NOT NULL");

                    b.HasDiscriminator().HasValue("ReservationConItemPoklDokladu");
                });

            modelBuilder.Entity("DBLayer.Models.Faktura", b =>
                {
                    b.HasOne("DBLayer.Models.Dodavatel", "OdKohoX")
                        .WithMany()
                        .HasForeignKey("OdKoho")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBLayer.Models.PohSkup", "SkupinaX")
                        .WithMany()
                        .HasForeignKey("Skupina");

                    b.Navigation("OdKohoX");

                    b.Navigation("SkupinaX");
                });

            modelBuilder.Entity("DBLayer.Models.HostConFlag", b =>
                {
                    b.HasOne("DBLayer.Models.Host", "HostX")
                        .WithMany()
                        .HasForeignKey("Host")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBLayer.Models.HostFlag", "HostFlagX")
                        .WithMany()
                        .HasForeignKey("HostFlag")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HostFlagX");

                    b.Navigation("HostX");
                });

            modelBuilder.Entity("DBLayer.Models.HostConReservation", b =>
                {
                    b.HasOne("DBLayer.Models.Host", "HostX")
                        .WithMany()
                        .HasForeignKey("Host")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HostX");
                });

            modelBuilder.Entity("DBLayer.Models.ItemPokladDokladu", b =>
                {
                    b.HasOne("DBLayer.Models.PohSkup", "SkupinaX")
                        .WithMany()
                        .HasForeignKey("Skupina")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBLayer.Models.UniConItemPoklDokladu", "UniConItemPoklDokladuX")
                        .WithMany()
                        .HasForeignKey("UniConItemPoklDokladu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkupinaX");

                    b.Navigation("UniConItemPoklDokladuX");
                });

            modelBuilder.Entity("DBLayer.Models.Kasa", b =>
                {
                    b.HasOne("DBLayer.IdentityUserOwn", "ActualUserX")
                        .WithMany()
                        .HasForeignKey("ActualUser");

                    b.HasOne("DBLayer.Models.Dodavatel", "DodavatelX")
                        .WithMany()
                        .HasForeignKey("Dodavatel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActualUserX");

                    b.Navigation("DodavatelX");
                });

            modelBuilder.Entity("DBLayer.Models.Objednavka", b =>
                {
                    b.HasOne("DBLayer.Models.Dodavatel", "DodavatelX")
                        .WithMany()
                        .HasForeignKey("Dodavatel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBLayer.Models.Dodavatel", "OdberatelX")
                        .WithMany()
                        .HasForeignKey("Odberatel")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DBLayer.IdentityUserOwn", "TvorcaX")
                        .WithMany()
                        .HasForeignKey("Tvorca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DodavatelX");

                    b.Navigation("OdberatelX");

                    b.Navigation("TvorcaX");
                });

            modelBuilder.Entity("DBLayer.Models.PolozkaSkladuMnozstvo", b =>
                {
                    b.HasOne("DBLayer.Models.PolozkaSkladu", "PolozkaSkladuX")
                        .WithMany()
                        .HasForeignKey("PolozkaSkladu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBLayer.Models.Sklad", "SkladX")
                        .WithMany()
                        .HasForeignKey("Sklad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PolozkaSkladuX");

                    b.Navigation("SkladX");
                });

            modelBuilder.Entity("DBLayer.Models.PolozkaSkladuObjednavky", b =>
                {
                    b.HasOne("DBLayer.Models.Objednavka", "ObjednavkaX")
                        .WithMany()
                        .HasForeignKey("Objednavka")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBLayer.Models.PolozkaSkladu", "PolozkaSkladuX")
                        .WithMany()
                        .HasForeignKey("PolozkaSkladu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ObjednavkaX");

                    b.Navigation("PolozkaSkladuX");
                });

            modelBuilder.Entity("DBLayer.Models.PrijemkaPolozka", b =>
                {
                    b.HasOne("DBLayer.Models.PolozkaSkladu", "PolozkaSkladuX")
                        .WithMany()
                        .HasForeignKey("PolozkaSkladu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBLayer.Models.PohSkup", "SkupinaX")
                        .WithMany()
                        .HasForeignKey("Skupina")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PolozkaSkladuX");

                    b.Navigation("SkupinaX");
                });

            modelBuilder.Entity("DBLayer.Models.RoomConFlag", b =>
                {
                    b.HasOne("DBLayer.Models.RecepciaModels.RoomFlag", "RoomFlagX")
                        .WithMany()
                        .HasForeignKey("RoomFlag")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomFlagX");
                });

            modelBuilder.Entity("DBLayer.Models.SkladObdobie", b =>
                {
                    b.HasOne("DBLayer.Models.Sklad", "SkladX")
                        .WithMany()
                        .HasForeignKey("Sklad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkladX");
                });

            modelBuilder.Entity("DBLayer.Models.SkladUzivatel", b =>
                {
                    b.HasOne("DBLayer.Models.Sklad", "SkladX")
                        .WithMany()
                        .HasForeignKey("Sklad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBLayer.IdentityUserOwn", "UzivatelX")
                        .WithMany()
                        .HasForeignKey("Uzivatel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkladX");

                    b.Navigation("UzivatelX");
                });

            modelBuilder.Entity("DBLayer.Models.UniConItemPoklDokladuConFlag", b =>
                {
                    b.HasOne("DBLayer.Models.UniConItemPoklDokladu", "UniConItemPoklDokladuX")
                        .WithMany()
                        .HasForeignKey("UniConItemPoklDokladu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBLayer.Models.UniConItemPoklDokladuFlag", "UniConItemPoklDokladuFlagX")
                        .WithMany()
                        .HasForeignKey("UniConItemPoklDokladuFlag")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UniConItemPoklDokladuFlagX");

                    b.Navigation("UniConItemPoklDokladuX");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DBLayer.IdentityUserOwn", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DBLayer.IdentityUserOwn", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBLayer.IdentityUserOwn", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DBLayer.IdentityUserOwn", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DBLayer.Models.PokladnicnyDoklad", b =>
                {
                    b.HasOne("DBLayer.Models.Host", "HostX")
                        .WithMany()
                        .HasForeignKey("Host");

                    b.HasOne("DBLayer.Models.Kasa", "KasaX")
                        .WithMany()
                        .HasForeignKey("Kasa");

                    b.Navigation("HostX");

                    b.Navigation("KasaX");
                });

            modelBuilder.Entity("DBLayer.Models.Prijemka", b =>
                {
                    b.HasOne("DBLayer.Models.DruhPohybu", "DruhPohybuX")
                        .WithMany()
                        .HasForeignKey("DruhPohybu");

                    b.HasOne("DBLayer.Models.Sklad", "SkladX")
                        .WithMany()
                        .HasForeignKey("Sklad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DruhPohybuX");

                    b.Navigation("SkladX");
                });

            modelBuilder.Entity("DBLayer.Models.Vydajka", b =>
                {
                    b.HasOne("DBLayer.Models.DruhPohybu", "DruhPohybuX")
                        .WithMany()
                        .HasForeignKey("DruhPohybu");

                    b.HasOne("DBLayer.Models.PohSkup", null)
                        .WithOne()
                        .HasForeignKey("DBLayer.Models.Vydajka", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBLayer.Models.Sklad", "SkladX")
                        .WithMany()
                        .HasForeignKey("Sklad")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DBLayer.Models.Sklad", "SkladDoX")
                        .WithMany()
                        .HasForeignKey("SkladDo")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DruhPohybuX");

                    b.Navigation("SkladDoX");

                    b.Navigation("SkladX");
                });

            modelBuilder.Entity("DBLayer.Models.PolozkaSkladuConItemPoklDokladu", b =>
                {
                    b.HasOne("DBLayer.Models.PolozkaSkladuMnozstvo", "PolozkaSkladuMnozstvaX")
                        .WithMany()
                        .HasForeignKey("PolozkaSkladuMnozstva")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PolozkaSkladuMnozstvaX");
                });
#pragma warning restore 612, 618
        }
    }
}
