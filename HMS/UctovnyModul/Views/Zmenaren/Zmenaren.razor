@namespace UctovnyModul
@page "/Zmenaren"
@inherits TransientHoldedComp<ZmenarenViewModel>
@using Microsoft.AspNetCore.Components.Forms



@if (!ViewModel.Nacitavanie && ViewModel.ZoznamCurrencies != null)
{
    <CustomModal @ref="cuscreatetrans"
                 ID="cuscreatetrans"
                 SizeInRem="50"
                 OneButtonOnly="true"
                 Header="Vytvorenie prevodu">
        <BODY>
            @if (ViewModel.ChybaPriNacitavani)
            {
                <label>Nastala chyba pri načitavaní externej služby. Skúste reštartovať program.</label>
            }
            else
            {
                <div class="container">
                    <div class="row">
                        <div class="col-6">
                            <div class="row">
                                <div class="col-5">
                                    <label>Prijatá&nbsp;mena</label>
                                    <input type="text" class="form-control" disabled value="@ViewModel.NovaTransakcia.MenaZ" />
                                </div>
                                <div class="col-1">
                                    <div style="height:24px"></div>
                                    <BtnFind OnClick="OpenPick"></BtnFind>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-5">
                                    <label>Prijatá&nbsp;suma</label>
                                    <input type="number" step="0.1" class="form-control" @bind="@ViewModel.NovaTransakcia.SumaZ" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-5">
                                    <label>Kurz</label>
                                    <input type="text" class="form-control" disabled value="@ViewModel.NovaTransakcia.Kurz.ToString("F3") @(ViewModel.ZoznamCurrencies?.FirstOrDefault(x => x.Code == ViewModel.NovaTransakcia.MenaZ)?.Symbol ?? "")" />
                                </div>
                            </div>
                        </div>

                        <div class="col-6">
                            <div class="row">
                                <div class="col-5">
                                    <label>Vydávaná&nbsp;mena</label>
                                    <input type="text" class="form-control" disabled value="@ViewModel.NovaTransakcia.MenaDO" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-5">
                                    <label>Vydaná&nbsp;suma</label>
                                    <input type="text" step="0.1" class="form-control" disabled value="@ViewModel.NovaTransakcia.SumaDO.ToString("F2") @(ViewModel.ZoznamCurrencies?.FirstOrDefault(x => x.Code == ViewModel.NovaTransakcia.MenaDO)?.Symbol ?? "")" />
                                </div>
                            </div>
                        </div>

                    </div>

                    <div class="row">
                        <div class="col-4"></div>
                        <div class="col-8">
                            <div class="btn-group" role="group">
                                <ButtonBasic type="button" class="btn btn-primary" disabled="@(!ViewModel.CheckIfOk())" onclick="FindRate">Nájsť&nbsp;kurz</ButtonBasic>
                                <ButtonBasic type="button" class="btn btn-primary" disabled="@(!ViewModel.CheckIfOk() || ViewModel.NovaTransakcia.Kurz == 0)" onclick="ProcessTransaction"><IconTextCreate></IconTextCreate></ButtonBasic>
                            </div>
                        </div>
                    </div>
                </div>
            }

        </BODY>
    </CustomModal>

    <ItemFinderTable T="string"
                     @ref="iftmena"
                     ColNames="@(new() { "Mena" })"
                     ColValues="@ViewModel.ZoznamCurrencies.Where(x => x.Code != "EUR").Select(x => x.Code).ToList()"
                     SizeInRem="30"
                     Header="Výber meny"
                     ID="iftmena"
                     CutOffTail="true">
    </ItemFinderTable>
}

<InfoModal @ref="InfoModSaved" ID="infosaved"
           Text="Zmeny boli uložené." />

<ApproveModal @ref=ModDel ID="deletemodal"
              Text="Naozaj chcete odstrániť tento riadok?<br>POZOR môžu sa vymazať prvky, ktoré sú spojené s touto položkou!"
              FuncOnSucc="EventCallback.Empty"
              FuncOnDiss="EventCallback.Empty">
</ApproveModal>

<div class="container maxwidth95">
    <div class="row">
        <div class="row ">
            <div class="col-12 text-center">
                <h1>Zmenáreň</h1>
            </div>
        </div>
        <div class="row pb-1">
            <div class="col-3 d-flex justify-content-bottom mb-2">
                <SearchManualInput ID="srchinput" Header="Vyhľadaj doklad..." OnFilterRequest="(e) => ViewModel.ComplexTable?.FilterResults(e) ?? Task.CompletedTask" />
            </div>

            <div class="col-9">
                <div class="btn-group" role="group">
                    <ButtonBasic type="button" class="btn btn-secondary" onclick="Close"><IconTextClose></IconTextClose></ButtonBasic>
                    <ButtonBasic onclick="Create" type="button" class="btn btn-primary"> <IconTextCreate></IconTextCreate></ButtonBasic>
                </div>
            </div>

            <div class="row">
                <div id="@ViewModel.ComplexTable?.ID_scrollbar" class="col-12" style="max-height: 78vh; max-width: 95vw; overflow: auto; ">
                    <ComplexTable @ref="ViewModel.ComplexTable"
                                  ID="complextable"
                                  T="DBLayer.Models.ZmenaMeny"
                                  Items="ViewModel.ZoznamPoloziek"
                                  LoadingItems="ViewModel.Nacitavanie"
                                  Sticky="true"
                                  ParentStateHasChanged="StateHasChanged"
                                  OnRefresh="ViewModel.NacitajZoznamy"
                                  CollectionChanged="ViewModel.OnCollectionChanged"
                                  SetTableSettings="@((true, tableSettings, null))">
                    </ComplexTable>
                </div>
            </div>

        </div>
    </div>

</div>


@code {
    ItemFinderTable<string> iftmena;
    CustomModal cuscreatetrans;
    ApproveModal ModDel;
    InfoModal InfoModSaved;

    List<TableColumnTemplate<DBLayer.Models.ZmenaMeny>> tableSettings = new()
{
        new () { ID_Prop = nameof(DBLayer.Models.ZmenaMeny.Vznik), HeaderValue = "Vznik", CellValue = (item) => item.Vznik.ToString("dd.MM.yyyy HH:mm:ss") },
        new () { ID_Prop = nameof(DBLayer.Models.ZmenaMeny.MenaZ), HeaderValue = "Prijatá mena", CellValue = (item) => item.MenaZ },
        new () { ID_Prop = nameof(DBLayer.Models.ZmenaMeny.MenaDO), HeaderValue = "Vydatá mena", CellValue = (item) => item.MenaDO },
        new () { ID_Prop = nameof(DBLayer.Models.ZmenaMeny.Kurz), HeaderValue = "Kurz", CellValue = (item) => Math.Round(item.Kurz, 3).ToString("F3", System.Globalization.CultureInfo.InvariantCulture)  },
        new () { ID_Prop = nameof(DBLayer.Models.ZmenaMeny.SumaZ), HeaderValue = "Prijatá suma", CellValue = (item) => Math.Round(item.SumaZ, 3).ToString("F3", System.Globalization.CultureInfo.InvariantCulture)  },
         new () { ID_Prop = nameof(DBLayer.Models.ZmenaMeny.SumaDO), HeaderValue = "Vydatá suma", CellValue = (item) => Math.Round(item.SumaDO, 3).ToString("F3", System.Globalization.CultureInfo.InvariantCulture)  },
    };

    protected override void OnInitializedMustHave()
    {
        if (ViewModel.ValidateUserD())
        {
            tableSettings.Add(new()
            {
                Placeholder = (item) => new RenderFragmentTemplate(typeof(ButtonRemove), new RenderFragmentAttribute("onclick", async () => await Delete(item)), new RenderFragmentAttribute("Disabled", !(ViewModel.MoznoVymazat(item))))
            });
        }
    }

    protected override void OnInitializedTransient()
    {
        if (!ViewModel.ValidateUser())
        {
            Navigator.NavigateTo(Navigator.RemoveLastUrl());
            return;
        }
    }

    protected override async Task OnInitializedTransientAsync()
    {
        if (!ViewModel.ValidateUser())
        {
            return;
        }
        await ViewModel.NacitajZoznamy();
    }

    public void Close()
    {
        Navigator.NavigateTo(Navigator.RemoveLastUrl());
    }

    public async Task Create()
    {
        SetStartConditionOnVisit();
        await cuscreatetrans.OpenModal(true);
    }

    public async Task Delete(DBLayer.Models.ZmenaMeny item)
    {
        if (ViewModel.MoznoVymazat(item))
        {
            if (await ModDel.OpenModal(true))
            {
                ViewModel.Vymazat(item);
                StateHasChanged();
            }
        }
    }

    public async Task OpenPick()
    {
        if (await iftmena.OpenModal(true))
        {
            var res = iftmena.OutSelection.FirstOrDefault();
            var found = ViewModel.ZoznamCurrencies.FirstOrDefault(x => x.Code == res);
            if (found != null)
            {
                ViewModel.NovaTransakcia.MenaZ = found.Code;
            }
        }
    }

    public async Task ProcessTransaction()
    {
        CascadingService.Nacitavanie = true;
        if (ViewModel.SpracujNovuTransakciu())
        {
            await InfoModSaved.OpenModal(true);
            cuscreatetrans.CloseModalExtern();
        }
        CascadingService.Nacitavanie = false;
    }

    public void FindRate()
    {
        CascadingService.Nacitavanie = true;
        var result = ViewModel.GetCurrencyApiResponse();
        if (result != null)
        {
            if (result.Data.TryGetValue("EUR", out CurrencyValue? eur))
            {
                if (eur != null)
                {
                    ViewModel.NovaTransakcia.Kurz = Math.Round(eur.Value, 3);
                }
            }
        }
        CascadingService.Nacitavanie = false;
    }

}
