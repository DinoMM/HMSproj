@namespace UctovnyModul
@page "/UniConItemy"
@inherits TransientHoldedComp<UniConItemyViewModel>


<ApproveModal @ref=AprovMod ID="deletemodal"
              Text="Naozaj chcete odstrániť tento riadok?<br>POZOR môžu sa vymazať prvky, ktoré sú spojené s touto položkou!"
              FuncOnSucc="EventCallback.Empty"
              FuncOnDiss="EventCallback.Empty">
</ApproveModal>

<ItemFinderTable T="string"
                 @ref="ifttype"
                 ID="itftype"
                 ColNames="@(new(){"Typ"})"
                 ColValues="ViewModel.TypyList()"
                 SizeInRem="30"
                 Header="Filter podľa typu">
</ItemFinderTable>

<div class="container maxwidth95">

    <div class="row pb-1">

        <div class="col-3 d-flex justify-content-bottom mb-2">
            <SearchManualInput ID="srchinput" Header="Vyhľadaj položku..." OnFilterRequest="(e) => ViewModel.ComplexTable?.FilterResults(e) ?? Task.CompletedTask" />
        </div>

        <div class="col-9">
            <div class="btn-group" role="group">
                <button type="button" class="btn btn-secondary" @onclick="Close"><IconTextClose></IconTextClose></button>
                <button @onclick="Create" type="button" disabled="@(!ViewModel.ValidateUserCRUD())" class="btn btn-primary"><IconTextCreate></IconTextCreate></button>
                <button type="button" @onclick="() => Open(marked)" disabled="@(marked == null || !ViewModel.ValidateUserCRUD())" class="btn btn-primary"><IconTextOpen></IconTextOpen></button>
                <button type="button" class="btn btn-info" @onclick="FindTyp">Typ:&nbsp;@ViewModel.GetTypNazov()</button>

            </div>
        </div>

        <div class="col-1"></div>
    </div>

    <div class="row">
        <div class="col-1"></div>
        <div id="@ViewModel.ComplexTable?.ID_scrollbar" class="col-12" style="max-height: 80vh; max-width: 95vw; overflow: auto; ">
            <ComplexTable @ref="ViewModel.ComplexTable"
                          ID="complextable"
                          T="DBLayer.Models.UniConItemPoklDokladu"
                          Items="ViewModel.ZoznamPoloziek"
                          LoadingItems="ViewModel.Nacitavanie"
                          Sticky="true"
                          Selectable="true"
                          ParentStateHasChanged="StateHasChanged"
                          OnRefresh="ViewModel.NacitajZoznamy"
                          CollectionChanged="ViewModel.OnCollectionChanged"
                          OnDbClick="(item) => Open(item)"
                          SetTableSettings="@((true, tableSettings, null))">
            </ComplexTable>
        </div>

    </div>
</div>

@code {

    private DBLayer.Models.UniConItemPoklDokladu? marked { get => ViewModel?.ComplexTable?.Marked; }
    private ApproveModal AprovMod = new();
    private ItemFinderTable<string> ifttype = new();

    List<TableColumnTemplate<DBLayer.Models.UniConItemPoklDokladu>> tableSettings = new()
{
        new () { ID_Prop = nameof(DBLayer.Models.UniConItemPoklDokladu.ID), HeaderValue = "ID spojenia", CellValue = (item) => item.ID.ToString() },
        new () { ID_Prop = "getid", HeaderValue = "ID", CellValue = (item) => item.GetID(), CellConvert = ((item) => item.GetID(), typeof(string)) },
        new () { ID_Prop = "gettypeuni", HeaderValue = "Typ", CellValue = (item) => item.GetTypeUni(), CellConvert = ((item) => item.GetTypeUni(), typeof(string)), Visible = false },
        new () { ID_Prop = "getnameuni", HeaderValue = "Názov", CellValue = (item) => item.GetNameUni(), CellConvert = ((item) => item.GetNameUni(), typeof(string)) },
        new () { ID_Prop = "getcenauni", HeaderValue = "Cena", CellValue = (item) => Math.Round(item.GetCenaUni(), 2).ToString("F2", System.Globalization.CultureInfo.InvariantCulture), CellConvert = ((item) => Math.Round(item.GetCenaUni(), 2), typeof(decimal)) },
    };

    protected override void OnInitializedMustHave()
    {
        tableSettings.Insert(4, new() { ID_Prop = "tableheader", HeaderValue = ViewModel.GetHeaderTable(), CellValue = (item) => ViewModel.GetValTable(item), CellConvert = ((item) => ViewModel.GetValTable(item), typeof(string)) });

        if (ViewModel.ValidateUserCRUD())
        {
            tableSettings.Add(new()
            {
                Placeholder = (item) => new RenderFragmentTemplate(typeof(ButtonRemove), new RenderFragmentAttribute("onclick", async () => await Delete(item)), new RenderFragmentAttribute("Disabled", !(ViewModel.MoznoVymazat(item))), new RenderFragmentAttribute("TooltipMessage", "Nemožno vymazať túto položku, lebo je spojená s dokladom."))
            });
        }
    }

    protected override void OnInitializedTransient()
    {
        if (!ViewModel.ValidateUser())
        {
            Navigator.NavigateTo(Navigator.RemoveLastUrl());
            return;
        }
    }

    protected override async Task OnInitializedTransientAsync()
    {
        if (!ViewModel.ValidateUser())
        {
            return;
        }
        await ViewModel.NacitajZoznamy();
    }

    protected override void OnAfterRenderTransient(bool firstRender)
    {
        if (firstRender)
        {
            //var tabc = ViewModel.ComplexTable?.TableSettings?.FirstOrDefault(x => x.ID_Prop == "tableheader");
            var tabc = tableSettings.FirstOrDefault(x => x.ID_Prop == "tableheader");
            if (tabc != null)
            {
                tabc.HeaderValue = ViewModel.GetHeaderTable();
                StateHasChanged();
            }
        }
    }

    public void Close()
    {
        Navigator.NavigateTo(Navigator.RemoveLastUrl());
    }

    public async Task Open(DBLayer.Models.UniConItemPoklDokladu item)
    {
        if (item != null)
        {
            if (ViewModel.ValidateUserCRUD())
            {
                objectHolder.Add(item);
                Navigator.NavigateTo(Navigator.AddNextUrl("/CRUUniItem"));
            }
        }
    }

    public void Create()
    {
        if (ViewModel.ValidateUserCRUD())
        {
            SetStartConditionOnVisit();
            Navigator.NavigateTo(Navigator.AddNextUrl("/CRUUniItem"));
        }
    }

    public async Task Delete(DBLayer.Models.UniConItemPoklDokladu item)
    {
        if (ViewModel.MoznoVymazat(item))
        {
            if (await AprovMod.OpenModal(true))
            {
                ViewModel.Vymazat(item);
                StateHasChanged();
            }
        }
    }

    public async Task FindTyp()
    {
        if (await ifttype.OpenModal(true))
        {
            await ViewModel.SpravujZmenuTypu(ifttype.OutSelection.FirstOrDefault());
            ViewModel.ComplexTable.SetMarkedNull();
            ViewModel.ComplexTable.TableSettings.FirstOrDefault(x => x.ID_Prop == "tableheader").HeaderValue = ViewModel.GetHeaderTable();
        }
    }

}

