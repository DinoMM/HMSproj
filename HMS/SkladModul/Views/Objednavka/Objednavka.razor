@namespace SkladModul
@page "/Objednavka"
@inherits TransientHoldedComp<ObjednavkaViewModel>
@inject ObjectHolder Holder

@using OBJ = DBLayer.Models.Objednavka
<style>
    .button-fixed-width {
        max-width: 120px;
    }
</style>

<ApproveModal @ref=AprovMod ID="deletemodal"
              Text="Naozaj chcete odstrániť tento riadok?"
              FuncOnSucc="EventCallback.Empty"
              FuncOnDiss="EventCallback.Empty">
</ApproveModal>
<ComplexItemFinderTable @ref="iftcpoloz"
                        ID="iftcpoloz"
                        T="DBLayer.Models.PolozkaSkladu"
                        ButtonPosition="true"
                        Header="Výber položky skladu"
                        SizeInRem="75"
                        ParentStateHasChanged="StateHasChanged"
                        YesNoButtonText="@(("Vybrať", "Zrušiť"))"
                        SetTableSettings="@((true, polozkytableSettings, null))">
</ComplexItemFinderTable>
<ComplexItemFinderTable @ref="iftcobj"
                        ID="iftcobj"
                        T="DBLayer.Models.Objednavka"
                        ButtonPosition="true"
                        Header="Nájdené objednávky"
                        SizeInRem="75"
                        OneButtonOnly="true"
                        ParentStateHasChanged="StateHasChanged"
                        Selectable="false"
                        SetTableSettings="@((true, tableSettings.Take(tableSettings.Count - 1).ToList(), null))">
</ComplexItemFinderTable>
<div class="container maxwidth95">
    <div class="row pb-1">
        <div class="col-3 mb-2">
            <SearchManualInput ID="srchinput" Header="Vyhľadaj objednávku..." OnFilterRequest="(e) => ViewModel.ComplexTable?.FilterResults(e) ?? Task.CompletedTask" />
        </div>
        <div class="col-9 autooverflowx">
            <div class="row">
                <div class="btn-group" role="group">
                    <button class="btn btn-secondary noflex" type="button" @onclick="@(() => Navigator.NavigateTo(Navigator.RemoveLastUrl()))">
                        <IconTextClose></IconTextClose>
                    </button>
                    <button class="btn btn-primary noflex" type="button" @onclick="@(() => {SetStartConditionOnVisit(); Navigator.NavigateTo(Navigator.AddNextUrl("/AddObj")); })">
                        <IconTextCreate></IconTextCreate>
                    </button>
                    <button class="btn btn-primary noflex" disabled=@(!IsChecked()) @onclick=@(() => OpenOBJ(marked)) type="button">
                        <IconTextOpen></IconTextOpen>
                    </button>
                    <ButtonBasic ID="findobjbttn" Class="btn btn-primary button-fixed-width" Disabled="ViewModel.Nacitavanie" OnClick="FindObjByItem" Tooltip="@(("bottom", "Vyhľadať objednávky podľa položky"))"><IconText Icon="bi-search">Vyhľadať</IconText></ButtonBasic>
                    

                </div>
            </div>
        </div>
        <div class="col-1"></div>
    </div>

    <div class="row">
        @*<div class="col-1"></div>*@
        <div id="@ViewModel.ComplexTable?.ID_scrollbar" class="col-12" style="max-height: 80vh; max-width: 95vw; overflow: auto; ">
            <ComplexTable @ref="ViewModel.ComplexTable"
                          ID="complextable"
                          T="OBJ"
                          Items="ViewModel.ZoznamPoloziek"
                          LoadingItems="ViewModel.Loading"
                          Sticky="true"
                          Selectable="true"
                          ParentStateHasChanged="StateHasChanged"
                          OnRefresh="ViewModel.NacitajZoznamy"
                          OnDbClick="(item) => OpenOBJ(item)"
                          CollectionChanged="ViewModel.OnCollectionChanged"
                          SetTableSettings="@((true, tableSettings, null))">
                <AdditionToolbar>
                    <button id="openpdf" type="button" class="btn btn-outline-dark p-1 border-0 border-start border-end widthToolbar"
                            data-bs-toggle="tooltip"
                            data-bs-placement="bottom"
                            data-bs-title="Otvoriť vybranú objednávku ako PDF"
                            disabled="@(!IsChecked() || ViewModel.PdfLoading)"
                            @onclick="@GeneratePDF">
                        <IconText Icon="bi-filetype-pdf"></IconText>
                        @if (ViewModel.PdfLoading)
                        {
                            <SpinnerLoading ExtraSmall="false" />
                        }
                    </button>
                    <button id="copy" type="button" class="btn btn-outline-dark p-1 border-0 border-start border-end widthToolbar"
                            data-bs-toggle="tooltip"
                            data-bs-placement="bottom"
                            data-bs-title="Duplikovať vybranú objednávku ako novú"
                            disabled="@(!IsChecked() || ViewModel.Nacitavanie)"
                            @onclick="() => ViewModel.Duplicate(marked)">
                        <IconText Icon="bi-copy"></IconText>
                    </button>

                </AdditionToolbar>
            </ComplexTable>
        </div>
        <div class="col-1"></div>
    </div>

    <div class="row">
        <div class="col-12"></div>
    </div>

</div>



@code {

    ApproveModal AprovMod = new();
    OBJ? marked { get => ViewModel?.ComplexTable?.Marked; }
    ComplexItemFinderTable<DBLayer.Models.PolozkaSkladu> iftcpoloz;
    ComplexItemFinderTable<DBLayer.Models.Objednavka> iftcobj;

    List<TableColumnTemplate<OBJ>> tableSettings = new()
{
        new () { ID_Prop = nameof(OBJ.ID), HeaderValue = "ID", CellValue = (item) => item.ID },
        new () { ID_Prop = nameof(OBJ.DodavatelX) + "1", HeaderValue = "Dodávateľ", CellValue = (item) => item.DodavatelX.Nazov, CellConvert = ((item) => item.DodavatelX.Nazov, typeof(string)) },
        new () { ID_Prop = nameof(OBJ.DodavatelX) + "2", HeaderValue = "IČO Dodávateľa", CellValue = (item) => item.DodavatelX.ICO, CellConvert = ((item) => item.DodavatelX.ICO, typeof(string)), Visible = false },
        new () { ID_Prop = nameof(OBJ.Stav), HeaderValue = "Stav", CellValue = (item) => item.Stav.ToString(), SelectionList = Enum.GetNames(typeof(DBLayer.Models.StavOBJ)).ToList() },
        new () { ID_Prop = nameof(OBJ.TvorcaX), HeaderValue = "Tvorca", CellValue = (item) => item.TvorcaX.Surname, CellConvert = ((item) => item.TvorcaX.Surname, typeof(string)) },
        new () { ID_Prop = nameof(OBJ.DatumVznik), HeaderValue = "Dátum vytvorenia", CellValue = (item) => item.DatumVznik.ToString("dd.MM.yyyy") },
         new () { ID_Prop = nameof(OBJ.Popis), HeaderValue = "Popis", CellValue = (item) => item.Popis ?? "", Visible = false},

    };

    List<TableColumnTemplate<DBLayer.Models.PolozkaSkladu>> polozkytableSettings = new()
{
        new () { ID_Prop = nameof(DBLayer.Models.PolozkaSkladu.ID), HeaderValue = "ID", CellValue = (item) => item.ID },
        new () { ID_Prop = nameof(DBLayer.Models.PolozkaSkladu.Nazov), HeaderValue = "Názov", CellValue = (item) => item.Nazov },
        new () { ID_Prop = nameof(DBLayer.Models.PolozkaSkladu.MernaJednotka), HeaderValue = "Merná jendotka", CellValue = (item) => item.MernaJednotka },
        new () { ID_Prop = nameof(DBLayer.Models.PolozkaSkladu.Cena), HeaderValue = "Cena", CellValue = (item) => item.Cena.ToString("F3", System.Globalization.CultureInfo.InvariantCulture)},
        new () { ID_Prop = nameof(DBLayer.Models.PolozkaSkladu.DPH), HeaderValue = "DPH", CellValue = (item) => item.DPH.ToString(), Visible = false },
        new () { ID_Prop = nameof(DBLayer.Models.PolozkaSkladu.CenaDPH), HeaderValue = "Cena s DPH", CellValue = (item) => item.CenaDPH.ToString("F3", System.Globalization.CultureInfo.InvariantCulture), Visible = false },
    };

    protected override void OnInitializedMustHave()
    {
        tableSettings.Add(new()
        {
            Placeholder = (item) => new RenderFragmentTemplate(typeof(ButtonRemove), new RenderFragmentAttribute("onclick", async () => await Delete(item)), new RenderFragmentAttribute("Disabled", !(ViewModel.MoznoVymazat(item))))
        });
    }

    protected override async Task OnInitializedTransientAsync()
    {
        await ViewModel.NacitajZoznamy();
    }

    private async Task Delete(OBJ item)
    {
        if (await AprovMod.OpenModal(true))
        {
            ViewModel.Vymazat(item);
            StateHasChanged();
        }
    }

    private async Task OpenOBJ(OBJ? item)
    {
        if (item != null)
        {
            //ViewModel.OtvorOBJCommand.Execute(item);
            Holder.Container.Add(item);
            Navigator.NavigateTo(Navigator.AddNextUrl("/AddObj"));
        }
    }

    private bool IsChecked()
    {
        return (marked != null);
    }

    private async Task GeneratePDF()
    {
        if (marked != null)
        {
            await ViewModel.VytvorPDF(marked);
        }
    }

    private async Task FindObjByItem()
    {
        iftcpoloz.SetItemsFromList(await ViewModel.GetPolozkaItems());
        await iftcpoloz.OpenModal(async (ans) =>
        {
            if (ans)
            {
                iftcobj.SetItemsFromList(await ViewModel.GetObjednavkaItems(iftcpoloz.ComplexTable.Marked));
                await iftcobj.OpenModal(async (ans) => { });
                StateHasChanged();
            }
        });

    }

}
