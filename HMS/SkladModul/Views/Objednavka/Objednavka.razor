@namespace SkladModul
@page "/Objednavka"
@inject ObjednavkaViewModel ViewModel
@inject ObjectHolder Holder

@using Sve.Blazor.InfiniteScroll.Components
@using OBJ = DBLayer.Models.Objednavka

<ApproveModal @ref=AprovMod ID="deletemodal"
              Text="Naozaj chcete odstrániť tento riadok?"
              FuncOnSucc="DeleteCommand"
              FuncOnDiss="EventCallback.Empty">
</ApproveModal>

<div class="container">
    <div class="row g-0">
        <div class="col-1"></div>
        <div class="col-10">
            <div class="row h-25 ">
                <h1 class="text-center">Objednávky</h1>
                <div class="col">
                    <button class="btn btn-primary fixed-size-button mt-3" type="button" @onclick="@(() => Navigator.NavigateTo(Navigator.AddNextUrl("/AddObj")))">➕Pridať objednávku</button>
                </div>
                <div class="col">
                    <button class="btn btn-primary fixed-size-button mt-3 " disabled=@(!IsChecked()) @onclick=@(() => OpenOBJ(marked)) type="button">📩Otvoriť objednávku</button>
                </div>
                <div class="col">
                    <button class="btn btn-primary fixed-size-button mt-3" disabled=@(!IsChecked()) type="button">📄Otvoriť objednávku ako PDF</button>
                </div>
                <div class="col">
                    <button class="btn btn-primary fixed-size-button  mt-3" type="button" @onclick="@(() => Navigator.NavigateTo(Navigator.RemoveLastUrl()))">❌Zavrieť objednávky</button>

                </div>
            </div>
        </div>

        <div class="row">
            <div class="col" style="max-height: 30rem;overflow: auto;">
                <Sve.Blazor.InfiniteScroll.Components.InfiniteScroll ObserverTargetId="observerTarget" ObservableTargetReached="() => ViewModel.NacitajDalsieCommand.Execute(null)">
                    <SimpleTable>
                        <THEAD>
                        <th scope="col">ID</th>
                        <th scope="col">Dodavateľ</th>
                        <th scope="col">Stav</th>
                        <th scope="col">Tvorca</th>
                        <th scope="col">Popis</th>
                        @* <th scope="col">Stav</th> *@
                        <th scope="col">Dátum vytvorenia</th>
                        <th scope="col"></th>
                        @* <th scope="col">Celková cena</th>
        <th scope="col">Celková cena s DPH</th> *@

                        </THEAD>
                        <TBODY>
                            @foreach (var item in ViewModel.ZoznamObjednavok)
                            {

                                <tr @onclick=@(() => marked = item) class="@(marked == item ? "selected-row" : "")" @ondblclick=@(() => OpenOBJ(item)) style="cursor: pointer;">

                                    <td>@item.ID</td>
                                    <td>@item.DodavatelX.Nazov</td>
                                    <td>@item.Stav</td>
                                    <td>@item.TvorcaX.Surname</td>
                                    <td>@item.Popis</td>
                                    <td>@item.DatumVznik.ToShortDateString()</td>
                                    <td><a @onclick=@(() => Delete(item))><i href="#" class="bi bi-x-circle btn btn-danger"></i></a></td>

                                </tr>

                            }
                            <span id="observerTarget"></span>
                        </TBODY>

                    </SimpleTable>
                </Sve.Blazor.InfiniteScroll.Components.InfiniteScroll>
            </div>
        </div>
        <div class="row h-25"></div>

        <div class="col-1"></div>
    </div>
</div>



@code {

    ApproveModal AprovMod = new();
    OBJ? marked;

    private async Task Delete(OBJ item)
    {
        marked = item;
        await AprovMod.OpenModal();
    }

    private void DeleteCommand()
    {
        ViewModel.VymazatCommand.Execute(marked);
        marked = null;
    }

    private void OpenOBJ(OBJ? item)
    {
        if (item != null)
        {
            //ViewModel.OtvorOBJCommand.Execute(item);
            Holder.Container.Add(item.Clone());
            Navigator.NavigateTo(Navigator.AddNextUrl("/AddObj"));
            marked = null;
        }
    }

    private bool IsChecked()
    {
        return (marked != null);
    }

}
