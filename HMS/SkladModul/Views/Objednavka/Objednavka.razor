@namespace SkladModul
@page "/Objednavka"
@inherits TransientHoldedComp<ObjednavkaViewModel>
@inject ObjectHolder Holder

@using OBJ = DBLayer.Models.Objednavka

<ApproveModal @ref=AprovMod ID="deletemodal"
              Text="Naozaj chcete odstrániť tento riadok?"
              FuncOnSucc="DeleteCommand"
              FuncOnDiss="EventCallback.Empty">
</ApproveModal>

<div class="container">
    <div class="row pb-1">
        <div class="col-3 d-flex justify-content-bottom mb-2">
            <SearchManualInput ID="srchinput" Header="Vyhľadaj objednávku..." OnFilterRequest="(e) => ViewModel.Complextable?.FilterResults(e) ?? Task.CompletedTask" />
        </div>
        <div class="col-8">
            <div class="row">
                <div class="btn-group" role="group">
                    <button class="btn btn-secondary" type="button" @onclick="@(() => Navigator.NavigateTo(Navigator.RemoveLastUrl()))">
                        <IconTextClose></IconTextClose>
                    </button>
                    <button class="btn btn-primary" type="button" @onclick="@(() => {SetStartConditionOnVisit(); Navigator.NavigateTo(Navigator.AddNextUrl("/AddObj")); })">
                        <IconTextCreate></IconTextCreate>
                    </button>
                    <button class="btn btn-primary" disabled=@(!IsChecked()) @onclick=@(() => OpenOBJ(marked)) type="button">
                        <IconTextOpen></IconTextOpen>
                    </button>
                    <button class="btn btn-primary" @onclick="GeneratePDF" disabled=@(!IsChecked() || ViewModel.PdfLoading) type="button">
                        <IconText Icon="bi-filetype-pdf">Otvoriť</IconText>
                        @if (ViewModel.PdfLoading)
                        {
                            <SpinnerLoading ExtraSmall="false" />
                        }
                    </button>
                </div>
            </div>
        </div>
        <div class="col-1"></div>
    </div>

    <div class="row">
        @*<div class="col-1"></div>*@
        <div id="@ViewModel.Complextable?.ID_scrollbar" class="col-12" style="max-height: 30rem;overflow: auto;">
            <ComplexTable @ref="ViewModel.Complextable"
                          ID="complextable"
                          T="OBJ"
                          Items="ViewModel.ZoznamObjednavok"
                          LoadingItems="ViewModel.Loading"
                          Sticky="true"
                          Selectable="true"
                          ParentStateHasChanged="StateHasChanged"
                          OnRefresh="ViewModel.NacitajZoznam"
                          SetTableSettings="@((true, tableSettings, null))">

            </ComplexTable>
        </div>
        <div class="col-1"></div>
    </div>

    <div class="row">
        <div class="col-12"></div>
    </div>

</div>



@code {

        ApproveModal AprovMod = new();
        OBJ? marked { get => ViewModel?.Complextable?.Marked; }

        List<TableColumnTemplate<OBJ>> tableSettings = new()
{
        new () { ID_Prop = nameof(OBJ.ID), HeaderValue = "ID", CellValue = (item) => item.ID },
        new () { ID_Prop = nameof(OBJ.DodavatelX), HeaderValue = "Dodávateľ", CellValue = (item) => item.DodavatelX.Nazov, CellConvert = ((item) => item.DodavatelX.Nazov, typeof(string)) },
        new () { ID_Prop = nameof(OBJ.Stav), HeaderValue = "Stav", CellValue = (item) => item.Stav.ToString() },
        new () { ID_Prop = nameof(OBJ.TvorcaX), HeaderValue = "Tvorca", CellValue = (item) => item.TvorcaX.Surname, CellConvert = ((item) => item.TvorcaX.Surname, typeof(string)) },
        new () { ID_Prop = nameof(OBJ.DatumVznik), HeaderValue = "Dátum vytvorenia", CellValue = (item) => item.DatumVznik.ToString("dd.MM.yyyy") },
         new () { ID_Prop = nameof(OBJ.Popis), HeaderValue = "Popis", CellValue = (item) => item.Popis ?? "", Visible = false},
    };

    protected override void OnInitializedMustHave()
    {
        tableSettings.Add(new()
        {
            Placeholder = (item) => new RenderFragmentTemplate(typeof(ButtonRemove), new RenderFragmentAttribute("onclick", () => Delete(item)), new RenderFragmentAttribute("Disabled", !(item.Stav == DBLayer.Models.StavOBJ.Vytvorena ||
                       item.Stav == DBLayer.Models.StavOBJ.Neschvalena ||
                       UserService.LoggedUserRole == DBLayer.RolesOwn.Admin ||
                       UserService.LoggedUserRole == DBLayer.RolesOwn.Riaditel &&
                       item.Stav != DBLayer.Models.StavOBJ.Ukoncena)))
        });
    }

    protected override async Task OnInitializedTransientAsync()
    {
        await ViewModel.NacitajZoznam();
    }

    protected override void OnAfterRenderTransient(bool firstRender)
    {
        if (firstRender)
        {
            GetHolder().StartMethodAsync = async () => await ViewModel.NacitajZoznam();
        }
    }

    private async Task Delete(OBJ item)
    {
        await AprovMod.OpenModal();
    }

    private async Task DeleteCommand()
    {
        ViewModel.VymazatCommand.Execute(marked);
    }

    private void OpenOBJ(OBJ? item)
    {
        if (item != null)
        {
            //ViewModel.OtvorOBJCommand.Execute(item);
            Holder.Container.Add(item);
            Navigator.NavigateTo(Navigator.AddNextUrl("/AddObj"));
        }
    }

    private bool IsChecked()
    {
        return (marked != null);
    }

    private async Task GeneratePDF()
    {
        if (marked != null)
        {
            await ViewModel.VytvorPDF(marked);
        }
    }

}
