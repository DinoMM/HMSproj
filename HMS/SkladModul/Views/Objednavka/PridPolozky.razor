@namespace SkladModul
@page "/Objednavka/AddObj/PridatPolozky"
@using System.Diagnostics
@inject PridPolozkyViewModel ViewModel

<ApproveModal @ref=AprovMod ID="deletemodal"
              Text="Naozaj chcete odstrániť tento riadok?"
              FuncOnSucc="DeleteCommand"
              FuncOnDiss="EventCallback.Empty">
</ApproveModal>
<ApproveModal @ref=AprovModSave ID="savemodal"
              Text="Chcete uložiť zmeny?"
              FuncOnSucc="SaveCommand"
              FuncOnDiss="EventCallback.Empty">
</ApproveModal>
<ApproveModal @ref=AprovModEmpty ID="emptyobjmodal"
              Text="Objednávka je prázdna, chcete ju zrušiť?"
              FuncOnSucc="ViewModel.OdstranCeluObjednavkuCommand.Execute"
              FuncOnDiss="EventCallback.Empty">
</ApproveModal>
<InfoModal @ref="InfoMod" ID="infocantsave"
           Text="Nepodarilo sa uložiť zmeny, skontrolujte objednávku">
</InfoModal>

<ItemFinderTable @ref="itmfindmodal"
                 T="DBLayer.Models.PolozkaSkladu"
                 ColNames="@(new List<string>() { "ID", "Názov", "MJ" })"
                 ColValues="ViewModel.ZoznamPoloziek"
                 MultiSelect="false"
                 KeyAttributeToo="true"
                 ID="itmfind"></ItemFinderTable>

<div class="container">
    <div class="row p-1">Položky objednávky: @ViewModel.Objednavka.ID</div>

    <div class="row h-25">
        <div class="col col-1">
            <button type="button" class="btn btn-secondary" @onclick="Close"><IconTextClose></IconTextClose></button>
        </div>
        <div class="col col-1 me-2">
            <button type="button" class="btn btn-primary" @onclick=@(() => Save(false)) disabled="@(ViewModel.Locked() || !ViewModel.Zmena)"><IconTextSave></IconTextSave></button>
        </div>
    </div>

    <div class="row">
        <div class="col" style="height: 30rem; overflow:auto;">
            <UniComponents.SimpleTable>
                <THEAD>
                <ThSort>ČísloID</ThSort>
                <ThSort>Názov Položky</ThSort>
                <ThSort>Množstvo</ThSort>
                <ThSort>Merná jednotka</ThSort>
                <ThSort>Cena</ThSort>
                <ThSort>Cena s DPH</ThSort>
                <ThSort>Celková Cena</ThSort>
                <ThSort>Celková Cena s DPH</ThSort>
                <th></th>
                </THEAD>
                <TBODY>

                    @foreach (var item in ViewModel.ZoznamObjednavky)

                    {
                        <tr>
                            <td class="col-resize"><input type="text" readonly disabled="disabled" value="@item.PolozkaSkladu" size="8" /></td>
                            <td class="col-resize"><input type="text" disabled="@ViewModel.Locked()" value="@item.Nazov" @onchange=@((ChangeEventArgs arg) => { item.Nazov = arg.Value.ToString(); ViewModel.Zmena = true; } ) /></td>
                            <td class="col-resize"><input type="number" disabled="@ViewModel.Locked()" @bind-value="item.Mnozstvo" @bind-value:event="oninput" @onchange="@(() => ViewModel.Zmena = true)" class="w-75" /></td>
                            <td class="col-resize">@item.PolozkaSkladuX.MernaJednotka</td>
                            <td class="col-resize"><input type="number" disabled="@ViewModel.Locked()" @bind-value="item.Cena" @bind-value:event="oninput" @onchange="@(() => ViewModel.Zmena = true)" step="0.001" class="w-100" /></td>
                            <td class="col-resize">@item.CenaDPH.ToString("F3")</td>
                            <td class="col-resize">@item.CelkovaCena.ToString("F3")</td>
                            <td class="col-resize">@item.CelkovaCenaDPH.ToString("F3")</td>
                            @if (!ViewModel.Locked())
                            {
                                <td><a @onclick=@(() => Delete(item))><i href="#" class="bi bi-x-circle btn btn-danger"></i></a></td>
                            }
                        </tr>
                    }
                    @if (!ViewModel.Locked())
                    {
                        <tr style="position:sticky; bottom: 0;">
                            <td class="col-resize"><input type="text" id="vyhlid" @onchange="ViewModel.VyhladajPolozkuCommand.Execute" @onfocus=@(() => ViewModel.Uprava = true) @onkeydown="HandleKeyDown" @onblur=@(() => ViewModel.Uprava = string.IsNullOrEmpty(ViewModel.NovaPoloz.Nazov)) size="8" /></td>
                            <td class="col-resize"><input type="text" readonly disabled="disabled" @bind="ViewModel.NovaPoloz.Nazov" /> </td>
                            <td class="col-resize">
                                <div class="col col-2">
                                    <button type="button" disabled="@(ViewModel.Uprava || ViewModel.Locked())" @onclick=@(async () => { ViewModel.PridatPolozkuCommand.Execute(null); await ClearInput(); }) class="btn btn-success"><IconText Icon="bi-plus-circle">Pridať položku</IconText></button>
                                </div>
                            </td>
                            <td class="col-resize">@ViewModel.NovaPoloz.PolozkaSkladuX?.MernaJednotka</td>
                            <td class="col-resize">@ViewModel.NovaPoloz.Cena</td>
                            <td class="col-resize"></td>
                            <td class="col-resize"></td>
                            <td class="col-resize"></td>
                            <td class="col-resize"></td>
                        </tr>
                    }
                </TBODY>
            </UniComponents.SimpleTable>
        </div>
    </div>

    <script>window.clearInput = function (inputId) {
            document.getElementById(inputId).value = "";
        }</script>
</div>


@code {
    private bool answer = false;
    private string vyhladavac = "";
    ApproveModal AprovMod = new();
    ApproveModal AprovModSave = new();
    ApproveModal AprovModEmpty = new();
    InfoModal InfoMod = new();
    DBLayer.Models.PolozkaSkladuObjednavky marked;

    ItemFinderTable<DBLayer.Models.PolozkaSkladu> itmfindmodal = new();

    protected override void OnInitialized()
    {
        var founded = objectHolder.Find<DBLayer.Models.Objednavka>();   //pokusi sa ziskat objekt z uloziska -> nevyhadzuje ho z neho
        if (founded != null)
        {
            ViewModel.Objednavka = founded;      //nasla sa existujuca objednavka, nastavujeme model na upravu
            ViewModel.Existujuca = true;
            if (!ViewModel.IsOBJValidna())
            {
                Debug.WriteLine("Objednavka nieje vlozena spravne v PridPolozkyViewModel");
                Navigator.NavigateTo(Navigator.RemoveLastUrl());
                return;
            }
        }
        else
        {
            Debug.WriteLine("Objednavka nieje vlozena spravne v PridPolozkyViewModel");
            Navigator.NavigateTo(Navigator.RemoveLastUrl());
            return;
        }

        ViewModel.NovaPoloz = new();
        ViewModel.LoadZoznamObjednavky();
    }

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.LoadZoznam();
    }

    private async Task Delete(DBLayer.Models.PolozkaSkladuObjednavky poloz)
    {
        marked = poloz;
        await AprovMod.OpenModal();
    }

    private void DeleteCommand()
    {
        ViewModel.VymazatCommand.Execute(marked);
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Tab")
        {
            if (ViewModel.NovaPoloz.Nazov == null)
            {
                await itmfindmodal.PassSearchText(await itmfindmodal.GetInputValue("vyhlid"));
                await itmfindmodal.OpenModal(true);
                if (itmfindmodal.OutSelection.Count != 0)
                {
                    await itmfindmodal.SetInput("vyhlid", itmfindmodal.OutSelection.FirstOrDefault().ID);
                    ViewModel.VyhladajPolozkuCommand.Execute(new ChangeEventArgs() { Value = itmfindmodal.OutSelection.FirstOrDefault().ID });
                }

            }
        }
    }


    private async Task<bool>
Save(bool askUser)  //vrati hodnotu na zaklade toho co uzivatel klikne(true - suhlasi, inak false)
    {
        if (askUser)
        {
            return await AprovModSave.OpenModal(true);
        }
        await SaveCommand();
        return true;        //true lebo ztivatel klikol Uloz
    }

    private async Task SaveCommand()
    {
        ViewModel.UlozCommand.Execute(null);
        if (ViewModel.Zmena)    //ak je stale Zmena true, znamena ze sa ukladanie nepodarilo, inak sa podarilo
        {
            await InfoMod.OpenModal();  //zobrazi sa info ze nieje mozne ulozit objednavku koli chybnym udajom
        }
    }


    private async Task Close() //tlacidlo spat
    {
        if (ViewModel.Locked()) //ak je zamknute tak len odideme
        {
            Navigator.NavigateTo(Navigator.RemoveLastUrl());
            ViewModel.VycistiHodnotyForce();
            return;
        }

        if (ViewModel.Zmena)    //je registrovaná zmena? //ano
        {
            answer = await Save(true);
            if (ViewModel.Zmena)    //je registrovaná zmena? //ano
            {
                if (answer)
                {
                    return; //nic
                }
                else
                {
                    if (ViewModel.IsZoznamEmpty())
                    {
                        answer = await AprovModEmpty.OpenModal(true);
                        if (answer) //ano
                        {
                            if (ViewModel.Deleted)
                            {
                                objectHolder.Remove<DBLayer.Models.Objednavka>();
                                Navigator.RemoveLastUrl();       //prva uroven vzad
                                Navigator.NavigateTo(Navigator.RemoveLastUrl());    //druha uroven vzad
                                ViewModel.VycistiHodnotyForce();
                                return; //koniec
                            }
                        }
                        else //nie
                        {
                            if (ViewModel.VratDoPovodnehoStavu())   //Vratenie, Prazdny? //ano
                            {
                                Navigator.NavigateTo(Navigator.RemoveLastUrl());
                                ViewModel.VycistiHodnotyForce();
                                return; //nic
                            }
                            else //nie
                            {
                                Navigator.NavigateTo(Navigator.RemoveLastUrl());
                                ViewModel.VycistiHodnotyForce();
                                return; //koniec
                            }
                        }
                        return; //nic
                    }
                }
            }
            else //nie
            {
                Navigator.NavigateTo(Navigator.RemoveLastUrl());
                ViewModel.VycistiHodnotyForce();
                return; //koniec
            }
        }
        else //nie
        {
            if (ViewModel.IsZoznamEmpty())
            {
                answer = await AprovModEmpty.OpenModal(true);
                if (answer)
                {
                    if (ViewModel.Deleted)
                    {
                        objectHolder.Remove<DBLayer.Models.Objednavka>();
                        Navigator.RemoveLastUrl();       //prva uroven vzad
                        Navigator.NavigateTo(Navigator.RemoveLastUrl());    //druha uroven vzad
                        ViewModel.VycistiHodnotyForce();
                        return; //koniec
                    }
                }
                //koniec
            }
        }
        Navigator.NavigateTo(Navigator.RemoveLastUrl());
        ViewModel.VycistiHodnotyForce();
    }

    private async Task ClearInput() //vycisti pisacie pole
    {
        await JSRuntime.InvokeVoidAsync("clearInput", "vyhlid");
    }

}
