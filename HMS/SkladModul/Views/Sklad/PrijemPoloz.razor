@namespace SkladModul
@page "/Sklad/Prijem"
@inherits TransientHoldedComp<PrijemPolozViewModel>

<ApproveModal @ref=AprovMod ID="deletemodal"
              Text="Naozaj chcete odstrániť tento riadok?"
              FuncOnSucc="EventCallback.Empty"
              FuncOnDiss="EventCallback.Empty">
</ApproveModal>
<InfoModal @ref="InfoCantDelete" ID="infomodaldelete"
           Text="Nemožno vymazať príjemku lebo obsahuje položky.">
</InfoModal>

<div class="container maxwidth95">

    <div class="row pb-1">
        <div class="col-2">
            <a class="btn btn-secondary" id="uctobd" style="cursor:pointer">Obdobie:@DBLayer.Models.Sklad.ShortFromObdobie(ViewModel.Obdobie) </a>
        </div>
        <div class="col-2">
            <a class="btn btn-secondary" id="skldpick" style="cursor:pointer">Sklad:@ViewModel.Sklad.ID </a>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="row">
                <h2 class="text-center font-weight-bold">Príjem za obdobie</h2>
            </div>
            <div class="row">
                <div class="col-3 d-flex justify-content-bottom mb-2">
                    <SearchManualInput ID="srchinput" Header="Vyhľadaj príjem..." OnFilterRequest="(e) => ViewModel.ComplexTable?.FilterResults(e) ?? Task.CompletedTask" />
                </div>
                <div class="col-9">
                    <div class="btn-group mb-2" role="group">
                        <button @onclick="() => Navigator.NavigateTo(Navigator.RemoveLastUrl())" class="btn btn-secondary" type="button"><IconTextClose></IconTextClose></button>
                        <button @onclick="Create" disabled="@(!ViewModel.IsObdobieActual)" class="btn btn-primary " type="button"><IconTextCreate></IconTextCreate> </button>
                        <button @onclick="() => Open(marked)" disabled="@(marked == null)" class="btn btn-primary  " type="button"><IconTextOpen></IconTextOpen></button>
                    </div>
                </div>
            </div>
        </div>


    </div>

    <div class="row">
        <div id="@ViewModel.ComplexTable?.ID_scrollbar" class="col-12" style="max-height: 78vh; max-width: 95vw; overflow: auto">
            <ComplexTable @ref="ViewModel.ComplexTable"
                          ID="complextable"
                          T="DBLayer.Models.PohSkup"
                          Items="ViewModel.ZoznamPoloziek"
                          LoadingItems="ViewModel.Nacitavanie"
                          Sticky="true"
                          Selectable="true"
                          ParentStateHasChanged="StateHasChanged"
                          OnRefresh="ViewModel.NacitajZoznamy"
                          CollectionChanged="ViewModel.OnCollectionChanged"
                          SetTableSettings="@((true, tableSettings, null))"
                          OnDbClick="(item) => Open(item)">

            </ComplexTable>
        </div>
    </div>

</div>


@code {
    ApproveModal AprovMod = new();
    InfoModal InfoCantDelete = new();
    bool fff = false;
    DBLayer.Models.PohSkup? marked { get => ViewModel?.ComplexTable?.Marked; }

    List<TableColumnTemplate<DBLayer.Models.PohSkup>> tableSettings = new()
{
        new () { ID_Prop = nameof(DBLayer.Models.PohSkup.ID), HeaderValue = "ID", CellValue = (item) => item.ID },
        new () { ID_Prop = nameof(DBLayer.Models.PohSkup.Vznik), HeaderValue = "Vznik", CellValue = (item) => item.Vznik.ToString("dd.MM.yyyy") },
        new () { ID_Prop = nameof(DBLayer.Models.PohSkup.Spracovana), HeaderValue = "OK", CellComponent = (e) => new(typeof(SimpleCheckMarkDiv),new RenderFragmentAttribute("Checked", e.Spracovana)) },
        new () { ID_Prop = nameof(DBLayer.Models.Prijemka.Objednavka), HeaderValue = "Objednávka", CellValue = (item) => item is DBLayer.Models.Prijemka prij ? prij?.Objednavka ?? "" : "", CellConvert = ((item) => item is DBLayer.Models.Prijemka prij ? prij?.Objednavka ?? "" : "" , typeof(string)) },
        new () { ID_Prop = nameof(DBLayer.Models.Prijemka.DodaciID), HeaderValue = "Dodací", CellValue = (item) => item is DBLayer.Models.Prijemka prij ? prij?.DodaciID ?? "" : "", CellConvert = ((item) => item is DBLayer.Models.Prijemka prij ? prij?.DodaciID ?? "" : "" , typeof(string)) },
        new () { ID_Prop = nameof(DBLayer.Models.Prijemka.FakturaID), HeaderValue = "Faktúra", CellValue = (item) => item is DBLayer.Models.Prijemka prij ? prij?.FakturaID ?? "" : "", CellConvert = ((item) => item is DBLayer.Models.Prijemka prij ? prij?.FakturaID ?? "" : "" , typeof(string)) },
        new () { ID_Prop = nameof(DBLayer.Models.Vydajka.Sklad), HeaderValue = "Prevodka z", CellValue = (item) => item is DBLayer.Models.Vydajka vydj ? vydj?.Sklad ?? "" : "", CellConvert = ((item) => item is DBLayer.Models.Vydajka vydj ? vydj?.Sklad ?? "" : "" , typeof(string)) },
        new () { ID_Prop = nameof(DBLayer.Models.Prijemka.DruhPohybu), HeaderValue = "Druh pohybu", CellValue = (item) => item is DBLayer.Models.Prijemka prij ? prij?.DruhPohybu ?? "" : ((DBLayer.Models.Vydajka)item)?.DruhPohybu ?? "", CellConvert = ((item) => item is DBLayer.Models.Prijemka prij ? prij?.DruhPohybu ?? "" : ((DBLayer.Models.Vydajka)item)?.DruhPohybu ?? "" , typeof(string)) },
         new () { ID_Prop = nameof(DBLayer.Models.PohSkup.Poznamka), HeaderValue = "Poznámka", CellValue = (item) => item.Poznamka ?? "", Visible = false },

    };

    protected override void OnInitializedMustHave()
    {
        tableSettings.Insert(2, new()
        {
            ID_Prop = "Obdobie",
            HeaderValue = "Obdobie",
            CellValue = (item) => ViewModel.GetObdobie(item),
            CellConvert = ((item) => ViewModel.GetObdobie(item), typeof(string))

        });
        tableSettings.Add(new()
        {
            Placeholder = (item) => new RenderFragmentTemplate(typeof(ButtonRemove), new RenderFragmentAttribute("onclick", async () => await Delete(item)), new RenderFragmentAttribute("Disabled", !(ViewModel.MoznoVymazat(item))))
        });

        var founded1 = objectHolder.Find<DBLayer.Models.Sklad>();   //pokusi sa ziskat objekt z uloziska
        if (founded1 == null)
        {
            Navigator.NavigateTo(Navigator.RemoveLastUrl());
            return;
        }
        var founded2 = objectHolder.Find<string>();   //pokusi sa ziskat objekt z uloziska
        if (founded2 != null)
        {
            ViewModel.SetProp(founded1, founded2);      //nasla sa existujuca polozka, nastavujeme model na upravu
        }
        else
        {
            Navigator.NavigateTo(Navigator.RemoveLastUrl());
            return;
        }

        TransientHoldCondition("/Sklad");
    }

    protected override async Task OnInitializedTransientAsync()
    {
        //await ViewModel.NacitajZoznamy();

    }

    protected override async Task OnAfterRenderTransientAsync(bool first)
    {
        if (first)
        {
            await ViewModel.NacitajZoznamy();
            StateHasChanged();
        }
    }

    private async Task Open(DBLayer.Models.PohSkup poloz)
    {
        if (poloz is DBLayer.Models.Prijemka)
        {
            objectHolder.Add(poloz);
            Navigator.NavigateTo(Navigator.AddNextUrl("/ModifPrijemka"));
        }
        else  //vydajka
        {
            objectHolder.Add(poloz);
            Navigator.NavigateTo(Navigator.AddNextUrl("/ModifVydajka"));
        }
    }
    private async Task Delete(DBLayer.Models.PohSkup poloz)
    {
        if (await AprovMod.OpenModal(true))
        {
            ViewModel.Vymazat(poloz);
            StateHasChanged();
            //await InfoCantDelete.OpenModal();       //polozka ma polozky, nemozno vymazat
        }
    }
    private void Create()
    {
        SetStartConditionOnVisit();
        Navigator.NavigateTo(Navigator.AddNextUrl("/ModifPrijemka"));
    }

}
