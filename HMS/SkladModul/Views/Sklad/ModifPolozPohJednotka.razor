@namespace SkladModul
@page "/Sklad/Prijem/ModifPrijemka/ModifPolozPrijemka/{ReadOnly:bool}"
@page "/Sklad/Vydaj/ModifVydajka/ModifPolozVydajka/{ReadOnly:bool}"
@page "/Sklad/Prijem/ModifVydajka/ModifPolozVydajka/{ReadOnly:bool}"

@inject ModifPolozPohJednotkaViewModel  ViewModel
@using PohJednotka = DBLayer.Models.PohJednotka
@using PrijemkaPolozka = DBLayer.Models.PrijemkaPolozka

<ApproveModal @ref=AprovMod ID="deletemodal"
              Text="Naozaj chcete odstrániť tento riadok?"
              FuncOnSucc="DeleteCommand"
              FuncOnDiss="EventCallback.Empty">
</ApproveModal>
<ApproveModal @ref=AprovModSave ID="savemodal"
              Text="Chcete uložiť zmeny?"
              FuncOnSucc="SaveCommand"
              FuncOnDiss="EventCallback.Empty">
</ApproveModal>
<ApproveModal @ref=AprovModEmpty ID="emptyobjmodal"
              Text="Zoznam je prázdny, chcete zrušiť skupinu?"
              FuncOnSucc="ViewModel.OdstranCeluSkupinuCommand.Execute"
              FuncOnDiss="EventCallback.Empty">
</ApproveModal>
<InfoModal @ref="InfoMod" ID="infocantsave"
           Text="Nepodarilo sa uložiť zmeny, skontrolujte zoznam">
</InfoModal>
<InfoModal @ref="InfoModListBadValue" ID="infolistisbadvalue"
           Text="Nemožno vydať viacej ako je na sklade:<br>">
</InfoModal>
<ItemFinderTable @ref="itmfindmodal"
                 T="DBLayer.Models.PolozkaSkladu"
                 ColNames="@(new List<string>() { "ID", "Názov", "MJ", "Cena" })"
                 ColValues="ViewModel.ZoznamPoloziek"
                 MultiSelect="false"
                 KeyAttributeToo="true"
                 ID="itmfind"></ItemFinderTable>

<div class="container">
    <div class="row p-1">Položky: @ViewModel.PohSkupina.ID</div>

    <div class="row h-25">
        <div class="col col-1">
            <button type="button" class="btn btn-secondary" @onclick="Close">Späť</button>
        </div>
        <div class="col col-1 me-2">
            <button type="button" class="btn btn-primary" @onclick=@(() => Save(false)) disabled="@(ReadOnly || !ViewModel.Zmena)">Uložiť</button>
        </div>
    </div>

    <div class="row">
        <div class="col" style="height: 30rem; overflow:auto;">
            <UniComponents.SimpleTable>
                <THEAD>
                    @if (ViewModel.TypeOfPohJednotka == typeof(PrijemkaPolozka))
                    {

                    <ThSort>ČísloID</ThSort>
                }

                    <ThSort>Názov Položky</ThSort>
                    <ThSort>Množstvo</ThSort>
                    <ThSort>Cena</ThSort>

                    @if (ViewModel.TypeOfPohJednotka == typeof(PrijemkaPolozka))
                    {
                        <ThSort>Merná jednotka</ThSort>
                    }
                    <ThSort>Cena s DPH</ThSort>
                    <ThSort>Celková Cena</ThSort>
                    <ThSort>Celková Cena s DPH</ThSort>
                    <th></th>
                    </THEAD>
                    <TBODY>

                        @foreach (PohJednotka item in ViewModel.ZoznamPohSkupiny)
                        {

                            <tr>
                                @if (ViewModel.TypeOfPohJednotka == typeof(DBLayer.Models.PrijemkaPolozka))
                                {
                                    <td><input type="text" readonly disabled="disabled" value="@(((DBLayer.Models.PrijemkaPolozka)item).PolozkaSkladu)" size="8" class="col-resize" /></td>
                                }
                                <td><input type="text" disabled="@ReadOnly" value="@item.Nazov" @onchange=@((ChangeEventArgs arg) => {item.Nazov = arg.Value.ToString(); ViewModel.Zmena = true; } ) class="w-100 col-resize" /></td>
                                <td><input type="number" disabled="@ReadOnly" @bind-value="@item.Mnozstvo" @bind-value:event="oninput" @onchange="@(() => ViewModel.Zmena = true)" class="w-75 col-resize" /></td>
                                <td><input type="number" disabled="@(ReadOnly || ViewModel.TypeOfPohSkupina == typeof(DBLayer.Models.Vydajka))" @bind-value="item.Cena" @bind-value:event="oninput" @onchange="@(() => ViewModel.Zmena = true)" step="0.001" class="w-100 col-resize" /></td>
                                @if (ViewModel.TypeOfPohJednotka == typeof(PrijemkaPolozka))
                                {
                                    <td>@(((PrijemkaPolozka)item).PolozkaSkladuX.MernaJednotka)</td>
                                }
                                <td class="col-resize">@(item.CenaDPH.ToString("F3"))</td>
                                <td class="col-resize">@(item.CelkovaCena.ToString("F3"))</td>
                                <td class="col-resize">@(item.CelkovaCenaDPH.ToString("F3"))</td>
                                @if (!ReadOnly)
                                {
                                    <td><a @onclick=@(() => Delete(item))><i href="#" class="bi bi-x-circle btn btn-danger"></i></a></td>
                                }
                            </tr>
                        }
                        @if (!ReadOnly)
                        {
                            <tr style="position:sticky; bottom: 0;">
                                <td><input type="text" id="vyhlid" @onchange=ViewModel.VyhladajPolozkuCommand.Execute @onfocus=@(() => ViewModel.Uprava = true) @onkeydown="HandleKeyDown" @onblur=@(() => ViewModel.Uprava = string.IsNullOrEmpty(ViewModel.NovaPoloz.Nazov)) size="8" /></td>
                                <td><input type="text" readonly disabled="disabled" @bind="ViewModel.NovaPoloz.Nazov" /> </td>
                                <td>
                                    <div class="col col-2">
                                        <button type="button" disabled="@(ViewModel.Uprava || ReadOnly)" @onclick=@(async () => {ViewModel.PridatPolozkuCommand.Execute(null);await ClearInput();}) class="btn btn-success">Pridať položku</button>
                                    </div>
                                </td>
                                @*<td>@ViewModel.NovaPoloz.PolozkaSkladuX?.MernaJednotka</td>*@
                                <td>@ViewModel.NovaPoloz.Cena</td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                            </tr>
                        }
                    </TBODY>
                </UniComponents.SimpleTable>
            </div>
        </div>

        <script>window.clearInput = function (inputId) {
            document.getElementById(inputId).value = "";
        }</script>
    </div>


    @code {
        private bool answer = false;
        private string vyhladavac = "";
        ApproveModal AprovMod = new();
        ApproveModal AprovModSave = new();
        ApproveModal AprovModEmpty = new();
        InfoModal InfoMod = new();
        InfoModal InfoModListBadValue = new();
        PohJednotka marked;
        ItemFinderTable<DBLayer.Models.PolozkaSkladu> itmfindmodal = new();

        [Parameter]
        public bool ReadOnly { get; set; } = false;

        protected override void OnInitialized()
        {
            var founded1 = objectHolder.Remove<DBLayer.Models.PohSkup>();   //pokusi sa ziskat objekt z uloziska
            if (founded1 != null)
            {
                ViewModel.PohSkupina = founded1;      //nasla sa existujuca objednavka, nastavujeme model na upravu
                ViewModel.Existujuca = true;
                if (!ViewModel.IsSkupValidna())
                {
                    Debug.WriteLine("Skupina nieje validna z objectHoldera");
                    Navigator.NavigateTo(Navigator.RemoveLastUrl());
                    return;

                }
                var founded2 = objectHolder.Remove<Type>();
                if (founded2 is not null)
                {
                    ViewModel.TypeOfPohSkupina = founded2;
                    if (founded2 == typeof(DBLayer.Models.Prijemka) || founded2 == typeof(DBLayer.Models.Vydajka))
                    {
                        ViewModel.TypeOfPohJednotka = typeof(DBLayer.Models.PrijemkaPolozka);

                    }
                }
                else
                {
                    Debug.WriteLine("Typ skupiny nieje vlozeny v objectHolderi");
                    Navigator.NavigateTo(Navigator.RemoveLastUrl());
                    return;
                }
            }
            else
            {
                Debug.WriteLine("Skupina nieje vlozena spravne v objectHolderi");
                Navigator.NavigateTo(Navigator.RemoveLastUrl());
                return;
            }

            ViewModel.NovaPoloz = (DBLayer.Models.PohJednotka)Activator.CreateInstance(ViewModel.TypeOfPohJednotka);
            ViewModel.LoadzoznamPohSkupiny();
        }

        protected override async Task OnInitializedAsync()
        {
            await ViewModel.LoadZoznam();
        }


        private async Task Delete(PohJednotka poloz)
        {
            marked = poloz;
            await AprovMod.OpenModal();
        }

        private void DeleteCommand()
        {
            ViewModel.VymazatCommand.Execute(marked);
        }

        private async Task HandleKeyDown(KeyboardEventArgs e)
        {
            if (e.Key == "Tab")
            {
                if (ViewModel.NovaPoloz.Nazov == null)
                {
                    await itmfindmodal.PassSearchText(await itmfindmodal.GetInputValue("vyhlid"));
                    await itmfindmodal.OpenModal(true);
                    if (itmfindmodal.OutSelection.Count != 0)
                    {
                        await itmfindmodal.SetInput("vyhlid", itmfindmodal.OutSelection.FirstOrDefault().ID);
                        ViewModel.VyhladajPolozkuCommand.Execute(new ChangeEventArgs() { Value = itmfindmodal.OutSelection.FirstOrDefault().ID });
                    }

                }
            }
        }


        private async Task<bool>
        Save(bool askUser)  //vrati hodnotu na zaklade toho co uzivatel klikne(true - suhlasi, inak false)
        {
            if (askUser)
            {
                return await AprovModSave.OpenModal(true);
            }
            await SaveCommand();
            return true;        //true lebo ztivatel klikol Uloz
        }

        private async Task SaveCommand()
        {
            await ViewModel.Uloz(InfoModListBadValue);
            if (ViewModel.Zmena)    //ak je stale Zmena true, znamena ze sa ukladanie nepodarilo, inak sa podarilo
            {
                await InfoMod.OpenModal();  //zobrazi sa info ze nieje mozne ulozit objednavku koli chybnym udajom
            }
        }


        private async Task Close() //tlacidlo spat
        {
            if (ReadOnly) //ak je zamknute tak len odideme
            {
                objectHolder.Add(ViewModel.PohSkupina);
                Navigator.NavigateTo(Navigator.RemoveLastUrl());
                ViewModel.VycistiHodnotyForce();
                return;
            }

            if (ViewModel.Zmena)    //je registrovaná zmena? //ano
            {
                answer = await Save(true);
                if (ViewModel.Zmena)    //je registrovaná zmena? //ano
                {
                    if (answer)
                    {
                        return; //nic
                    }
                    else
                    {
                        if (ViewModel.IsZoznamEmpty())
                        {
                            answer = await AprovModEmpty.OpenModal(true);
                            if (answer)
                            {
                                if (ViewModel.Deleted)
                                {
                                    objectHolder.Remove<DBLayer.Models.PohSkup>();
                                    Navigator.RemoveLastUrl();              //dvojite odstranenie v pripade zrusenia skupiny
                                    Navigator.NavigateTo(Navigator.RemoveLastUrl());
                                    ViewModel.VycistiHodnotyForce();
                                    return; //koniec
                                }
                            }
                            else
                            {
                                if (ViewModel.VratDoPovodnehoStavu())   //Vratenie, Prazdny? //ano
                                {
                                    Navigator.NavigateTo(Navigator.RemoveLastUrl());
                                    ViewModel.VycistiHodnotyForce();
                                    return; //koniec
                                }
                                else //nie
                                {
                                    objectHolder.Add(ViewModel.PohSkupina);
                                    Navigator.NavigateTo(Navigator.RemoveLastUrl());
                                    ViewModel.VycistiHodnotyForce();
                                    return; //koniec
                                }
                            }
                            return; //nic
                        }
                    }
                }
                else //nie
                {
                    objectHolder.Add(ViewModel.PohSkupina);
                    Navigator.NavigateTo(Navigator.RemoveLastUrl());
                    ViewModel.VycistiHodnotyForce();
                    return; //koniec
                }
            }
            else //nie
            {
                if (ViewModel.IsZoznamEmpty())
                {
                    answer = await AprovModEmpty.OpenModal(true);
                    if (answer)
                    {
                        Navigator.RemoveLastUrl();              //dvojite odstranenie v pripade zrusenia skupiny
                        Navigator.NavigateTo(Navigator.RemoveLastUrl());
                        ViewModel.VycistiHodnotyForce();
                        return; //koniec
                    }
                    //return; //nic
                }
            }
            objectHolder.Add(ViewModel.PohSkupina);
            Navigator.NavigateTo(Navigator.RemoveLastUrl());
            ViewModel.VycistiHodnotyForce();
        }

        private async Task ClearInput() //vycisti pisacie pole
        {
            await JSRuntime.InvokeVoidAsync("clearInput", "vyhlid");
        }

    }



