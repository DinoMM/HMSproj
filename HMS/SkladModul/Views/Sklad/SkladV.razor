@namespace SkladModul
@page "/Sklad"
@using DBLayer.Models
@inherits TransientHoldedComp<SkladViewModel>
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage


<SelectModal @ref="SelectModObd" ID="selectmodalobdobie"
             SelectionList="@ViewModel.GetObdobiaDes()"
             Value="@ViewModel.Obdobie"></SelectModal>
<SelectModal @ref="SelectModSkl" ID="selectmodalsklad"
             SelectionList="@ViewModel.Sklady.Select(x => x.ID).ToList()"
             Value="@ViewModel.Sklad.ID"></SelectModal>
<ApproveModal @ref=AprovMod ID="deletemodal"
              Text="Naozaj chcete odstrániť tento riadok?<br>POZOR môžu sa vymazať prvky, ktoré sú spojené s touto položkou!"
              FuncOnSucc="EventCallback.Empty"
              FuncOnDiss="EventCallback.Empty">
</ApproveModal>
<InfoModal @ref="InfoModHasConneciton" ID="infomodalhascon"
           Text="Nemožno vymazať položku lebo je obsiahnutá v sklade alebo je niekde spomenutá.">
</InfoModal>
@implements IDisposable

<div class="container maxwidth95">

    <div class="row pb-1">
        <div class="col-2">
            <a class="btn btn-info" id="uctobd" style="cursor:pointer" @onclick="ChangeObd">Obdobie:@ViewModel.Obdobie </a>
        </div>
        <div class="col-2">
            <a class="btn btn-info" id="skldpick" style="cursor:pointer" @onclick="ChangeSkl">Sklad:@ViewModel.Sklad.ID </a>
        </div>
    </div>

    <div class="row pb-1">
        @*<div class="col-1"></div>*@
        <div class="col-3 d-flex justify-content-bottom mb-2">
            <SearchManualInput ID="srchinput" Header="Vyhľadaj položku..." OnFilterRequest="(e) => ViewModel.ComplexTable?.FilterResults(e) ?? Task.CompletedTask" />
        </div>
        <div class="col-8 autooverflowx">
            <div class="btn-group" role="group">
                <button type="button" class="btn btn-secondary" @onclick="Close">
                    <IconTextClose></IconTextClose>
                </button>
                @if (UserService.IsLoggedUserInRoles(Sklad.ZMENAPOLOZIEKROLE))
                {
                    <button @onclick="@(() => Navigator.NavigateTo(Navigator.AddNextUrl("/ModifPolozSklad")))" type="button" class="btn btn-primary">
                        <IconText Icon="bi-plus">Pridať položku</IconText>
                    </button>

                }
                @if (UserService.IsLoggedUserInRoles(Sklad.SKLADOVEPOHYBYROLE))
                {
                    <button type="button" @onclick="Prijem" disabled="@(ViewModel.Sklad.ID == "ALL")" class="btn btn-primary">
                        <IconText Icon="bi-chevron-bar-down">Spravovať príjem</IconText>
                    </button>
                    <button type="button" @onclick="Vydaj" disabled="@(ViewModel.Sklad.ID == "ALL")" class="btn btn-primary">
                        <IconText Icon="bi-chevron-bar-up">Spravovať výdaj</IconText>
                    </button>
                }@if (UserService.IsLoggedUserInRoles(Sklad.SKLADOVEPOHYBYROLE.Concat(Sklad.ROLE_R_SKLADOVEPOHYBY).ToList()))
                {
                    <button type="button" @onclick="Uzavriet" disabled="@(ViewModel.Sklad.ID == "ALL" || !ViewModel.AktualneObdobie)" class="btn btn-primary">
                        <IconText Icon="bi-calendar3">Uzavrieť obdobie</IconText>
                    </button>
                }
            </div>
        </div>
        <div class="col-1"></div>
    </div>

    <div class="row">
        @*<div class="col-1"></div>*@
        <div id="@ViewModel.ComplexTable?.ID_scrollbar" class="col-12" style="max-height: 50rem;overflow: auto;">
            <ComplexTable @ref="ViewModel.ComplexTable"
                          ID="complextable"
                          T="PolozkaSkladu"
                          Items="ViewModel.ZoznamPoloziek"
                          LoadingItems="ViewModel.Nacitavanie"
                          Sticky="true"
                          Selectable="true"
                          ParentStateHasChanged="StateHasChanged"
                          OnRefresh="ViewModel.AktualizujPolozky"
                          CollectionChanged="ViewModel.OnCollectionChanged"
                          OnDbClick="(item) => Open(item)"
                          SetTableSettings="@((true, tableSettings, null))">
                <AdditionToolbar>
                    <button id="loadmnozstvo" type="button" class="btn btn-outline-dark p-1 border-0 border-start border-end"
                            data-bs-toggle="tooltip"
                            data-bs-placement="bottom"
                            data-bs-title="Načítať množstvo položiek"
                            disabled="@ViewModel.NacitaneMnozstvo"
                            @onclick="@ViewModel.LoadMnozstvo">
                        <IconText Icon="bi-clipboard-data-fill"></IconText>
                    </button>

                </AdditionToolbar>
            </ComplexTable>
        </div>
        <div class="col-1"></div>
    </div>

    <div class="row">
        <div class="col-12"></div>
    </div>

</div>

<script>window.changeText = (id, newText) => {
    var element = document.getElementById(id);
    element.textContent = newText;
}</script>



@code {

    SelectModal SelectModObd = new();
    SelectModal SelectModSkl = new();
    ApproveModal AprovMod = new();
    InfoModal InfoModHasConneciton = new();
    PolozkaSkladu? marked { get => ViewModel?.ComplexTable?.Marked; }

    List<TableColumnTemplate<PolozkaSkladu>> tableSettings = new()
{
        new () { ID_Prop = nameof(PolozkaSkladu.ID), HeaderValue = "ID", CellValue = (item) => item.ID },
        new () { ID_Prop = nameof(PolozkaSkladu.Nazov), HeaderValue = "Názov", CellValue = (item) => item.Nazov },
        new () { ID_Prop = nameof(PolozkaSkladu.MernaJednotka), HeaderValue = "Merná jendotka", CellValue = (item) => item.MernaJednotka },
        new () { ID_Prop = nameof(PolozkaSkladu.Cena), HeaderValue = "Cena", CellValue = (item) => item.Cena.ToString("F3", System.Globalization.CultureInfo.InvariantCulture)},
        new () { ID_Prop = nameof(PolozkaSkladu.DPH), HeaderValue = "DPH", CellValue = (item) => item.DPH.ToString(), Visible = false },
        new () { ID_Prop = nameof(PolozkaSkladu.CenaDPH), HeaderValue = "Cena s DPH", CellValue = (item) => item.CenaDPH.ToString("F3", System.Globalization.CultureInfo.InvariantCulture), Visible = false },
        new () { ID_Prop = nameof(PolozkaSkladu.Mnozstvo), HeaderValue = "Množstvo", CellValue = (item) => item.Mnozstvo.ToString("F3", System.Globalization.CultureInfo.InvariantCulture) },
    };

    protected override void OnInitializedMustHave()
    {
        tableSettings.Add(new()
        {
            Placeholder = (item) => new RenderFragmentTemplate(typeof(ButtonRemove), new RenderFragmentAttribute("onclick", async () => await Delete(item)), new RenderFragmentAttribute("Disabled", !(ViewModel.MoznoVymazat(item))))
        });

        var founded1 = objectHolder.Remove<DBLayer.Models.Sklad>();   //pokusi sa ziskat objekt z uloziska
        if (founded1 == null)
        {
            return;
        }
        var founded2 = objectHolder.Remove<string>();   //pokusi sa ziskat objekt z uloziska
        if (founded2 != null)
        {
            ViewModel.SetProp(founded1, founded2);      //nasla sa existujuca polozka, nastavujeme model na upravu
        }
    }

    private async Task ChangeObd()
    {
        await SelectModObd.OpenModal(true);
        ViewModel.Obdobie = SelectModObd.Value;

        ViewModel.CheckIsObdobieActual();     //kontrola ci je obdobie aktualne
        ViewModel.NacitaneMnozstvo = false;

        await JSRuntime.InvokeVoidAsync("changeText", "uctobd", "Obdobie:" + ViewModel.Obdobie);
        //StateHasChanged();
    }
    private async Task ChangeSkl()
    {
        await SelectModSkl.OpenModal(true);
        await ViewModel.SetSklad(SelectModSkl.Value);
        await JSRuntime.InvokeVoidAsync("changeText", "skldpick", "Sklad:" + ViewModel.Sklad.ID);
        await JSRuntime.InvokeVoidAsync("changeText", "uctobd", "Obdobie:" + ViewModel.Obdobie);
        //StateHasChanged();
    }

    protected override void OnInitializedTransient()
    {
        ViewModel.NacitaneMnozstvo = false;
        if (!UserService.IsLoggedUserInRoles(Sklad.ROLE_R_SKLAD))
        {
            Navigator.NavigateTo(Navigator.RemoveLastUrl());
            return;
        }
        ViewModel.NacitatDostupneSklady();
    }

    protected override async Task OnInitializedTransientAsync()
    {
        if (!UserService.IsLoggedUserInRoles(Sklad.ROLE_R_SKLAD))
        {
            return;
        }
        await ViewModel.NacitajZoznamy();
    }

    private async Task Delete(PolozkaSkladu poloz)
    {
        if (ViewModel.MoznoVymazat(poloz))
        {
            if (await AprovMod.OpenModal(true))
            {
                ViewModel.VymazPolozku(poloz);
                StateHasChanged();
            }
        }
        else
        {
            await InfoModHasConneciton.OpenModal();
        }

    }
    private async Task Open(PolozkaSkladu poloz)
    {
        if (Sklad.ZMENAPOLOZIEKROLE.Contains(UserService.LoggedUserRole))
        {
            objectHolder.Add(poloz);
            //ViewModel.ZoznamPoloziekSkladu.Clear();
            Navigator.NavigateTo(Navigator.AddNextUrl("/ModifPolozSklad"));
        }
    }

    private void Prijem()
    {
        objectHolder.Add(ViewModel.Sklad);
        objectHolder.Add(ViewModel.Obdobie);
        Navigator.NavigateTo(Navigator.AddNextUrl("/Prijem"));
    }
    private void Vydaj()
    {
        objectHolder.Add(ViewModel.Sklad);
        objectHolder.Add(ViewModel.Obdobie);
        Navigator.NavigateTo(Navigator.AddNextUrl("/Vydaj"));
    }
    private void Uzavriet()
    {
        objectHolder.Add(ViewModel.Sklad);
        objectHolder.Add(ViewModel.Obdobie);
        Navigator.NavigateTo(Navigator.AddNextUrl("/Uzavierka"));
    }

    private void Close()
    {
        var founded1 = objectHolder.Remove<DBLayer.Models.Sklad>();   //pokusi sa ziskat objekt z uloziska //asi netreba
        var founded2 = objectHolder.Remove<string>();   //pokusi sa ziskat objekt z uloziska //asi netreba
                                                        //ViewModel.ZoznamPoloziekSkladu.Clear();
        Navigator.NavigateTo(Navigator.RemoveLastUrl());
    }

    public override void Dispose()
    {
        ViewModel.ClearNumZoznam();
        base.Dispose();

    }
}
