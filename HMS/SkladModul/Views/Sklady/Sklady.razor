@namespace SkladModul
@page "/Sklady"
@inherits TransientHoldedComp<SkladyViewModel>

<ApproveModal @ref=AprovMod ID="deletemodal"
              Text="Naozaj chcete odstrániť tento riadok?<br>POZOR môžu sa vymazať prvky, ktoré sú spojené s touto položkou!"
              FuncOnSucc="EventCallback.Empty"
              FuncOnDiss="EventCallback.Empty">
</ApproveModal>
<InfoModal @ref="InfoModHasConneciton" ID="infomodalhascon"
           Text="Nemožno vymazať sklad lebo je pridelený k položke.">
</InfoModal>

<div class="container">

    <div class="row pb-1">

        <div class="col-3 d-flex justify-content-bottom mb-2">
            <SearchManualInput ID="srchinput" Header="Vyhľadaj sklad..." OnFilterRequest="(e) => ViewModel.ComplexTable?.FilterResults(e) ?? Task.CompletedTask" />
        </div>

        <div class="col-9">
            <div class="btn-group" role="group">
                <button type="button" class="btn btn-secondary" @onclick="Close"><IconTextClose></IconTextClose></button>
                <button @onclick="Create" disabled="@(!ViewModel.ValidateUserCRUD())" type="button" class="btn btn-primary"><IconTextCreate></IconTextCreate> </button>
                <button type="button" @onclick="Open" disabled="@(marked == null || !ViewModel.ValidateUserCRUD())" class="btn btn-primary"><IconTextOpen></IconTextOpen> </button>
            </div>
        </div>

        <div class="col-1"></div>
    </div>

    <div class="row">
        <div class="col-1"></div>
        <div id="@ViewModel.ComplexTable?.ID_scrollbar" class="col-12" style="max-height: 30rem;overflow: auto;">
            <ComplexTable @ref="ViewModel.ComplexTable"
                          ID="complextable"
                          T="DBLayer.Models.Sklad"
                          Items="ViewModel.ZoznamPoloziek"
                          LoadingItems="ViewModel.Nacitavanie"
                          Sticky="true"
                          Selectable="true"
                          ParentStateHasChanged="StateHasChanged"
                          OnRefresh="ViewModel.NacitajZoznamy"
                          CollectionChanged="ViewModel.OnCollectionChanged"
                          SetTableSettings="@((true, tableSettings, null))">

            </ComplexTable>
        </div>
        <div class="col-1"></div>
    </div>

    <div class="row">
        <div class="col-12"></div>
    </div>

</div>

@code {
    private DBLayer.Models.Sklad? marked { get => ViewModel?.ComplexTable?.Marked; }
    private ApproveModal AprovMod = new();
    private InfoModal InfoModHasConneciton = new();

    List<TableColumnTemplate<DBLayer.Models.Sklad>> tableSettings = new()
{
        new () { ID_Prop = nameof(DBLayer.Models.Sklad.ID), HeaderValue = "ID", CellValue = (item) => item.ID },
        new () { ID_Prop = nameof(DBLayer.Models.Sklad.Nazov), HeaderValue = "Názov", CellValue = (item) => item.Nazov },
    };

    protected override void OnInitializedMustHave()
    {
        tableSettings.Add(new()
        {
            Placeholder = (item) => new RenderFragmentTemplate(typeof(ButtonRemove), new RenderFragmentAttribute("onclick", async () => await Delete(item)), new RenderFragmentAttribute("Disabled", !(ViewModel.MoznoVymazat(item))))
        });
    }

    protected override void OnInitializedTransient()
    {
        if (!ViewModel.ValidateUser())
        {
            Navigator.NavigateTo(Navigator.RemoveLastUrl());
            return;
        }
    }

    protected override async Task OnInitializedTransientAsync()
    {
        if (!ViewModel.ValidateUser())
        {
            return;
        }
        await ViewModel.NacitajZoznamy();
    }

    public void Close()
    {
        Navigator.NavigateTo(Navigator.RemoveLastUrl());
    }

    public void Open()
    {
        if (marked != null)
        {
            if (ViewModel.ValidateUserCRUD())
            {
                objectHolder.Add(marked);
                Navigator.NavigateTo(Navigator.AddNextUrl("/CRUSklad"));
            }
        }
    }

    public async Task Delete(DBLayer.Models.Sklad sklad)
    {
        if (ViewModel.MoznoVymazat(sklad))
        {
            if (await AprovMod.OpenModal(true))
            {
                ViewModel.Vymazat(sklad);
                StateHasChanged();
            }
        }
        else
        {
            await InfoModHasConneciton.OpenModal();
        }
    }

    public void Create()
    {
        if (ViewModel.ValidateUserCRUD())
        {
            SetStartConditionOnVisit();
            Navigator.NavigateTo(Navigator.AddNextUrl("/CRUSklad"));
        }
    }
}
