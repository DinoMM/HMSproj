@namespace SkladModul
@page "/Dodavatelia"
@inherits TransientHoldedComp<DodavateliaViewModel>

<ApproveModal @ref=AprovMod ID="deletemodal"
              Text="Naozaj chcete odstrániť tento riadok?<br>POZOR môžu sa vymazať prvky, ktoré sú spojené s touto položkou!"
              FuncOnSucc="EventCallback.Empty"
              FuncOnDiss="EventCallback.Empty">
</ApproveModal>
<InfoModal @ref="InfoModHasConneciton" ID="infomodalhascon"
           Text="Nemožno vymazať organizáciu lebo je pridelená k objednávkam.">
</InfoModal>

<div class="container">

    <div class="row pb-1">

        <div class="col-3 d-flex justify-content-bottom mb-2">
            <SearchManualInput ID="srchinput" Header="Vyhľadaj organizáciu..." OnFilterRequest="(e) => ViewModel.Complextable?.FilterResults(e) ?? Task.CompletedTask" />
        </div>

        <div class="col-9">
            <div class="btn-group" role="group">
                <button type="button" class="btn btn-secondary" @onclick="Close">
                    <IconTextClose></IconTextClose>
                </button>
                <button @onclick="Create" disabled="@(!ViewModel.ValidateUserCRUD())" type="button" class="btn btn-primary">
                    <IconTextCreate></IconTextCreate>
                </button>
                <button type="button" @onclick="Open" disabled="@(marked == null || !ViewModel.ValidateUserCRUD())" class="btn btn-primary">
                    <IconTextOpen></IconTextOpen>
                </button>
            </div>
        </div>

        <div class="col-1"></div>
    </div>

    <div class="row">
        <div class="col-1"></div>
        <div id="@ViewModel.Complextable?.ID_scrollbar" class="col-12" style="max-height: 38rem; overflow: auto;">
            <ComplexTable @ref="ViewModel.Complextable"
                          ID="complextable"
                          T="DBLayer.Models.Dodavatel"
                          Items="ViewModel.ZoznamDodavatelov"
                          LoadingItems="ViewModel.NacitavaniePoloziek"
                          Sticky="true"
                          Selectable="true"
                          ParentStateHasChanged="StateHasChanged"
                          OnRefresh="ViewModel.NacitajZoznamy"
                          SetTableSettings="@((true, tableSettings, null))">

            </ComplexTable>
        </div>
        <div class="col-1"></div>
    </div>

    <div class="row">
        <div class="col-12"></div>
    </div>

</div>

@code {
    private DBLayer.Models.Dodavatel? marked { get => ViewModel.Complextable?.Marked; }
    private ApproveModal AprovMod = new();
    private InfoModal InfoModHasConneciton = new();

    List<TableColumnTemplate<DBLayer.Models.Dodavatel>> tableSettings = new()
{
    new () { ID_Prop = nameof(DBLayer.Models.Dodavatel.ICO), HeaderValue = "IČO", CellValue = (item) => item.ICO },
    new () { ID_Prop = nameof(DBLayer.Models.Dodavatel.Nazov), HeaderValue = "Názov", CellValue = (item) => item.Nazov },
    new () { ID_Prop = nameof(DBLayer.Models.Dodavatel.Obec), HeaderValue = "Obec", CellValue = (item) => item.Obec },
    new () { ID_Prop = nameof(DBLayer.Models.Dodavatel.Adresa), HeaderValue = "Adresa", CellValue = (item) => item.Adresa },
    new () { ID_Prop = nameof(DBLayer.Models.Dodavatel.Iban), HeaderValue = "Iban", CellValue = (item) => item.Iban },

    };

    protected override void OnInitializedMustHave()
    {
        if (ViewModel.ValidateUserCRUD())
        {
            tableSettings.Add(new()
            {
                Placeholder = (item) => new RenderFragmentTemplate(typeof(ButtonRemove),
                new RenderFragmentAttribute("onclick", () => Delete(item)),
                new RenderFragmentAttribute("Disabled", !ViewModel.MoznoVymazat(item)))
            });
        }
    }

    protected override void OnInitializedTransient()
    {
        if (!ViewModel.ValidateUser())
        {
            Navigator.NavigateTo(Navigator.RemoveLastUrl());
            return;
        }
    }

    protected override async Task OnInitializedTransientAsync()
    {
        await ViewModel.NacitajZoznamy();
        //ViewModel.ZoznamDodavatelov.CollectionChanged += (e, y) => ViewModel.Complextable?.OnItemsChange();
    }

    protected override void OnAfterRenderTransient(bool firstRender)
    {
        if (firstRender)
        {
            GetHolder().StartMethodAsync = async () => await ViewModel.NacitajZoznamy();
        }
    }

    public void Close()
    {
        Navigator.NavigateTo(Navigator.RemoveLastUrl());
    }

    public void Open()
    {
        if (marked != null)
        {
            if (ViewModel.ValidateUserCRUD())
            {
                objectHolder.Add(marked);
                Navigator.NavigateTo(Navigator.AddNextUrl("/CRUDodavatel"));
            }
        }
    }

    public async Task Delete(DBLayer.Models.Dodavatel user)
    {
        if (ViewModel.MoznoVymazat(user))
        {
            if (await AprovMod.OpenModal(true))
            {
                await ViewModel.Vymazat(user);
                StateHasChanged();
            }
        }
        else
        {
            await InfoModHasConneciton.OpenModal();
        }
    }

    public void Create()
    {
        if (ViewModel.ValidateUserCRUD())
        {
            SetStartConditionOnVisit();
            Navigator.NavigateTo(Navigator.AddNextUrl("/CRUDodavatel"));
        }
    }
}
