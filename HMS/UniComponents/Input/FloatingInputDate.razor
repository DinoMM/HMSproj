@namespace UniComponents
@inject IJSRuntime JSRuntime
@inherits AInput<DateTime?>

<div class="input-group">
    <div class="form-floating overflow-hidden">
        <Microsoft.AspNetCore.Components.Forms.InputDate id="@ID"
                      class="@("form-control mb-1 border-secondary-subtle " + ClassInput + (IsNull() ? " rounded-end " : ""))" Type="ShowedDateType"
                      TValue="DateTime?"
                      ValueChanged="(e) => OnInputChange(new() { Value = e })"
                      Value="@Value"
                      ValueExpression="@(() => Value)"
                      placeholder="."
                      disabled="@(Disabled)"
                      aria-label="."
                      aria-describedby="@(ID + "addon")"
                      autocomplete="off" />
        @if (!string.IsNullOrEmpty(Header))
        {
            <label for="@ID" class="text-truncate">@Header</label>
        }
    </div>
    <button class="btn btn-outline-secondary mb-1 border-secondary-subtle border-start-0 @(IsNull() ? "d-none" : "")"
            id="@(ID + "addon")"
            @onclick="ClearInput">
        X
    </button>
</div>

@code {

    /// <summary>
    /// Aký typ dátumu chceme nastavovať. Sú 4 typy. Default DateTimeLocal <para/>
    /// Microsoft.AspNetCore.Components.Forms.InputDateType.DateTimeLocal
    /// </summary>
    [Parameter]
    public Microsoft.AspNetCore.Components.Forms.InputDateType ShowedDateType { get; set; } = Microsoft.AspNetCore.Components.Forms.InputDateType.DateTimeLocal;

    /// <summary>
    /// Clears the input field
    /// </summary>
    private async Task ClearInput()
    {
        await JSRuntime.InvokeVoidAsync("clearInputField", ID);
        await JSRuntime.InvokeVoidAsync("focusInputField", ID);
        Value = null;
        await ValueChanged.InvokeAsync(Value);
    }

    protected override async Task OnInputChange(ChangeEventArgs e)
    {
        await base.OnInputChange(e);
    }

    private bool IsNull()
    {
        return Value == null;
    }
}
