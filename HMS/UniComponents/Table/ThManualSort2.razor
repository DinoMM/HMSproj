@namespace UniComponents
@typeparam T

<th class="@Class" scope="col" @ondblclick="SortThis">
    @ChildContent
</th>

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string PropertyName { get; set; } = string.Empty;

    [Parameter]
    public Func<string, object, List<T>, Func<T, object?>?, Task<List<T>>> SortMethod { get; set; } = null!;

    [Parameter]
    public List<string>? SelectionList { get; set; } = null;

    [Parameter]
    public CompLoader? SortSelCompLoader { get; set; } = null;

    [Parameter]
    public SelectModal? SortSelectModal { get; set; } = null;

    [Parameter]
    [EditorRequired]
    public Func<IList<T>> GetActualList { get; set; }

    [Parameter]
    public (Func<T, object?>, Type)? CellConvert { get; set; } = null;

    /// <summary>
    /// Ak je zoznam ObservableCollection tak treba sem vložiť metodu OnCollectionChange pre dočastné vypnutie spúšťania pri každej zmene zoznamu
    /// </summary>
    [Parameter]
    public NotifyCollectionChangedEventHandler? CollectionChanged { get; set; }

    /// <summary>
    /// Slúži pre upade parenta, napr. keď sa zmení Marked/Markers tak aby sa parrent komponent updatol ak využíva Selection. Nahoď sem StateHasChanged, fajn pre @ref spojenia. Default EventCallback.Empty.
    /// </summary>
    [Parameter]
    public EventCallback ParentStateHasChanged { get; set; } = EventCallback.Empty;

    /// <summary>
    /// Čo sa zobrazí v class, default: "nonselecttext"
    /// </summary>
    [Parameter]
    public string Class { get; set; } = "nonselecttext";

    private bool sortDirection = false;


    private object GetParam()
    {
        if (SelectionList != null)
        {
            return SelectionList;
        }
        else
        {
            return sortDirection = !sortDirection;
        }
    }

    private async Task SortOnDb()
    {
        var list = GetActualList.Invoke();

        if (list is System.Collections.ObjectModel.ObservableCollection<T> oblist)
        {
            oblist.CollectionChanged -= CollectionChanged;
        }

        var res = await SortMethod.Invoke(PropertyName,
            GetParam(),
            list.ToList(),
            CellConvert.HasValue ? CellConvert.Value.Item1 : null);

        list.Clear();
        res.ForEach(x => list.Add(x));

        if (list is System.Collections.ObjectModel.ObservableCollection<T> oblist2)
        {
            oblist2.CollectionChanged += CollectionChanged;
        }

        await ParentStateHasChanged.InvokeAsync();
    }

    private async Task SortThis()
    {
        if (SortSelCompLoader != null)
        {
            await SortSelCompLoader.StartChildContent(async () =>
            {
                await SortOnDb();
                await SortSelCompLoader.StopChildContent();
            });
        }
        else
        {
            await SortOnDb();
        }
    }
}
