@namespace UniComponents
@inject IJSRuntime JSRuntime 

<!-- Modal -->
<div class="modal fade" id="@ID" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="staticBackdropLabel">@Header</h5>
                @* <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button> *@
            </div>
            <div class="modal-body" id="modalATextLabel">
                @((MarkupString)Text)
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick=@(async () => { await FuncOnSucc.InvokeAsync(); CloseModal(true); })>Áno</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick=@(async () => { await FuncOnDiss.InvokeAsync(); CloseModal(false); })>Nie</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Header { get; set; } = "Info";

    [Parameter]
    [EditorRequired]
    public string Text { get; set; }

    /// <summary>
    /// Nazov funkcie, ktora sa uskutocni po stlaceni ano
    /// </summary>
    [Parameter]
    [EditorRequired]
    public EventCallback FuncOnSucc { get; set; }       

    /// <summary>
    /// Nazov funkcie, ktora sa uskutocni po stlaceni nie
    /// </summary>
    [Parameter]
    [EditorRequired]
    public EventCallback FuncOnDiss { get; set; }

    private TaskCompletionSource<bool> tcs;
    private bool tstop = false;

    /// <summary>
    /// Unikatne ID podla ktoreho vieme rozoznat medzi viacerimi modalmi
    /// </summary>
    [Parameter]
    public string ID { get; set; } = "staticBackdropApprove";


    public async Task<bool> OpenModal(bool stop = false)
    {
        tstop = stop;
        if (stop)
        {
            tcs = new TaskCompletionSource<bool>();
            await JSRuntime.InvokeVoidAsync("eval", "$('#" + ID + "').modal('show');");  //(pomohol som si z internetu tutoriály/AI)
            await tcs.Task;             //fyzické statie programu
            return tcs.Task.Result;
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("eval", "$('#" + ID + "').modal('show');");  //(pomohol som si z internetu tutoriály/AI)
            return true;
        }
        
    }

    private void CloseModal(bool ans)
    {
        if (tstop)
        {
            tcs.SetResult(ans); //zastavi fyzické státie programu
        }
    }
}

