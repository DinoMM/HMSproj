@namespace UniComponents
@inject IJSRuntime JSRuntime

<div class="modal fade" id="@ID" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleHModalLabel">@Header</h5>
                @* <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button> *@
            </div>
            <div class="modal-body">
                <form>
                    @foreach (var item in Inputs)
                    {
                        switch (item.Item2)
                        {
                            case "number":
                                <div class="mb-3">
                                    <label class="col-form-label" id=@("labelnumber" + Inputs.IndexOf(item))>@item.Item1</label>
                                    <input type="number" class="form-control" id=@("inputnumber" + Inputs.IndexOf(item)) @onchange="(e) => func(e,item)">
                                </div>
                                break;
                            case "string":
                                <div class="mb-3">
                                    <label class="col-form-label" id=@("labelstring" + Inputs.IndexOf(item))>@item.Item1</label>
                                    <input type="text" class="form-control" id=@("inputstring" + Inputs.IndexOf(item)) @onchange="(e) => func(e,item)">
                                </div>
                                break;
                            case "textArea":
                                <div class="mb-3">
                                    <label class="col-form-label" id=@("labeltextarea" + Inputs.IndexOf(item))>@item.Item1</label>
                                    <textarea class="form-control" id=@("inputtextarea" + Inputs.IndexOf(item)) @onchange="(e) => func(e,item)"></textarea>
                                </div>
                                break;
                            case "email":
                                <div class="mb-3">
                                    <label class="col-form-label" id=@("labelemail" + Inputs.IndexOf(item))>@item.Item1</label>
                                    <input type="email" class="form-control" id=@("inputemail" + Inputs.IndexOf(item)) @onchange="(e) => func(e,item)">
                                </div>
                                break;
                            case "bool":
                                <div class="mb-3">
                                    <label class="col-form-label" id=@("labelbool" + Inputs.IndexOf(item))>@item.Item1</label>
                                    <input type="checkbox" class="form-control" id=@("inputbool" + Inputs.IndexOf(item)) @onchange="(e) => func(e,item)">
                                </div>
                                break;
                            default:
                                @(FuncOnSucc = EventCallback.Empty)
                                <div class="mb-3">
                                    <label class="col-form-label" id=@("labelerror" + Inputs.IndexOf(item))>
                                        Chyba pri @("<" + item.Item1 + " " + item.Item2 + ">")
                                    </label>
                                </div>
                                break;
                        }
                    }
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick=@(async () => { await FuncOnSucc.InvokeAsync(); CloseModal(true); })>Poslať</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick=@(async () => { CloseModal(false); }) >Zavrieť</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string ID { get; set; } = "exampleModalForm";

    [Parameter]
    public string Header { get; set; } = "Formular";

    private TaskCompletionSource<bool> tcs;
    private bool tstop = false;

    private List<(string, string)> _inputs;
    /// <summary>
    /// @(new List<(string, string)>() { ("Nazov1", "string"), ("Nazov2", "string")}) ||
    /// Item1 - Nazov, ktory sa zobrazi ||
    /// Item2 - Typ, ktory ma byt input ("number", "string", "textArea", "bool", "email") ||
    /// </summary>
    [Parameter]
    [EditorRequired]
    public List<(string, string)> Inputs
    {
        get
        {
            return _inputs;
        }
        set
        {
            _inputs = value;
            foreach (var item in _inputs)       //generovanie vnutra Outputs
            {
                switch (item.Item2)
                {
                    case "number":
                        Outputs.Add(0.0);
                        break;
                    case "string":
                    case "textArea":
                        Outputs.Add(String.Empty);
                        break;
                    case "email":
                        Outputs.Add("@");
                        break;
                    case "bool":
                        Outputs.Add(false);
                        break;
                    default:
                        Console.WriteLine("Chyba pri vkladani do FastFormModal. Chybova hodnota: <" + item.Item1 + "," + item.Item2 + ">"); break;
                }
            }
        }
    }      //string - nazov, string - datatyp("string", "int" ...)
    /// <summary>
    /// Vysledok z formularov, ktory treba skontrolovat, nevkladat nic do neho lebo sa automaticky generuje
    /// </summary>
    public List<object> Outputs { get; private set; } = new List<object>();               // list, ktoreho pvky budu pozostavat z poradia vlozenych prvkov v Inputs ako vysledok vstupu od pouzivatela, nesmie byt meneny z vonku
    [Parameter]
    [EditorRequired]
    public EventCallback FuncOnSucc { get; set; }

    /// <summary>
    ///  Otvori modal pod ulozenym ID, vracia hodnotu podla toho, ci uzivatel klikol ano alebo nie
    /// </summary>
    /// <param name="stop"> Vrati true ak uzivatel prijal, inak false</param>
    /// <returns></returns>
    public async Task<bool> OpenModal(bool stop = false)
    {
        tstop = stop;
        if (stop)
        {
            tcs = new TaskCompletionSource<bool>();
            await JSRuntime.InvokeVoidAsync("eval", "$('#" + ID + "').modal('show');");   //(pomohol som si z internetu tutoriály/AI)
            await tcs.Task;             //fyzické statie programu
            return tcs.Task.Result;
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("eval", "$('#" + ID + "').modal('show');");   //(pomohol som si z internetu tutoriály/AI)
            return true;
        }
    }

    private void CloseModal(bool ans)
    {
        if (tstop)
        {
            tcs.SetResult(ans); //zastavi fyzické státie programu
        }
    }

    private void func(ChangeEventArgs e, (string, string) item)
    {
        if (e.Value is not null)
        {
            switch (Inputs[Inputs.IndexOf(item)].Item2)
            {
                case "number":
                    double outD;
                    if (Double.TryParse(e.Value.ToString(), out outD))
                    {
                        Outputs[Inputs.IndexOf(item)] = outD;
                    }
                    else
                    {
                        Outputs[Inputs.IndexOf(item)] = 0;
                    }
                    break;
                case "string":
                case "textArea":
                case "email":
                    Outputs[Inputs.IndexOf(item)] = e.Value.ToString() ?? "";
                    break;
                case "bool":
                    Outputs[Inputs.IndexOf(item)] = Convert.ToBoolean(e.Value.ToString());
                    break;
                default:
                    Console.WriteLine("Chyba pri vkladani do FastFormModal"); break;
            }
        }
    }
}
